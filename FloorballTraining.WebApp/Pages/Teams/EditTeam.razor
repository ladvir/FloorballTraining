@page "/editteam/{teamId:int}"
@using FloorballTraining.CoreBusiness.Validations
@using FloorballTraining.UseCases.Teams.Interfaces
@inject AppSettings AppSettings
@inject IEditTeamUseCase EditTeamUseCase
@inject IDeleteTeamUseCase DeleteTeamUseCase
@inject IViewTeamByIdUseCase ViewTeamByIdUseCase
@inject IViewAgeGroupsAllUseCase ViewAgeGroupsAllUseCase
@inject NavigationManager NavigationManager
@inject ISnackbar SnackBar


@if(_team!=null) {

    <FormHeaderComponent Title="Tým" Name=" _place?.Name" OnSubmit="Submit" OnCancel="Cancel" OnDelete="Delete" IsEditForm="true" />


    <EditForm EditContext="_editContext" OnValidSubmit="Submit">
        <FluentValidationValidator Validator="_teamValidator" />
    <div class="flex-wrap gap-4">
        <MudTextField Label="Název" @bind-Value="_team.Name" For="() => _team.Name"/>
        
            <MudSelect T="AgeGroupDto" Value="_team.AgeGroup" ToStringFunc="@_converter" 
                       Label="Věková kategorie" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" Clearable>
                @foreach (var ageGroup in _ageGroups.Where(ag => !ag.IsAnyAge()))
            {
                    <MudSelectItem Value="@ageGroup">@ageGroup.Name</MudSelectItem>
            }
        </MudSelect>
        
        <TeamMembersListComponent Team="@_team"/>
    </div>
</EditForm>
}

@code {
    [Parameter]
    public int TeamId { get; set; }

    private TeamDto? _team;

    readonly Func<AgeGroupDto?, string> _converter = p => p?.Name ?? string.Empty;

    private TeamValidator _teamValidator = new();
    private EditContext _editContext = null!;
    private IReadOnlyList<AgeGroupDto> _ageGroups = new List<AgeGroupDto>();

    protected override async Task OnInitializedAsync()
    {
        _team = await ViewTeamByIdUseCase.ExecuteAsync(TeamId);
        _ageGroups = await ViewAgeGroupsAllUseCase.ExecuteAsync();

        if (_team != null) _editContext = new EditContext(_team);

        _teamValidator = new TeamValidator(
            AppSettings.MaximalLengthTeamName
        );
    }

   
    private async Task Submit()
    {
        if (_team != null)
        {
            _team.AgeGroupId = _team.AgeGroup.Id;
        }

        if (!_editContext.Validate())
            {
                ShowErrorMessage(_editContext.GetValidationMessages());
                return;
            }


            await EditTeamUseCase.ExecuteAsync(_team!);
            NavigationManager.NavigateTo($"/editclub/{_team!.ClubId}");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/teams");
    }

    private async Task Delete()
    {
        await DeleteTeamUseCase.ExecuteAsync(_team!.Id);
        NavigationManager.NavigateTo("/teams");
    }

    public void ShowErrorMessage(IEnumerable<string> messages)
    {
        foreach (var message in messages)
        {
            SnackBar.Add(message, severity: Severity.Error);
        }
    }

    

}
