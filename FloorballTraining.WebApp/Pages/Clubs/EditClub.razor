@page "/editclub/{clubId:int}"
@using FloorballTraining.UseCases.Clubs.Interfaces
@inject IEditClubUseCase EditClubUseCase
@inject IDeleteClubUseCase DeleteClubUseCase
@inject IViewClubByIdUseCase ViewClubByIdUseCase
@inject NavigationManager NavigationManager

@if (_club != null)
{
    <FormHeaderComponent Title="Klub" Name="@_club.Name" OnSubmit="Submit" OnDelete="Delete" OnCancel="Cancel" IsEditForm="true"/>
    
    <EditForm EditContext="_editContext" OnValidSubmit="Submit">
        <FluentValidationValidator/>
        <MudPaper Elevation="0" Class="d-block gap-4">
            <MudTextField Label="Název klubu" @bind-Value="_club.Name" For="() => _club.Name" Style="width:22em" Class="my-2"/>

            <TeamsListComponent SearchText="" Club="@_club"/>

            <MembersListComponent SearchText="" Class="my-4" Club="@_club"/>

        </MudPaper>
    </EditForm>
}

@code {
    [Parameter]
    public int ClubId { get; set; }

    private ClubDto? _club;
    private EditContext _editContext = null!;
    
    protected override async Task OnInitializedAsync()
    {
        _club = await ViewClubByIdUseCase.ExecuteAsync(ClubId);

        if (_club != null)
        {
            _editContext = new EditContext(_club);
        }
    }

    private async Task Submit()
    {
        if (!_editContext.Validate()) return;

        await EditClubUseCase.ExecuteAsync(_club!).ConfigureAwait(false);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/clubs");
    }

    private async Task Delete()
    {
        await DeleteClubUseCase.ExecuteAsync(_club!.Id);

        NavigationManager.NavigateTo("/clubs");
    }

}
