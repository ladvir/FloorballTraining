@page "/addclub"
@using FloorballTraining.CoreBusiness.Validations
@using FloorballTraining.UseCases.Clubs.Interfaces
@using ButtonType = MudBlazor.ButtonType
@using Variant = MudBlazor.Variant
@inject IAddClubUseCase AddClubUseCase
@inject ISnackbar SnackBar

@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4">Nový klub</MudText>


<EditForm EditContext="_editContext" OnValidSubmit="Submit">
    <FluentValidationValidator Validator="_clubValidator" />
    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4">
        <MudTextField Label="Název" @bind-Value="_club.Name" For="() => _club.Name" Style="width:22em;" />


    </MudPaper>
    <br>
    @*Buttons*@
    <MudPaper Elevation="0" Class="d-inline-flex my-2">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Warning" OnClick="Cancel">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" @onkeypress:preventDefault>OK</MudButton>
    </MudPaper>
</EditForm>


@code {
    private readonly ClubDto _club = new();


    private ClubValidator _clubValidator = new();
    private EditContext _editContext = null!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_club);
        _clubValidator = new ClubValidator();
    }

    private async Task Submit()
    {
        if (!_editContext.Validate())
        {
            ShowErrorMessage(_editContext.GetValidationMessages());
            return;
        }
        await AddClubUseCase.ExecuteAsync(_club);
        NavigationManager.NavigateTo("/clubs");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/clubs");
    }

    public void ShowErrorMessage(IEnumerable<string> messages)
    {
        foreach (var message in messages)
        {
            SnackBar.Add(message, severity: Severity.Error);
        }
    }
    
}