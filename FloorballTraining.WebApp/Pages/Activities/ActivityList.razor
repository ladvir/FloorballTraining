@page "/activities"
@inject AppSettings AppSettings

<MudText Typo="Typo.h4">Aktivity</MudText>

<MudPaper Elevation="0" Class="d-flex gap-2 mb-4">
    <SendActivityViaEmailComponent ActivityIds="@_selectedActivityIds" />
    <AddActivityComponent OnActivityAdded="AddActivityIntoListOfActivities" />
</MudPaper>

<MudGrid>
    <MudItem xl="3">
        <MudPaper Class="d-flex  mud-width-full py-8">
            <SearchActivityComponent SearchCriteria="@_searchCriteria" DurationMax="AppSettings.MaxActivityDuration" PersonsMax="@AppSettings.MaximalPersons" OnSearchItem="Search"/>

        </MudPaper>
    </MudItem>
    <MudItem xl="9" lg="6">
        <MudPaper Class="d-flex mud-width-full py-8">
            <ActivityListAsCardsComponent @ref="_activityListComponent" SearchCriteria="@_searchCriteria" SelectedActivitiesChanged="OnSelectedActivitiesChanged"/>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    SearchCriteria _searchCriteria = new ();
    List<int> _selectedActivityIds = new();

    ActivityListAsCardsComponent _activityListComponent = new();

    private async Task Search(SearchCriteria searchCriteria)
    {
        _searchCriteria = searchCriteria;
        await _activityListComponent.SearchByCriteria(searchCriteria);
    }
    
    private async Task AddActivityIntoListOfActivities(ActivityDto activity)
    {

        _activityListComponent.Activities ??= [];
        _activityListComponent.Activities.Add(activity);
        await _activityListComponent.RetrieveData();
        StateHasChanged();
    }

    private void OnSelectedActivitiesChanged(List<int> selectedActivityIds)
    {
        _selectedActivityIds = selectedActivityIds;
        StateHasChanged();
    }

}
