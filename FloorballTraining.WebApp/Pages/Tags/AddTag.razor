@page "/addtag"
@using FloorballTraining.CoreBusiness.Specifications
@inject IAddTagUseCase AddTagUseCase
@inject IViewTagsWithSpecificationUseCase ViewTagsUseCase

@inject NavigationManager NavigationManager

<FormHeaderComponent Title="Nový štítek" OnSubmit="Submit" OnCancel="Cancel" IsEditForm="false" />

<EditForm Model="@_tag" OnValidSubmit="Submit">
    <DataAnnotationsValidator/>
    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4">
        <MudTextField Label="Název" @bind-Value="_tag.Name" For="() => _tag.Name" Style="width:22em;" />

        <MudSelect T="int?" @bind-Value="_tag.ParentTagId" SelectedValuesChanged="CheckChanged">
            @foreach(var parent in _parentTags)
            {
                <MudSelectItem T="int?" Value="parent.Id">@parent.Name</MudSelectItem>
            }
        </MudSelect>
        <MudColorPicker @bind-Text="_tag.Color" ColorPickerView="ColorPickerView.Palette" />
    </MudPaper>
</EditForm>


@code {
    private readonly TagDto _tag = new();

    private readonly List<TagDto> _parentTags = new();

    private TagDto? _trainingGoalParentTag = new();

    protected override async Task OnInitializedAsync()
    {
        var parentTags = await ViewTagsUseCase.ViewAsync(new TagSpecificationParameters() { ParentTagId = null });

        if (parentTags == null) return;

        _parentTags.AddRange(parentTags);

        _trainingGoalParentTag = _parentTags.FirstOrDefault(pt => pt.IsTrainingGoal);
    }


    private async Task Submit()
    {
        await AddTagUseCase.ExecuteAsync(_tag);
        NavigationManager.NavigateTo("/tags");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/tags");
    }

    public void CheckChanged()
    {   
        _tag.IsTrainingGoal = _tag.ParentTagId == _trainingGoalParentTag?.Id;
    }
}