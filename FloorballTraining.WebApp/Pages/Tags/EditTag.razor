@page "/edittag/{tagId:int}"
@using FloorballTraining.CoreBusiness.Specifications
@inject IEditTagUseCase EditTagUseCase
@inject IDeleteTagUseCase DeleteTagUseCase

@inject IViewTagsWithSpecificationUseCase ViewTagsUseCase
@inject IViewTagByIdUseCase ViewTagByIdUseCase

@inject NavigationManager NavigationManager

@if (_tag == null)
{
    <MudPaper Elevation="0">Štítek nenalezen</MudPaper>
}
else
{
    <FormHeaderComponent Title="Štítek" Name="@_tag.Name" OnSubmit="Submit" OnDelete="Delete" OnCancel="Cancel" IsEditForm="true" />
    <EditForm Model="@_tag" OnValidSubmit="Submit">
        <DataAnnotationsValidator/>
        <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4">
            <MudTextField Label="Název" @bind-Value="_tag.Name" For="() => _tag.Name" Style="width:22em;"/>

            <MudSelect T="int?" @bind-Value="_tag.ParentTagId" Text="@_tag.ParentTagName" SelectedValuesChanged="CheckChanged" Style="width:22em;">
               
                <MudSelectItem T="int?" Value="null">*****</MudSelectItem>
                @if (_parentTags != null)
                {
                    @foreach (var parent in _parentTags)
                    {
                        <MudSelectItem T="int?" Value="@parent.Id">@parent.Name</MudSelectItem>
                    }
                }

            </MudSelect>
            <MudColorPicker @bind-Text="_tag.Color" ColorPickerView="ColorPickerView.Palette"/>

            

        </MudPaper>
    </EditForm>
}

@code {

    [Parameter]
    public int TagId { get; set; }

    private TagDto? _tag;

    private IReadOnlyList<TagDto>? _parentTags;

    private TagDto? _trainingGoalParentTag;

    protected override async Task OnParametersSetAsync()
    {
        _tag = await ViewTagByIdUseCase.ExecuteAsync(TagId);
        _parentTags = await ViewTagsUseCase.ViewAsync(new TagSpecificationParameters() { ParentTagId = null });
    }

    protected override void OnInitialized()
    {
        _trainingGoalParentTag = _parentTags?.FirstOrDefault(pt => pt.IsTrainingGoal);
    }

    private async Task Submit()
    {
        await EditTagUseCase.ExecuteAsync(_tag!);
        NavigationManager.NavigateTo("/tags");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/tags");
    }

    private void CheckChanged(IEnumerable<int?> selectedParents)
    {
        var enumerable = selectedParents.ToList();

        if (enumerable.Any())
        {
            _tag!.ParentTagId = enumerable.First();
            _tag.ParentTagName = _parentTags?.FirstOrDefault(t => t.Id == _tag.ParentTagId)?.ParentTagName;
        }
        else
        {
            _tag!.ParentTagId = null;
            _tag.ParentTagName = null;
        }

        _tag.IsTrainingGoal = _tag.ParentTagId!=null && _tag.ParentTagId == _trainingGoalParentTag?.Id;
    }

    private async Task Delete()
    {
        if (_tag != null)
        {
            await DeleteTagUseCase.ExecuteAsync(_tag.Id);
        }

        NavigationManager.NavigateTo("/tags");
    }

}
