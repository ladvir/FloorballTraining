@page "/add-application-user"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using FloorballTraining.CoreBusiness
@using FloorballTraining.WebApp.Services
@using AlignItems = Radzen.AlignItems
@using ButtonType = Radzen.ButtonType
@using DialogService = Radzen.DialogService
@using Orientation = Radzen.Orientation
@using Variant = Radzen.Variant
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService
@attribute [Authorize]
@inject Microsoft.Extensions.Localization.IStringLocalizer<AddApplicationUser> L

<RadzenRow>
    <RadzenColumn SizeMD="12">
        <RadzenTemplateForm TItem="ApplicationUser" Data="@user" Visible="@(user != null)" Submit="@FormSubmit">
            <RadzenAlert Title="Cannot create user" Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Small" AlertStyle="AlertStyle.Danger" Visible="@errorVisible">@error</RadzenAlert>

             <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Component="Email" style="width: 100%" Text="Email" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenTextBox style="display: block; width: 100%" @bind-Value="@(user.Email)" Name="Email" />
                    <RadzenRequiredValidator Component="Email" Text="Email is required" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Component="RoleNames" style="width: 100%" Text="Roles" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenDropDown Data="@roles" Multiple="true" style="width: 100%" TextProperty="Name"
                        @bind-Value="@(userRoles)" ValueProperty="Id" Name="Roles" />
                </RadzenColumn>
            </RadzenRow>
             <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Component="Password" style="width: 100%" Text="Password" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenPassword style="display: block; width: 100%" @bind-Value="@(user.Password)"
                        Name="Password" />
                    <RadzenRequiredValidator Component="Password" Text="Password is required" />
                </RadzenColumn>
            </RadzenRow>
             <RadzenRow style="margin-bottom: 1rem">
                <RadzenColumn SizeMD="3">
                    <RadzenLabel Component="ConfirmPassword" style="width: 100%" Text="Confirm password" />
                </RadzenColumn>
                <RadzenColumn SizeMD="9">
                    <RadzenPassword style="display: block; width: 100%" @bind-Value="@(user.ConfirmPassword)"
                        Name="ConfirmPassword" />
                    <RadzenRequiredValidator Component="ConfirmPassword" Text="ConfirmPassword is required" />
                    <RadzenCompareValidator Text="Passwords must match" Component="ConfirmPassword" Value="@user.Password" />
                </RadzenColumn>
            </RadzenRow>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                    <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" Variant="Variant.Flat" />
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Text="Cancel" Click="@CancelClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenTemplateForm>
    </RadzenColumn>
</RadzenRow>
@code {
        protected IEnumerable<ApplicationRole> roles;
        protected ApplicationUser user;
        protected IEnumerable<string> userRoles = Enumerable.Empty<string>();
        protected string error;
        protected bool errorVisible;

        [Inject]
        protected SecurityService Security { get; set; }

        protected override async Task OnInitializedAsync()
        {
            user = new ApplicationUser();

            roles = await Security.GetRoles();
        }

        protected async Task FormSubmit(ApplicationUser user)
        {
            try
            {
                user.Roles = roles.Where(role => userRoles.Contains(role.Id)).ToList();
                await Security.CreateUser(user);
                DialogService.Close(null);
            }
            catch (Exception ex)
            {
                errorVisible = true;
                error = ex.Message;
            }
        }

        protected async Task CancelClick()
        {
            DialogService.Close(null);
        }
}
