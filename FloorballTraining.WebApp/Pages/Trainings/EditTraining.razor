@page "/edittraining/{TrainingId:int}"
@using FloorballTraining.CoreBusiness.Validations
@using FloorballTraining.CoreBusiness.Specifications
@inject IEditTrainingUseCase EditTrainingUseCase
@inject IViewTrainingByIdUseCase ViewTrainingByIdUseCase
@inject IViewPlacesUseCase ViewPlacesUseCase
@inject IDeleteTrainingUseCase DeleteTrainingUseCase
@inject NavigationManager NavigationManager
@inject AppSettings AppSettings
@inject ISnackbar SnackBar

@if (_training== null)
{
    <MudPaper Class="align-center justify-center mud-width-full" Elevation="0">
        <MudProgressCircular Color="Color.Warning" Size="Size.Large" Indeterminate="true" />
    </MudPaper>
}
else
{
    <MudPaper Elevation="0" Class="d-inline-flex z-100 position-sticky top-0 align-center justify-end align-content-end gap-2 mud-width-full">
        <MudText Typo="Typo.h4">Trénink</MudText>
        <MudSpacer />
        <ExportToPdfTrainingComponent Training="_training"/>
        <SendTrainingViaEmailComponent TrainingIds ="new List<int>{_training.Id}" />
        <MudChip Icon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Color="Color.Success" OnClick="Submit">Uložit</MudChip>

        <MudChip Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Success" OnClick="Delete">Odstranit</MudChip>
        <MudChip Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Outlined" OnClick="Cancel" Color="Color.Warning">Obnovit</MudChip>
    </MudPaper>


    <MudPaper Elevation="0" Width="100%">
        <EditForm OnValidSubmit="Submit" EditContext="_editContext">
            <FluentValidationValidator Validator="_trainingValidator" />
            <ValidationSummary />
            <MudPaper Elevation="0">

                <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2 align-items-end mud-width-full mb-2">

                    <MudTextField Label="Název" @bind-Value="_training.Name" Class="flex-grow-0 " Style="min-width:20em;" MaxLength="AppSettings.MaximalLengthTrainingName" />
                    <ValidationMessage For="()=>_training.Name" />

                    <MudPaper Elevation="0" Style="width:22em;" Class="mr-2 pa-0">
                        <MudText>Počet osob: @(StringExtensions.GetRangeString(_training.PersonsMin, _training.PersonsMax))</MudText>
                        <RangeSlider @bind-ValueHigh="@_training.PersonsMax" @bind-ValueLow="@_training.PersonsMin" MinValue="1" MaxValue="@_personsMax" />
                        <ValidationMessage For="()=>_training.PersonsMin" />
                        <ValidationMessage For="()=>_training.PersonsMax" />
                    </MudPaper>
                    
                    <MudPaper Elevation="0" Style="width:22em;" Class="mr-2 pa-0">
                        <MudText>Počet brankářů: @(StringExtensions.GetRangeString(_training.GoaliesMin, _training.GoaliesMax))</MudText>
                        <RangeSlider @bind-ValueHigh="@_training.GoaliesMax" @bind-ValueLow="@_training.GoaliesMin" MinValue="0" MaxValue="@_goaliesMax" />
                        <ValidationMessage For="()=>_training.GoaliesMin" />
                        <ValidationMessage For="()=>_training.GoaliesMax" />
                    </MudPaper>

                    <MudPaper Elevation="0" Style="width:22em;" Class="mr-2 pa-0">
                        <MudText>Doba trvání: @_training.Duration</MudText>

                        <Slider @bind-Value="@_training!.Duration" MinValue="1" MaxValue="@(Math.Max(_training?.GetActivitiesDuration()??0, _maximalDuration))" />
                        <ValidationMessage For="()=>_training!.Duration" />
                    </MudPaper>

                    <MudPaper Elevation="0" Style="width:22em;" Class="mr-2 pa-0">
                        <MudText>Intensita: @Intensities.Values.First(v => v.Value == _training.Intensity).Description</MudText>
                        <Slider @bind-Value="@_training.Intensity" MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue" />
                        <ValidationMessage For="()=>_training.Intensity" />
                    </MudPaper>

                    <MudPaper Elevation="0" Style="width:22em;" Class="mr-2 pa-0">
                        <MudText>Obtížnost: @Difficulties.Values.First(v => v.Value == _training.Difficulty).Description</MudText>
                        <Slider @bind-Value="@_training.Difficulty" MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue" />
                        <ValidationMessage For="()=>_training.Difficulty" />
                    </MudPaper>
                </MudPaper>

                <MudPaper Elevation="0" Class="d-inline-flex gap-4 flex-wrap my-2 mud-width-full">
                    <MudTextField Label="Popis" @bind-Value="_training.Description" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <ValidationMessage For="()=>_training.Description" />
                    <MudTextField Label="Komentář před zahájením" @bind-Value="_training.CommentBefore" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <ValidationMessage For="()=>_training.CommentBefore" />
                    <MudTextField Label="Komentář po ukončení" @bind-Value="_training.CommentAfter" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <ValidationMessage For="()=>_training.CommentAfter" />
                </MudPaper>
                
                <MudPaper Elevation="0" Class="my-2 pa-0 d-flex-wrap" >
                
                    <MudSelect Label="Místo" Variant="Variant.Outlined" Dense="true" @bind-Value="_training.Place" Style="width:5em;" Class="d-flex-none mb-4 pa-0">

                        @if (_places != null)
                        {
                            @foreach (var place in _places)
                            {
                            @* <MudSelectItem Value="@SelectedPlaceChanged(place)"><MudText>@place.ToString()</MudText></MudSelectItem> *@
                                <MudSelectItem Value="@place"><MudText>@place.ToString()</MudText></MudSelectItem>
                            }
                        }

                    </MudSelect>
                    <ValidationMessage For="()=>_training.Place" />
                </MudPaper>


                <MudPaper Elevation="0" Class="my-2 mud-width-full">
                    <MudText Typo="Typo.h5">Věkové kategorie</MudText>
                    <AgeGroupsComponent SelectedValues="@_training.TrainingAgeGroups" SelectedValuesChanged="RefreshAgeGroups" />
                    <ValidationMessage For="()=>_training.TrainingAgeGroups" />
                </MudPaper>

                <MudPaper Elevation="0" Class="my-2 mud-width-full">
                    <MudText Typo="Typo.h5">Zaměření tréninku</MudText>
                    <TagSelectTrainingGoalComponent SelectedTags="@_training.GetTrainingGoals()" OnSelectedTagsChanged="TrainingGoalChanged" />
                    <ValidationMessage For="()=>_training.TrainingGoal1" />
                </MudPaper>
            
            
                @*Equipments*@
                <MudPaper Elevation="0" Class="my-2 mud-width-full">
                    <MudText Typo="Typo.h5">Vybavení a pomůcky</MudText>
                    <MudChipSet >
                        @foreach (var equipment in _equipmentList)
                        {
                            <MudChip Text="@equipment" Size="Size.Small"/>
                        }
                    </MudChipSet>
                </MudPaper>

                @*TrainingParts*@
                <MudPaper Elevation="0" Class="my-2 mud-width-full">
                    <MudText Typo="Typo.h5">Tréninkové části</MudText>


                    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap my-2 align-items-center mud-width-full">
                        <MudPaper Elevation="0" Class="d-inline-flex flex-wrap shrink-1 my-2 align-items-center mud-width-full" Style="">
                            <MudText Style="max-width: 22em;" Class="d-flex flex-wrap mr-2">Naplánováno celkem</MudText>
                            <ProgressComponent Value="@_training.GetActivitiesDuration()" TargetValue="@_training.Duration" Ratio="@(_training.Duration == 0 ? 0 : Math.Round(100 * (_training.GetActivitiesDuration() / (decimal)_training.Duration)))" />
                            @* </MudPaper>
                    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap my-2 align-items-center mud-width-full"> *@
                            <MudText Style="max-width: 22em;" Class="d-flex flex-wrap ml-4 mr-2">Naplánováno zaměření</MudText>
                            <ProgressComponent Value="@_training.GetTrainingGoalActivitiesDuration()" TargetValue="@((int)Math.Floor((decimal)(AppSettings.MinimalDurationTrainingGoalPercent / 100 * _training.Duration)))"
                                               Ratio="@(_training.Duration == 0 ? 0 : Math.Round(100 * (_training.GetTrainingGoalActivitiesDuration() / (decimal)_training.Duration)))" />
                        </MudPaper>
                    </MudPaper>
                
                    <ValidationMessage For="()=>_training.TrainingParts" />
                
                    <TrainingPartsComponent Training="_training" OnTrainingPartChanged="OnTrainingPartChanged" />
                    <MudChip Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="AddTrainingPart" Class="mr-8">Nová tréninková část</MudChip>

                </MudPaper>
            

           
                
            </MudPaper>
        </EditForm>

    </MudPaper>



}
@code {
    [Parameter]
    public int TrainingId { get; set; }

    private TrainingValidator? _trainingValidator ;

    private IReadOnlyList<PlaceDto>? _places;

    private TrainingDto? _training;

    private List<string> _equipmentList = new();

    private EditContext _editContext = null!;

    private int _personsMax;
    private int _goaliesMax;
    private int _maximalDuration;


    protected override async Task OnInitializedAsync()
    {
        _training = await ViewTrainingByIdUseCase.ExecuteAsync(TrainingId);
        _editContext = new EditContext(_training!);

        var places = await ViewPlacesUseCase.ExecuteAsync(new PlaceSpecificationParameters());
        _places = places.Data;


        _personsMax = AppSettings.MaximalPersons;
        _goaliesMax = AppSettings.MaximalPersons;
        _maximalDuration = AppSettings.MaxTrainingDuration;
        _trainingValidator = new TrainingValidator(
            _maximalDuration,
            AppSettings.MaximalLengthTrainingName,
            AppSettings.MaximalLengthTrainingDescription,
            _personsMax,
            AppSettings.MaxTrainingPartDuration,
            AppSettings.MaximalLengthTrainingPartName,
            AppSettings.MaximalLengthTrainingPartDescription,
            AppSettings.MinimalDurationTrainingGoalPercent
            );

        _editContext.NotifyValidationStateChanged();
        _editContext.Validate();
    }

    private async Task Submit()
    {

        if (!_editContext.Validate())
        {
            ShowErrorMessage(_editContext.GetValidationMessages());
            return;
        }
        
        await EditTrainingUseCase.ExecuteAsync(_training!);
        NavigationManager.NavigateTo("/edittraining/" + _training!.Id);
    }

    private void ShowErrorMessage(IEnumerable<string> messages)
    {
        var config = (SnackbarOptions options) =>
        {
    options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        };

        foreach (var message in messages)
        {
            SnackBar.Add(message, severity: Severity.Error, configure: config);
        }
        
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/trainings");
    }

    private void AddTrainingPart()
    {
        _training!.AddTrainingPart();

        _editContext.NotifyValidationStateChanged();
        _editContext.NotifyFieldChanged(new FieldIdentifier(_training, nameof(_training.TrainingParts)));

    }

    private void OnTrainingPartChanged()
    {
        _editContext.NotifyValidationStateChanged();
        _editContext.NotifyFieldChanged(new FieldIdentifier(_training!, nameof(_training.TrainingParts)));
        _equipmentList = _training?.GetEquipment() ?? new List<string>();
    }

    private void RefreshAgeGroups(List<AgeGroupDto> ageGroupDtos)
    {
        _training!.TrainingAgeGroups = new List<AgeGroupDto>();
        foreach (var ageGroupDto in ageGroupDtos)
        {
            _training.AddAgeGroup(ageGroupDto);
        }
        _editContext.NotifyValidationStateChanged();
        _editContext.NotifyFieldChanged(new FieldIdentifier(_training!, nameof(_training.TrainingAgeGroups)));
    }

    private void  TrainingGoalChanged(List<TagDto> goals)
    {
        

        _training!.TrainingGoal3 = null;
        _training!.TrainingGoal2 = null;
        _training!.TrainingGoal1 = null;




        if (goals.Count >= 3)
        {
            _training!.TrainingGoal3 = goals[2];
            _editContext.NotifyFieldChanged(new FieldIdentifier(_training, nameof(_training.TrainingGoal3)));
        }

        if (goals.Count >= 2)
        {
            _training!.TrainingGoal2 = goals[1];
            _editContext.NotifyFieldChanged(new FieldIdentifier(_training, nameof(_training.TrainingGoal2)));
        }

        if (goals.Count >= 1)
        {
            _training!.TrainingGoal1 = goals[0];
            _editContext.NotifyFieldChanged(new FieldIdentifier(_training, nameof(_training.TrainingGoal1)));
        }

        
        //_editContext.NotifyValidationStateChanged();
        //StateHasChanged();
    }

    private async Task Delete()
    {
        await  DeleteTrainingUseCase.ExecuteAsync(_training!.Id);
        NavigationManager.NavigateTo("/trainings");
    }

}
