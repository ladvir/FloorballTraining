@page "/scheduler"
@using BlazorScheduler
@using FloorballTraining.UseCases.Appointments
@using FloorballTraining.UseCases.Appointments.Interfaces
@inject IDialogService DialogService

@inject IViewAppointmentsAllUseCase ViewAppointmentsAllUseCase
@inject IAddAppointmentUseCase AddAppointmentUseCase
@inject IEditAppointmentUseCase EditAppointmentUseCase
@inject IDeleteAppointmentUseCase DeleteAppointmentUseCase

<MudText Typo="Typo.h4">Rozvrh</MudText>

<MudPaper Elevation="0" Class="d-block gap-4">

  
    
    <Scheduler @ref="@_scheduler" StartDayOfWeek="DayOfWeek.Monday"
               TodayButtonText="Dnes"
               OnRequestNewData="OnRequestNewData"
               OnOverflowAppointmentClick="AddAppointment"
               EnableAppointmentsCreationFromScheduler="false"
               NewAppointmentText="Nová událost"
               EnableRescheduling="true"
               EnableDragging="true"
               ThemeColor="grey"
               RootDayClass="xyz"
               RootDayStyle="flotrDay"
                
               >
        
        <HeaderTemplate>
            <MudToolBar>
                <MudIconButton Icon="@Icons.Material.Filled.NavigateBefore" OnClick="() => context.SetCurrentMonth(context.CurrentDate.AddMonths(-1))" />
                @if (_loading)
                {
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                }
                else
                {
                    <MudText Typo="Typo.h4">@context.CurrentDate.ToString("MMM yy")</MudText>
                }
                <MudIconButton Icon="@Icons.Material.Filled.NavigateNext" OnClick="() => context.SetCurrentMonth(context.CurrentDate.AddMonths(+1))" />
                <MudSpacer />
                <MudButton EndIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Disabled="_loading" OnClick="@(() => AddAppointment(context.CurrentDate))">
                    Nová událost
                </MudButton>
                <MudButton EndIcon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Class="ml-2" Disabled="_loading">
                    Uložit
                </MudButton>
            </MudToolBar>
        </HeaderTemplate>

        <DayTemplate>
            <MudPaper Elevation="0" Class="justify-end align-start">
                <MudText Typo="Typo.h6">@context.Date.ToString("dd")</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="() => AddAppointment(context)" @onmousedown:stopPropagation="true" />

            </MudPaper>
            
        </DayTemplate>
        <Appointments>
            @foreach (var app in _tasksList)
            {
                string color = "#BE6216";

                switch (app.AppointmentType)
                {
                    case AppointmentType.Training:
                        color = "#BE6216";
                        break;
                    case AppointmentType.Match:
                        color = "#16BE62";
                        break;
                    case AppointmentType.Camp:
                        color = "#6216BE";
                        break;
                }

                <Appointment Color="@color" Class="rounded-2 border-1" Start="@app.Start" End="@app.End" OnClick="() => OnAppointmentClicked(app)" OnReschedule="(start, end) => HandleReschedule(app, start, end)">
                    
                        <MudGrid >
                        <MudItem xs="2" Class="mud-width-full">
                            
                                @* <MudIcon Icon="@Icons.Material.Filled.EventBusy" Class="mr-3" /> *@
                                <MudText Typo="Typo.caption">@FloorballTraining.CoreBusiness.EnumExtension.GetDescription(app.AppointmentType)</MudText>
                            
                        </MudItem>

                        <MudItem xs="10" Style="@($"background-color:{@color}")" Class="d-flex align-center justify-center mud-width-full pa-1">


                            <MudPaper Elevation="0" Style="@($"background-color:{@color}")"  Class="">
                                    <MudText Typo="Typo.body2">@app.Name</MudText>

                                    @* <MudIcon Icon="tags.png" Class="mr-3" /> *@
                                </MudPaper>
                                    <MudText Typo="Typo.caption">@app.Start.ToString("HH:mm")</MudText>
                                    <MudText Typo="Typo.caption">@app.Duration</MudText>
                            <MudText Typo="Typo.caption">@app.TrainingName</MudText>
                            
                            
                            <MudPaper Elevation="0" Class="d-flex flex-wrap"
                                      >
                                          <MudText Typo="Typo.caption">@app.TrainingName</MudText>
                                          <MudText Typo="Typo.caption">@app.TrainingName</MudText>
                                          <MudText Typo="Typo.caption">@app.TrainingName</MudText>
                                          <MudText Typo="Typo.caption">@app.TrainingName</MudText>
                                          <MudText Typo="Typo.caption">@app.TrainingName</MudText>
                                          <MudText Typo="Typo.caption">@app.TrainingName</MudText>
                                          <MudText Typo="Typo.caption">@app.TrainingName</MudText>
                                          <MudText Typo="Typo.caption">@app.TrainingName</MudText>
                                          <MudText Typo="Typo.caption">@app.TrainingName</MudText><MudText Typo="Typo.caption">@app.TrainingName</MudText>

                            </MudPaper>
                        </MudItem>

                    </MudGrid>

                   
                    
                    
                </Appointment>
            }
        </Appointments>
    </Scheduler>
   
</MudPaper>
@code {

    private bool _loading = false;

    private Scheduler _scheduler = new ();

    private List<AppointmentDto> _tasksList= [];

    private IReadOnlyList<AppointmentDto> _allEvents = [];




    protected override async Task OnInitializedAsync()
    {
        await GetAllAppointments().ConfigureAwait(false);
    }

    private async Task GetAllAppointments()
    {
        _allEvents = await ViewAppointmentsAllUseCase.ExecuteAsync();
        await OnRequestNewData(_scheduler.CurrentRange.Start, _scheduler.CurrentRange.End);
    }

    Task OnRequestNewData(DateTime from, DateTime to)
    {
        _tasksList = GetEvents(from, to).ToList();
        return Task.CompletedTask;
    }

    public IEnumerable<AppointmentDto> GetEvents(DateTime from, DateTime to)
    {
        return _allEvents
            .Where(x => x.Start.Date>=from && x.Start.Date <= to);
    }

    private async Task AddAppointment(DateTime day)
    {
        var options = new DialogOptions
        {
            NoHeader = false,
            CloseOnEscapeKey = false,
            CloseButton = true,
            BackdropClick = false,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            FullScreen = false
        };


        var appointment = new AppointmentDto
        {
            Start = day,
            TeamId = 28, //todo viragla
            AppointmentType = AppointmentType.Training
        };

        var parameters = new DialogParameters { ["Appointment"] = appointment };

        var dialog = await DialogService.ShowAsync<EditEventDialog>("Nová událost", parameters, options);

        var result = await dialog.Result;

        if (result is { Canceled: false, Data: not null })
        {
            appointment =  (AppointmentDto)result.Data;

            if (appointment != null)
            {
                await AddAppointmentUseCase.ExecuteAsync(appointment);
            }

            await GetAllAppointments();
        }
        
        
    }

    private async Task OnAppointmentClicked(AppointmentDto ev)
    {
        var options = new DialogOptions
        {
            NoHeader = false,
            CloseOnEscapeKey = false,
            CloseButton = true,
            BackdropClick = false,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            FullScreen = false,

        };


        var parameters = new DialogParameters { ["Appointment"] = ev };

        if (DialogService != null)
        {
            var dialog = await DialogService.ShowAsync<EditEventDialog>("Upravit událost", parameters, options);

            var result = await dialog.Result;

            var _ = _allEvents.Single(a => a.Id == ev.Id);
            if (result is { Canceled: false, Data: not null })
            {
                ev = (AppointmentDto)result.Data;

                await EditAppointmentUseCase.ExecuteAsync(ev);

                await GetAllAppointments();
                await OnRequestNewData(_scheduler.CurrentRange.Start, _scheduler.CurrentRange.End);
            }
        }
    }

    Task HandleReschedule(AppointmentDto ev, DateTime newStart, DateTime newEnd)
    {
        ev.Start = newStart;
        return Task.CompletedTask;
    }
}
