@page "/editmember/{memberId:int}"
@using FloorballTraining.CoreBusiness.Validations
@using FloorballTraining.UseCases.Members.Interfaces
@inject IEditMemberUseCase EditMemberUseCase
@inject IDeleteMemberUseCase DeleteMemberUseCase
@inject ISnackbar SnackBar
@inject IViewMemberByIdUseCase ViewMemberByIdUseCase

@inject NavigationManager NavigationManager


    <FormHeaderComponent Title="Člen klubu" Name="@_member.Name" OnSubmit="Submit" OnDelete="Delete" OnCancel="Cancel" IsEditForm="true"/>


   <EditForm OnValidSubmit="Submit" Model="@_member">
        <FluentValidationValidator Validator="_memberValidator" /> 
         <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4">
         <MudTextField Label="Jméno" @bind-Value="_member.Name" For="() => _member.Name" Style="width:22em;" />

        <MudSelect T="ClubRole" @bind-Value="_member.ClubRole" Label="Klubová role" Style="width:22em;">

            @foreach (var clubRole in Enum.GetValues<ClubRole>())
            {
                <MudSelectItem Value="@clubRole">@clubRole</MudSelectItem>
            }
        </MudSelect> 


         <MudTextField Label="Email" @bind-Value="_member.Email" For="() => _member.Email" Style="width:22em;" /> 
        </MudPaper> 

    </EditForm>



@code {
    [Parameter]
    public int MemberId { get; set; }

    private MemberDto _member = new();

    private MemberValidator _memberValidator = [];
    private EditContext _editContext = null!;

    protected override async Task OnParametersSetAsync()
    {
        _member = await ViewMemberByIdUseCase.ExecuteAsync(MemberId)?? new MemberDto();

        
            _editContext = new EditContext(_member);

            _memberValidator = new MemberValidator();
        
    }
   
    protected override async Task OnInitializedAsync()
    {

        _member = await ViewMemberByIdUseCase.ExecuteAsync(MemberId);
    }


   
    private async Task Submit()
    {
        if (!_editContext.Validate())
        {
            ShowErrorMessage(_editContext.GetValidationMessages());
            return;
        }

        await EditMemberUseCase.ExecuteAsync(_member);
        NavigationManager.NavigateTo("/members");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/members");
    }

    private async Task Delete()
    {
        await DeleteMemberUseCase.ExecuteAsync(_member);

        NavigationManager.NavigateTo("/members");
    }

    private void ShowErrorMessage(IEnumerable<string> messages)
    {
        var config = (SnackbarOptions options) =>
        {
            //options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        };

        foreach (var message in messages)
        {
            SnackBar.Add(message, severity: Severity.Error, configure: config);
        }
    }

}
