@page "/"
@using System.Globalization
@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.Services
@using FloorballTraining.UseCases.Appointments
@using FloorballTraining.UseCases.Appointments.Interfaces
@using DialogOptions = MudBlazor.DialogOptions
@using DialogPosition = MudBlazor.DialogPosition
@using Orientation = Radzen.Orientation
@inject IDeleteAppointmentUseCase DeleteAppointmentUseCase
@inject IDialogService DialogService
@inject IAppointmentService AppointmentService

@inject IViewAppointmentsUseCase ViewAppointmentsUseCase
@* <DashboardComponent /> *@
<RadzenComponents />

    <RadzenRow Gap="6">
        <RadzenButton Click="OpenNewAppointmentDialog">Nová událost</RadzenButton>
        <RadzenButton Click="Export">Export</RadzenButton>
        <RadzenButton Click="DeleteAll">Vše smazat</RadzenButton>
    </RadzenRow>
    

@* 
<MudChip T="string" OnClick="InsertPo">Po</MudChip>
<MudChip T="string" OnClick="InsertUt">Ut</MudChip>

<MudChip T="string" OnClick="DeleteAll">DeleteAll</MudChip> *@

@inject TooltipService TooltipService

@if (_scheduler == null && _appointments==null)
{
    <MudPaper Class="align-center justify-center mud-width-full" Elevation="0">
        <MudProgressCircular Color="Color.Warning" Size="Size.Large" Indeterminate="true" />
    </MudPaper>
}
else
{
    <RadzenScheduler @ref=_scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="AppointmentDto" Data=@_appointments StartProperty="Start" EndProperty="End"
                     TextProperty="@nameof(AppointmentDto.Name)" SelectedIndex="2" Culture="CultureInfo.CurrentCulture" TodayText="Dnes"
                     SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender
                     AppointmentMouseEnter=@OnAppointmentMouseEnter AppointmentMouseLeave=@OnAppointmentMouseLeave>
        <RadzenDayView Text="Den"></RadzenDayView>
        <RadzenWeekView Text="Týden"></RadzenWeekView>
        <RadzenMonthView Text="Měsíc" MoreText="Dalších {0}"></RadzenMonthView>
        <RadzenYearPlannerView Text="Sezóna" StartMonth="@Month.August"/>
        <RadzenYearView Text="Rok" StartMonth="@Month.January"/>
    </RadzenScheduler>
}

@code {
    RadzenScheduler<AppointmentDto>? _scheduler;

    IList<AppointmentDto>? _appointments;

    protected override async Task OnInitializedAsync()
    {
        await GetAllAppointments().ConfigureAwait(false);
    }

    private async Task GetAllAppointments()
    {
        var readOnlyList = (await ViewAppointmentsUseCase.ExecuteAsync(new AppointmentSpecificationParameters())).Data;
        if (readOnlyList != null) _appointments = readOnlyList.ToList();

        if (_scheduler != null) await _scheduler.Reload();
    }


    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {

        // Highlight today in month view
        if (args.View.Text == "Měsíc" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2)); padding: 4px;";
        }
        if (args.View.Text == "Měsíc" && args.Start.Date != DateTime.Today)
        {
            args.Attributes["style"] = "padding: 4px;";
        }

        // Draw a line for new year if start month is not January
        if ((args.View.Text == "Sezóna" || args.View.Text == "Rok") && args.Start.Month == 12 )
        {
            args.Attributes["style"] = "border-bottom: thick double var(--rz-base-600);padding: 4px;";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        var appointment = new AppointmentDto
        {
            Start = args.Start,
            End = args.End,
            TeamId = 28, //todo viragla
            AppointmentType = AppointmentType.Training
        };

        await OpenNewAppointmentDialog(appointment).ConfigureAwait(false);
    }

    private async Task OpenNewAppointmentDialog()
    {
        await OpenNewAppointmentDialog(new AppointmentDto() { TeamId = 28, Start = DateTime.Now, End = DateTime.Now}).ConfigureAwait(false);
    }

    private async Task OpenNewAppointmentDialog(AppointmentDto appointment)
    {
        var options = new DialogOptions
                {
                    NoHeader = true,
                    CloseOnEscapeKey = false,
                    CloseButton = true,
                    BackdropClick = false,
                    Position = DialogPosition.Center,
                    MaxWidth = MaxWidth.ExtraLarge,
                    FullWidth = true,
                    FullScreen = false
                };
        var parameters = new DialogParameters { ["Appointment"] = appointment };

        var dialog = await DialogService.ShowAsync<EditEventDialog>("Nová událost", parameters, options);

        var result = await dialog.Result;

        if (result is { Canceled: false, Data: not null })
        {
            appointment = (AppointmentDto)result.Data;

            if (appointment != null)
            {
                //await AddAppointmentUseCase.ExecuteAsync(appointment);

                _appointments ??= [];
                _appointments.Add(appointment);
            }
        }

        await GetAllAppointments().ConfigureAwait(false);
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<AppointmentDto> args)
    {

        var parameters = new DialogParameters { ["Appointment"] = args.Data };

        if (DialogService != null)
        {
            var dialog = await DialogService.ShowAsync<EditEventDialog>($"Upravit událost", parameters);

            var result = await dialog.Result;

            if (result is { Canceled: false})
            {
                await GetAllAppointments().ConfigureAwait(false);   
            }
        }
    }

    private void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<AppointmentDto> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        args.Attributes["style"] = $"font-size:0.8rem;background: {AppointmentHelper.GetBackgroundColorRadzen(args.Data)}; color: {AppointmentHelper.GetColorRadzen(args.Data)};";

    }

    void OnAppointmentMouseEnter(SchedulerAppointmentMouseEventArgs<AppointmentDto> args)
    {
        TooltipService.Open(args.Element, _ => 
    @<RadzenStack Orientation="Orientation.Vertical" Gap="0" class="rz-p-2" Style="min-width: 250px; max-width: 500px;">
        <RadzenText TextStyle="TextStyle.H5" class="rz-mb-2" Style="@($"color: {AppointmentHelper.GetColorRadzen(args.Data)};")">
                        @args.Data.Name
                    </RadzenText>

        <RadzenStack Orientation="Orientation.Horizontal" Gap="4px" >
            <RadzenIcon Icon="location_on" IconColor="@AppointmentHelper.GetColorRadzen(args.Data)" />
            <RadzenText Style="@($"color: {AppointmentHelper.GetColorRadzen(args.Data)};")">
                            @args.Data.LocationName
                        </RadzenText>
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
            <RadzenIcon Icon="schedule" IconColor="@AppointmentHelper.GetColorRadzen(args.Data)" />
            <RadzenText Style="@($"color: {AppointmentHelper.GetColorRadzen(args.Data)};")">
                            @AppointmentHelper.GetDurationDescription(args.Data)
                        </RadzenText>
                    </RadzenStack>
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="4px">
            <RadzenIcon Icon="description" IconColor="@AppointmentHelper.GetColorRadzen(args.Data)" />
            <RadzenText Style="@($"color: {AppointmentHelper.GetColorRadzen(args.Data)};")">
                            @AppointmentHelper.GetAppointmentTypeDescription(args.Data)
                        </RadzenText>

                    </RadzenStack>
            </RadzenStack>
    , new TooltipOptions { Position = TooltipPosition.Right, Duration = null, Style = $"background-color:{AppointmentHelper.GetBackgroundColorRadzen(args.Data)} ;" });
    }

    void OnAppointmentMouseLeave(SchedulerAppointmentMouseEventArgs<AppointmentDto> args)
    {
        TooltipService.Close();
    }

    private async Task InsertPo()
    {
        var appointment = new AppointmentDto
        {
            AppointmentType = AppointmentType.Match,
            Start = new DateTime(2024, 9, 30, 17, 0, 0),
            End = new DateTime(2024, 9, 30, 18, 30, 0),
            Name = "PO",
            TeamId = 28,
            LocationId = 7
        };

        AppointmentService.GenerateFutureAppointments(appointment, RepeatingFrequency.Weekly, 1, new DateTime(2024, 10, 31, 18, 30, 0));

        //await AddAppointmentUseCase.ExecuteAsync(appointment);
        await GetAllAppointments().ConfigureAwait(false);
    }

    private async Task InsertUt()
    {
        var appointment = new AppointmentDto
        {
            AppointmentType = AppointmentType.Match,
            Start = new DateTime(2024, 10, 1, 17, 0, 0),
            End = new DateTime(2024, 10, 1, 18, 30, 0),
            Name = "UT",
            TeamId = 28,
            LocationId = 7
        };

        AppointmentService.GenerateFutureAppointments(appointment, RepeatingFrequency.Weekly, 1, appointment.Start.AddMonths(1));

        //await AddAppointmentUseCase.ExecuteAsync(appointment);
        await GetAllAppointments().ConfigureAwait(false);
    }

    private async Task DeleteAll()
    {
        if (_appointments != null)
            foreach (var a in _appointments)
            {
                await DeleteAppointmentUseCase.ExecuteAsync(a);
            }

        await GetAllAppointments().ConfigureAwait(false);

    }


    private Task Export()
    {
        return Task.CompletedTask;
    }

}

