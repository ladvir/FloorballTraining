@page "/appointments"
@using FloorballTraining.CoreBusiness
@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.UseCases.Appointments
@using FloorballTraining.UseCases.Appointments.Interfaces
@inject IDialogService DialogService

@inject IViewAppointmentsUseCase ViewAppointmentsUseCase
@inject IAddAppointmentUseCase AddAppointmentUseCase
@inject IEditAppointmentUseCase EditAppointmentUseCase
@inject IDeleteAppointmentUseCase DeleteAppointmentUseCase

<MudText Typo="Typo.h4">Rozvrh</MudText>

<MudPaper Elevation="0" Class="d-block gap-4">

  
    
    




    <MudCalendar Use24HourClock="true" ShowDay="false" ShowPrevNextButtons="true" ShowTodayButton="true"  HighlightToday="true" ShowWeek="false" ShowMonth="true" ShowDatePicker="true"  EnableDragItems="false" EnableResizeItems="false" Elevation="10"
                 Items="_calendarItems" MonthCellMinHeight="100" FirstDayOfWeek="DayOfWeek.Monday" ShowCurrentTime="false" Outlined="true" CellClicked="CellClicked" ItemClicked="ItemClicked" 
>
    <ToolbarContent>
        <MudButton EndIcon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Disabled="_loading" OnClick="NewAppointment">Nová událost</MudButton>
    </ToolbarContent>

   

    <CellTemplate>
           
        
        <MudCard  Outlined="true">
            <MudCardHeader>
                <CardHeaderAvatar>
                        <MudAvatar Size="Size.Small" Color="@AppointmentHelper.GetMudColor(((MyCalendarItem)context).AppointmentType)">AAA</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@(((MyCalendarItem)context).Name)</MudText>
                    
                  @*   <MudPaper Elevation="0" Class="d-inlne-flex flex-wrap gap-2"> *@
                        <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2 justify-items-start align-center" >
                            <MudIcon Icon="@Icons.Material.Sharp.Place"/>
                            <MudText Typo="Typo.body2">@($"{((MyCalendarItem)context).PlaceName}") </MudText>
                        </MudPaper>
                        
                    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2 justify-items-start align-center" >
                        <MudIcon Icon="@Icons.Material.Sharp.Timer"/>
                        <MudText Typo="Typo.body2">@($"{((MyCalendarItem)context).Start:HH:mm} - {((MyCalendarItem)context).End:HH:mm}") </MudText>
                    </MudPaper>
                    
                    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2 justify-items-start align-center" >
                        <MudIcon Icon="@Icons.Material.Sharp.MergeType"/>
                            <MudText Typo="Typo.body2">@(((MyCalendarItem)context).AppointmentType.GetDescription()) </MudText>
                    </MudPaper>
                    @*  </MudPaper> *@
                </CardHeaderContent>
                
            </MudCardHeader>
            
            <MudCardContent>
                @if (((MyCalendarItem)context).AppointmentType == AppointmentType.Training)
                {
                    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4 pa-2 justify-items-start align-center" >
                        <MudIcon Icon="fa-regular fa-clipboard fa-xl"/>

                        @if (string.IsNullOrEmpty(((MyCalendarItem)context).TrainingName))
                        {
                            <span>Trénink není připraven!</span>
                            <MudIcon Color="Color.Error" Icon="fa-regular fa-exclamation fa-xl"/>
                        }
                        else
                        {
                            <span>@($"{((MyCalendarItem)context).TrainingName}") </span>
                        }

                    </MudPaper>
                }
            </MudCardContent>
            <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Sharp.Delete" OnClick="@(e=> Delete(((MyCalendarItem)context).AppointmentId))">Smazat</MudIconButton>
            </MudCardActions>
        </MudCard>
        
    </CellTemplate>
    </MudCalendar>

</MudPaper>
@code {

    private readonly bool _loading = false;


    private IReadOnlyList<AppointmentDto>? _allEvents = [];

    private List<MyCalendarItem> _calendarItems = [];

    public class MyCalendarItem : CalendarItem
    {
        public int? Duration { get; set; }
        public AppointmentType AppointmentType { get; set; }

        public string? Name { get; set; } = string.Empty;
        public int? TrainingId { get; set; }
        public int AppointmentId { get; set; }
        public string? TrainingName { get; set; }
        public int TeamId { get; set; }
        public bool IsRepeating { get; set; }
        public DateTime? RepeatingEndDate { get; set; }
        public int PlaceId { get; set; }
        public string? PlaceName { get; set; }
        public RepeatingPatternDto? RepeatingPattern { get; set; }
        public AppointmentDto? ParentAppointment { get; set; }
        public List<AppointmentDto> FutureAppointments { get; set; } = [];

        public int? RepeatingPatternId { get; set; }
        public string? Description { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {
        await GetAllAppointments().ConfigureAwait(false);
    }

    private async Task GetAllAppointments()
    {
        _allEvents =  (await ViewAppointmentsUseCase.ExecuteAsync(new AppointmentSpecificationParameters())).Data;

        _calendarItems = new List<MyCalendarItem>();

        if (_allEvents != null)
            foreach (var appointment in _allEvents)
            {
                _calendarItems.Add(new MyCalendarItem
                {
                    Name= appointment.Name,
                    Description = appointment.Description,
                    Start = appointment.Start,
                    End = appointment.End,
                    AppointmentType = appointment.AppointmentType,
                    AppointmentId = appointment.Id,
                    TrainingId = appointment.TrainingId,
                    TrainingName = appointment.TrainingName,
                    TeamId = appointment.TeamId,
                    IsRepeating = appointment.RepeatingPattern != null,
                    PlaceName = appointment.LocationName,
                    PlaceId = appointment.LocationId,
                    RepeatingPattern = appointment.RepeatingPattern,
                    RepeatingPatternId = appointment.RepeatingPattern?.Id
                });
            }
    }

    private async Task AddAppointment(DateTime day)
    {
        var options = new DialogOptions
        {
            NoHeader = true,
            CloseOnEscapeKey = false,
            CloseButton = true,
            BackdropClick = false,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            FullScreen = false
        };


        var appointment = new AppointmentDto
        {
            Start = day,
            End = day,
            TeamId = 28, //todo viragla
            AppointmentType = AppointmentType.Training
        };

        var parameters = new DialogParameters { ["Appointment"] = appointment };

        var dialog = await DialogService.ShowAsync<EditEventDialog>("Nová událost", parameters, options);

        var result = await dialog.Result;

        if (result is { Canceled: false, Data: not null })
        {
            appointment =  (AppointmentDto)result.Data;

            if (appointment != null)
            {
                await AddAppointmentUseCase.ExecuteAsync(appointment);
            }

            await GetAllAppointments();
        }
        
        
    }

    private async Task OnAppointmentClicked(MyCalendarItem appointment)
    {
        var options = new DialogOptions
        {
            NoHeader = true,
            CloseOnEscapeKey = false,
            CloseButton = true,
            BackdropClick = true,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            FullScreen = false

        };

        var i = new AppointmentDto
        {
            Name = appointment.Name,
            Description = appointment.Description,

            Start = appointment.Start,
            End = appointment.End.GetValueOrDefault(),
            AppointmentType = appointment.AppointmentType,
            Id = appointment.AppointmentId,
            TrainingId = appointment.TrainingId,
            TrainingName = appointment.TrainingName,
            TeamId = appointment.TeamId,
            LocationName = appointment.PlaceName,
            LocationId = appointment.PlaceId,
            RepeatingPattern = appointment.RepeatingPattern,
            ParentAppointment = appointment.ParentAppointment,
            FutureAppointments = appointment.FutureAppointments
        };




        var parameters = new DialogParameters { ["Appointment"] = i };

        if (DialogService != null)
        {
            var dialog = await DialogService.ShowAsync<EditEventDialog>($"Upravit událost" , parameters, options);

            var result = await dialog.Result;

            //var _ = _allEvents?.Single(a => a.Id == ev.Id);
            if (result is { Canceled: false, Data: not null })
            {
                var ev = (AppointmentDto)result.Data;


                
                await EditAppointmentUseCase.ExecuteAsync(ev);
            }

            await GetAllAppointments();
        }
    }

    

    
    private async Task NewAppointment()
    {
        await AddAppointment(DateTime.Now).ConfigureAwait(false);
    }


    private async Task CellClicked(DateTime dateTime)
    {
        await AddAppointment(dateTime.Date + new TimeSpan(DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second)).ConfigureAwait(false);
    }

    private async Task ItemClicked(CalendarItem i)
    {
        var item = (MyCalendarItem)i;

        await OnAppointmentClicked(item).ConfigureAwait(false);
    }

    
        private async Task Delete(int appointmentId)
        {
            var x = (await ViewAppointmentsUseCase.ExecuteAsync(new AppointmentSpecificationParameters { Id = appointmentId })).Data;
            if (x != null) await DeleteAppointmentUseCase.ExecuteAsync(x.First());

            await GetAllAppointments();
        }
    

}