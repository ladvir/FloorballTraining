@page "/addplace"
@using FloorballTraining.CoreBusiness
@using Environment = CoreBusiness.Enums.Environment
@using FloorballTraining.UseCases.Places.Interfaces
@inject IAddPlaceUseCase AddPlaceUseCase

@inject NavigationManager NavigationManager

<FormHeaderComponent Title="Nové místo" OnSubmit="Submit" OnCancel="Cancel" IsEditForm="false" />

<EditForm Model="@_place" OnValidSubmit="Submit">
    <DataAnnotationsValidator/>
    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4">
        <MudTextField Label="Název" @bind-Value="_place.Name" For="() => _place.Name" Style="width:22em;" />

        <MudTextField T="int" @bind-Value="_place.Length" Label="Délka" />
        <MudTextField T="int" @bind-Value="_place.Width" Label="Šířka" />

        
        <MudSelect T="Environment" Label="Prostředí" @bind-Value="@Environment" Text="@Environment.GetDescription()" Style="width:22em;">
            <MudSelectItem Value="Environment.Anywhere" >Kdekoliv</MudSelectItem>
            <MudSelectItem Value="Environment.Indoor" >Uvnitř</MudSelectItem>
            <MudSelectItem Value="Environment.Outdoor" >Venku</MudSelectItem>
        </MudSelect>
    </MudPaper>
</EditForm>


@code {
    private readonly PlaceDto _place = new();

    private Environment Environment
    {
        get => string.IsNullOrEmpty(_place.Environment) ? Environment.Anywhere : (Environment)Enum.Parse(typeof(Environment), _place.Environment);
        set => _place.Environment = value.ToString();
    }

    private async Task Submit()
    {
        await AddPlaceUseCase.ExecuteAsync(_place);
        NavigationManager.NavigateTo("/places");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/places");
    }

    
}