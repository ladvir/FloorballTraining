@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.UseCases.Appointments.Interfaces
@using AlignItems = MudBlazor.AlignItems
@inject IDialogService DialogService
@using Orientation = Radzen.Orientation
@using Variant = Radzen.Variant

@inject IViewAppointmentsUseCase ViewAppointmentsUseCase

@inject NavigationManager NavigationManager

@if (_appointments == null)
{
    <MudPaper Class="align-center justify-center mud-width-full" Elevation="0">
        <MudProgressCircular Color="Color.Warning" Size="Size.Large" Indeterminate="true" />
    </MudPaper>
}
else
{
    
    <RadzenRow AlignItems="Radzen.AlignItems.Start">
        <RadzenStack Gap="2" class="rz-p-4">
            <RadzenText TextStyle="TextStyle.H4" >Události v následujících 14 dnech</RadzenText>
            <RadzenTimeline LinePosition="LinePosition.Start" 
                            style="--rz-timeline-line-width: 2px;
                   --rz-timeline-line-color: var(--rz-primary);
                   --rz-timeline-axis-size: 72px;
                   ">
                <Items>
                    @foreach (var appointment in _appointments.OrderBy(a => a.Start))
                    {
                        <RadzenTimelineItem PointVariant="Variant.Outlined" PointStyle="PointStyle.Info" PointShadow="10"  PointSize="PointSize.Large">

                            <PointContent><RadzenIcon IconColor="@AppointmentHelper.GetBackgroundColorRadzen(appointment)" Icon="@AppointmentHelper.GetAppointmentIconRadzen(appointment.AppointmentType)"/></PointContent>
                            <ChildContent>
                                <MudStack Row="false" Justify="Justify.FlexStart" AlignItems="AlignItems.Stretch" Spacing="0">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" >@appointment.Start.ToString("dd.MMM hh:mm")</RadzenText>

                                    @if (appointment.AppointmentType == AppointmentType.Training)
                                    {
                                        <MudStack Row="true">
                                            @if (appointment.TrainingId != null)
                                            {
                                                <MudChip T="string" Icon="@Icons.Material.Filled.Edit" Variant="MudBlazor.Variant.Outlined" Color="Color.Success" OnClick="@(_ => NavigateToTraining(appointment.TrainingId))">@appointment.TrainingName</MudChip>
                                                <ExportToPdfTrainingComponent TrainingId="@appointment.TrainingId"/>
                                            }
                                            else
                                            {

                                                <MudChip T="string" Icon="@Icons.Material.Filled.Edit" Variant="MudBlazor.Variant.Outlined" Color="Color.Warning" OnClick="@(_ => OpenAppointmentDialog(appointment))">@appointment.Name</MudChip>


                                            }
                                        </MudStack>
                                    }
                                    else
                                    {
                                        <RadzenText TextStyle="TextStyle.Body2" >@appointment.Name</RadzenText>
                                    }
                                </MudStack>
                            </ChildContent>
                        </RadzenTimelineItem>


                    }
                </Items>
            </RadzenTimeline>
        </RadzenStack>
        
        @if (_nearestMatch != null)
        {
            <RadzenStack Gap="2" class="rz-p-4">
                <RadzenText TextStyle="TextStyle.H4">Nejbližší zápas</RadzenText>
                <RadzenCard>

                    <RadzenStack Gap="2">
                        <RadzenText TextStyle="TextStyle.DisplayH5" class="rz-display-flex rz-mt-2 rz-my-0"></RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">
                            @_nearestMatch?.Start.ToString("dd.MMM.yyyy")
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1" class="rz-display-flex rz-mt-4 rz-mb-0">@_nearestMatch.Name</RadzenText>
                        <RadzenText TextStyle="TextStyle.Overline">
                            @_nearestMatch?.LocationName
                        </RadzenText>
                    </RadzenStack>
                </RadzenCard>
            </RadzenStack>
        }

        
    </RadzenRow>
    
 
}

@code {
    private IReadOnlyList<AppointmentDto>? _appointments;
    private AppointmentDto? _nearestMatch;

    private const int NextDays = 14;  
    
    protected override async Task OnInitializedAsync()
    {
        var x = (await ViewAppointmentsUseCase.ExecuteAsync(new AppointmentSpecificationParameters { FutureOnly = true})).Data?.FirstOrDefault(); 
        _nearestMatch = (await ViewAppointmentsUseCase.ExecuteAsync(new AppointmentSpecificationParameters { FutureOnly = true, Type = AppointmentType.Match ,PageSize = 1, Sort = "startasc"})).Data?.FirstOrDefault();

        _appointments = (await ViewAppointmentsUseCase.ExecuteAsync(new AppointmentSpecificationParameters { FutureOnly = true, End=DateTime.Today.AddDays(NextDays), Sort = "startasc"})).Data;
    }

    private string GetDaysAndTrainingToNextMatch()
    {
    
        if (_nearestMatch == null)
        {
            return"Není známý termín dalšího zápasu";
        }

        var trainingsToMatch = _appointments?.Where(t => _nearestMatch != null && t.End<= _nearestMatch.Start && t.AppointmentType == AppointmentType.Training) ?? [];
        
        if (!trainingsToMatch.Any())
        {
            return "Do dalšího zápasu není naplánovaný žádný trénink";
        }

        var notPlannedTrainingsCount = trainingsToMatch.Count(t => t.TrainingId == null);


        var matchesText = trainingsToMatch.Count().ToString();

        if (trainingsToMatch.Any())
        {
            matchesText = trainingsToMatch.Count() switch
            {
                1 => "á 1 trénink",
                2 or 3 or 4 => $"ají {matchesText} tréninky",
                _ => $"á {matchesText} tréninků"
            };

            var x = ", ale zbývá naplánovat";
            var notPlannedTrainingsCountText = notPlannedTrainingsCount switch
            {
                0 => ", všechno je naplánováno. Skvěle!",
                1 => x + " 1 trénink",
                2 or 3 or 4 => x + $" {notPlannedTrainingsCount} tréninky",
                _ => x + $" {notPlannedTrainingsCount}  tréninků"
            };





            return $"Do dalšího zápasu zbýv{matchesText}{notPlannedTrainingsCountText}.";
        }

        return string.Empty;


    }


    private void NavigateToTraining(int? trainingId)
    {
        if (trainingId == null) return;
        NavigationManager.NavigateTo($"/edittraining/{trainingId}", new NavigationOptions
        {
            ForceLoad = true // 
        });
    }

    private async Task OpenAppointmentDialog(AppointmentDto appointment)
    {
        var parameters = new DialogParameters { ["Appointment"] = appointment };

        var dialog = await DialogService.ShowAsync<EditEventDialog>(string.Empty, parameters);

        var result = await dialog.Result;

        if (result is { Canceled: false, Data: not null })
        {
           StateHasChanged();
        }

    }
    
}

