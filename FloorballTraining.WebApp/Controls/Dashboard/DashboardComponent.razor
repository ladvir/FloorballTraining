@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.UseCases.Appointments.Interfaces
@using Orientation = Radzen.Orientation
@using Variant = Radzen.Variant

@inject IViewAppointmentsUseCase ViewAppointmentsUseCase
@inject NavigationManager NavigationManager

@if (_appointments == null)
{
    <MudPaper Class="align-center justify-center mud-width-full" Elevation="0">
        <MudProgressCircular Color="Color.Warning" Size="Size.Large" Indeterminate="true" />
    </MudPaper>
}
else
{
    <MudPaper Elevation="0" Class="d-inline-flex gap-2 flex-wrap">
        
        <RadzenTimeline LinePosition="LinePosition.Start"
                        style="--rz-timeline-line-width: 2px;
                   --rz-timeline-line-color: var(--rz-info);
                   --rz-timeline-axis-size: 72px;
                   max-width: 600px;
                   margin: 0 auto;">
            <Items>
                @foreach (var appointment in _appointments.OrderBy(a => a.Start))
                {
                    <RadzenTimelineItem PointVariant="Variant.Outlined" PointStyle="PointStyle.Info" PointShadow="0">


                        <PointContent><RadzenIcon IconColor="@AppointmentHelper.GetColorRadzen2(appointment)" Icon="@AppointmentHelper.GetAppointmentIconRadzen(appointment.AppointmentType)"/></PointContent>
                        <ChildContent>
                            <RadzenText TextStyle="TextStyle.Body1"  class="rz-m-0">@appointment.Start.ToString("dd.MMM hh:mm")</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body2" class="rz-m-0">@appointment.Name</RadzenText>
                            @if (appointment.AppointmentType == AppointmentType.Training)
                            {
                                <RadzenText TextStyle="TextStyle.Body2" class="rz-m-0">@appointment.TrainingName</RadzenText>
                            }
                        </ChildContent>
                    </RadzenTimelineItem>
                    
                  
                }
            </Items>
        </RadzenTimeline>
        
    @if (_nearestMatch != null)
    {
        <RadzenCard class="rz-my-2 rz-mx-auto" Style="max-width: 420px">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-4">

               @*  <RadzenIcon Icon="@AppointmentHelper.GetAppointmentIconRadzen(_nearestMatch.AppointmentType)"></RadzenIcon> *@
                <RadzenStack Gap="0">
                    <RadzenText TextStyle="TextStyle.DisplayH5" class="rz-display-flex rz-mt-2 rz-my-0">Nejbližší zápas</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1">
                        @_nearestMatch?.Start.ToString("dd.MMM")
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1" class="rz-display-flex rz-mt-4 rz-mb-0">@_nearestMatch.Name</RadzenText>
                    <RadzenText TextStyle="TextStyle.Overline">
                        @_nearestMatch?.LocationName
                    </RadzenText>
                </RadzenStack>



            </RadzenStack>
        </RadzenCard>
    }
    

    </MudPaper>
}

@code {
    private IReadOnlyList<AppointmentDto>? _appointments;
    private IReadOnlyList<AppointmentDto>? _matches;
    private AppointmentDto? _nearestMatch;
    
    protected override async Task OnInitializedAsync()
    {
        _nearestMatch = (await ViewAppointmentsUseCase.ExecuteAsync(new AppointmentSpecificationParameters { FutureOnly = true, Type = AppointmentType.Match ,PageSize = 1, Sort = "startasc"})).Data?.FirstOrDefault();

        var maxAppointmentDate = _nearestMatch?.Start.AddDays(7) ?? DateTime.Today.AddDays(10);
        _appointments = (await ViewAppointmentsUseCase.ExecuteAsync(new AppointmentSpecificationParameters { FutureOnly = true, End=maxAppointmentDate, Sort = "startasc"})).Data;
    }

    private string GetDaysAndTrainingToNextMatch()
    {
    
        if (_nearestMatch == null)
        {
            return"Není známý termín dalšího zápasu";
        }

        var trainingsToMatch = _appointments?.Where(t => _nearestMatch != null && t.End<= _nearestMatch.Start && t.AppointmentType == AppointmentType.Training) ?? [];
        
        if (!trainingsToMatch.Any())
        {
            return "Do dalšího zápasu není naplánovaný žádný trénink";
        }

        var notPlannedTrainingsCount = trainingsToMatch.Count(t => t.TrainingId == null);


        var matchesText = trainingsToMatch.Count().ToString();

        if (trainingsToMatch.Any())
        {
            matchesText = trainingsToMatch.Count() switch
            {
                1 => "á 1 trénink",
                2 or 3 or 4 => $"ají {matchesText} tréninky",
                _ => $"á {matchesText} tréninků"
            };

            var x = ", ale zbývá naplánovat";
            var notPlannedTrainingsCountText = notPlannedTrainingsCount switch
            {
                0 => ", všechno je naplánováno. Skvěle!",
                1 => x + " 1 trénink",
                2 or 3 or 4 => x + $" {notPlannedTrainingsCount} tréninky",
                _ => x + $" {notPlannedTrainingsCount}  tréninků"
            };





            return $"Do dalšího zápasu zbýv{matchesText}{notPlannedTrainingsCountText}.";
        }

        return string.Empty;


    }

    

}
