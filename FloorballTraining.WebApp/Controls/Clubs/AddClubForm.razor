@using FloorballTraining.CoreBusiness.Validations
@using FloorballTraining.UseCases.Clubs.Interfaces
@inject NavigationManager NavigationM
@inject IAddClubUseCase AddClubUseCase
@inject ISnackbar SnackBar

@inject NavigationManager NavigationManager

<FormHeaderComponent Title="Nový klub" IsEditForm="false" OnCancel="Cancel" OnSubmit="Submit" />

<EditForm EditContext="_editContext" OnValidSubmit="Submit">
    <FluentValidationValidator Validator="@_clubValidator" />
    <RadzenTextBox Placeholder="Název" @bind-Value="_club.Name" For="() => _club.Name"  Class="rz-my-2" Style="width: 100%;" />
</EditForm>


@code {
    [Parameter]
    public EventCallback OnFormClosed { get; set; }

    [Parameter]
    public EventCallback<ClubDto> OnClubAdded { get; set; }


    private readonly ClubDto _club = new();

    private EditContext _editContext = null!;
    private ClubValidator _clubValidator = new();

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_club);
        _clubValidator = new ClubValidator();
    }

    private async Task Submit()
    {
        if (!_editContext.Validate())
        {
            ShowErrorMessage(_editContext.GetValidationMessages());
            return;
        }

        await AddClubUseCase.ExecuteAsync(_club);
        await OnClubAdded.InvokeAsync(_club).ConfigureAwait(false);
    }

    private void Cancel()
    {
        OnFormClosed.InvokeAsync();
    }
    public void ShowErrorMessage(IEnumerable<string> messages)
    {
        foreach (var message in messages)
        {
            SnackBar.Add(message, severity: Severity.Error);
        }
    }
    
}