@using FloorballTraining.CoreBusiness.Validations
@using FloorballTraining.UseCases.Clubs.Interfaces
@inject IAddClubUseCase AddClubUseCase
@inject ISnackbar SnackBar

@inject NavigationManager NavigationManager

<MudPaper Elevation="0" Class="d-inline-flex z-100 position-sticky top-0 align-center justify-end align-content-end gap-2" Width="">
    <MudText Typo="Typo.h4">Nový klub</MudText>
    <MudSpacer />
    <MudChip T="string" Icon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Color="Color.Success" OnClick="Submit">Uložit</MudChip>
    <MudChip T="string" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Outlined" OnClick="Cancel" Color="Color.Error">Zrušit</MudChip>
</MudPaper>

<EditForm EditContext="_editContext" OnValidSubmit="Submit">
    <FluentValidationValidator />
    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap my-4">
        <MudTextField Label="Název" @bind-Value="_club.Name" For="() => _club.Name" />
    </MudPaper>
</EditForm>


@code {
    [Parameter]
    public EventCallback OnFormClosed { get; set; }

    [Parameter]
    public EventCallback<ClubDto> OnClubAdded { get; set; }


    private readonly ClubDto _club = new();

    private EditContext _editContext = null!;
    private ClubValidator _clubValidator = new();

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_club);
        _clubValidator = new ClubValidator();
    }

    private async Task Submit()
    {
        if (!_editContext.Validate())
        {
            ShowErrorMessage(_editContext.GetValidationMessages());
            return;
        }

        await AddClubUseCase.ExecuteAsync(_club);
        await OnClubAdded.InvokeAsync(_club).ConfigureAwait(false);
    }

    private void Cancel()
    {
        OnFormClosed.InvokeAsync();
    }
    public void ShowErrorMessage(IEnumerable<string> messages)
    {
        foreach (var message in messages)
        {
            SnackBar.Add(message, severity: Severity.Error);
        }
    }
    
}