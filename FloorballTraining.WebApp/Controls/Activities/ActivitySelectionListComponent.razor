@using FloorballTraining.UseCases.Activities.Interfaces
@using FloorballTraining.WebApp.Pages.Activities
@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.UseCases.Helpers
@inject IViewActivitiesUseCase ViewActivitiesUseCase
@inject IDialogService DialogService

   
        @if (!_activities.Any())
        {
            <MudText Typo="Typo.caption">Zadaným kritériím neodpovídá žádná aktivita</MudText>
        }
        else
        {
    <MudPaper Class="my-2 mx-0 px-4" Elevation="0" Style="max-height: 60vh; overflow-x:hidden; overflow-y:scroll">
                <MudGrid>
                    @foreach (var activity in _activities.OrderBy(a => a.Name))
                    {
                        <MudItem xs="2">



                    <MudCard Outlined="true" Style="height: 100%; display: flex; flex-direction: column; ">
                                <MudCardHeader Class="ma-0 pb-2 px-4">
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1">@activity.Name</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="d-flex flex-grow-1 px-4 py-0" >
                                    <MudPaper Elevation="0"  Style="overflow: clip; overflow-wrap: break-word; ">
                                        <MudText Typo="Typo.caption">@activity.Description?[..Math.Min(activity.Description.Length, 100)]</MudText>
                                    </MudPaper>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="()=>ShowDetail(activity)">Detail</MudButton>
                                    <MudButton Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="()=>ActivitySelectionChanged(activity)">Vybrat</MudButton>
                                </MudCardActions>
                            </MudCard> 
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        }

@code {

    private List<ActivityDto> _activities = new();

    [Parameter]
    public ActivityDto? SelectedActivity { get; set; } 

    [Parameter]
    public SearchCriteria SearchCriteria { get; set; } = new();

    [Parameter]
    public EventCallback<ActivityDto> OnActivitySelectionChanged { get; set; }

    private ActivitySpecificationParameters _parameters=new();
    private Pagination<ActivityDto>? _result = null;

    protected override async Task OnParametersSetAsync()
    {
        await SearchByCriteria(SearchCriteria);
    }
    
    public async Task RetrieveData()
    {
        _result = await ViewActivitiesUseCase.ExecuteAsync(_parameters);
        if (_result.Data != null) _activities = _result.Data.ToList();
    }

    public async Task SearchByCriteria(SearchCriteria searchCriteria)
    {
        _parameters = new ActivitySpecificationParameters()
        {
            Id = searchCriteria.Ids.Any() ? searchCriteria.Ids.First(): null,
            Text = searchCriteria.Text,
            Tag = string.Join(";", searchCriteria.Tags.Select(t=>t!.Id)),
            PageSize = 150
        };

        await RetrieveData();
    }
    
    private void ShowDetail(ActivityDto activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                BackdropClick = false,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters { ["Activity"] = activity };

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);
    }
   
    private void UncheckAll()
    {
        SelectedActivity = null;
    }

    private async Task ActivitySelectionChanged(ActivityDto? activity)
    {
        SelectedActivity = activity;
        await OnActivitySelectionChanged.InvokeAsync(SelectedActivity);
    }
}
