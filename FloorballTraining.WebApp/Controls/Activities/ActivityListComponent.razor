@using FloorballTraining.WebApp.Pages.Activities
@using FloorballTraining.UseCases
@using FloorballTraining.CoreBusiness.Dtos
@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.UseCases.Activities.Interfaces
@using FloorballTraining.UseCases.Helpers

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IViewActivitiesUseCase ViewActivitiesUseCase;


@if (!Activities.Any())
{
    <MudText Typo="Typo.caption">Zadaným kritériím neodpovídá žádná aktivita</MudText>
}
else
{
    <MudTable @ref="@_table" T="ActivityDto" Items="@Activities" RowsPerPage="@(_parameters.PageSize)" FixedHeader="true" Elevation="0" Hover="true" Dense="true" MultiSelection="true"
          SelectOnRowClick="true" SelectedItemsChanged="OnItemSelectionChanged" OnRowClick="RowClicked">
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh Style="inline-size: 200px;overflow-wrap: break-word;">Název</MudTh>
            <MudTh Style="max-inline-size: 300px;overflow-wrap: break-word;">Popis</MudTh>
            <MudTh>Věková kategorie</MudTh>
            <MudTh>Počet osob</MudTh>
            <MudTh>Doba trvání</MudTh>
            <MudTh>Potřebný prostor</MudTh>

            <MudTh Style="max-inline-size: 300px;overflow-wrap: break-word;">Štítky</MudTh>
            <MudTh Style="max-inline-size: 300px;overflow-wrap: break-word;">Vybavení</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Id</MudTd>
            <MudTd DataLabel="Název" Style="inline-size: 200px;overflow-wrap: break-word;">@context.Name</MudTd>
            <MudTd DataLabel="Popis" Style="max-inline-size: 300px;overflow-wrap: break-word;">@context.Description</MudTd>
            <MudTd DataLabel="Věková kategorie" Style="max-inline-size: 300px;overflow-wrap: break-word;">@(GetAgeGroupList(context))</MudTd>
            <MudTd DataLabel="Počet osob">@StringExtensions.GetRangeString(context.PersonsMin, context.PersonsMax,"",context.GoaliesMin, context.GoaliesMax, " G", "-")</MudTd>
            <MudTd DataLabel="Doba trvání">@StringExtensions.GetRangeString(context.DurationMin, context.DurationMax)</MudTd>
            <MudTd DataLabel="Potřebný prostor">@($"{context.PlaceLength} x {context.PlaceWidth}")</MudTd>
            <MudTd DataLabel="Štítky" Style="max-inline-size: 300px;overflow-wrap: break-word;">@(GetTagList(context))</MudTd>
            <MudTd DataLabel="Vybavení" Style="max-inline-size: 300px;overflow-wrap: break-word;">@(GetEquipmentList(context))</MudTd>
            <MudTd DataLabel="">
                <MudChip T="string" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => EditActivity(context.Id)">Upravit</MudChip>
            </MudTd>
        </RowTemplate>
    <PagerContent>
        <MudPagination SelectedChanged="PageChanged" Count="@((_table!.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
    </PagerContent>
    

</MudTable>
}

@code {
    [Parameter] 
    public SearchCriteria SearchCriteria { get; set; } = new();

    [Parameter]
    public EventCallback<List<int>> SelectedActivitiesChanged { get; set; }

    private ActivitySpecificationParameters _parameters = new ();


    public List<ActivityDto> Activities { get; set; } = new List<ActivityDto>();

    private HashSet<int> SelectedActivityIds { get; set; } = new ();

    private bool _buttonEditClicked;

    private MudTable<ActivityDto>? _table;
    private Pagination<ActivityDto>? _result = null;




    protected override async Task OnInitializedAsync() {
        await SearchByCriteria(SearchCriteria);
    }

    public async Task RetrieveData()
    {
        _result = await ViewActivitiesUseCase.ExecuteAsync(_parameters);


        if (_result.Data != null) Activities = _result.Data.ToList();
    }

    public async Task SearchByCriteria(SearchCriteria searchCriteria)
        {
            _parameters = new ActivitySpecificationParameters()
            {
                Id = searchCriteria.Ids.Any() ? searchCriteria.Ids.First(): null,
                Name = searchCriteria.Text,
                Description = searchCriteria.Text,
                Tag = string.Join(";", searchCriteria.Tags.Select(t=>t!.Id))
            };

        await RetrieveData();
        }

    private void EditActivity(int activityId)
    {
        _buttonEditClicked = true;
        NavigationManager.NavigateTo($"/editactivity/{activityId}");
    }

    private string GetTagList(ActivityDto context)
    {
        return string.Join(", ", context.ActivityTags.Select(t => t.Tag!.Name).OrderBy(n => n));
    }

    private string GetEquipmentList(ActivityDto context)
    {
        return string.Join(", ", context.ActivityEquipments.Select(t => t.Equipment?.Name).OrderBy(n => n));
    }

    private void RowClicked(TableRowClickEventArgs<ActivityDto> obj)
    {
        if (!_buttonEditClicked)
        {
            if (obj.Item != null) ShowDetail(obj.Item);
        }

        _buttonEditClicked = false;
    }

        private void PageChanged(int i)
        {
            _table?.NavigateTo(i - 1);
        }

    private void ShowDetail(ActivityDto activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                BackdropClick = false,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters { ["Activity"] = activity };

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }


    private async Task OnItemSelectionChanged(int activity)
    {
        if (SelectedActivityIds.Contains(activity))
        {
            SelectedActivityIds.Remove(activity);
        }

        SelectedActivityIds.Add(activity);

        await SelectedActivitiesChanged.InvokeAsync(SelectedActivityIds.ToList());

    }

        private async Task OnItemSelectionChanged(HashSet<ActivityDto> activity)
        {
        await SelectedActivitiesChanged.InvokeAsync(activity.Select(a=>a.Id).ToList());
        }

        private object GetAgeGroupList(ActivityDto context)
        {
        return string.Join(", ", context.ActivityAgeGroups.Select(a=>a.AgeGroup?.Name).OrderBy(n => n));
        }

    }
