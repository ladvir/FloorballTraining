@using FloorballTraining.WebApp.Pages.Activities
@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.UseCases.Activities.Interfaces
@using FloorballTraining.UseCases.Helpers

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IViewActivitiesUseCase ViewActivitiesUseCase;

<MudPaper Class="flex-3">
    @if (Activities == null)
    {
        <MudPaper Class="align-center justify-center mud-width-full" Elevation="0">
            <MudProgressCircular Color="Color.Warning" Size="Size.Large" Indeterminate="true" />
        </MudPaper>
    }
    else if(!Activities.Any())
    {
        <MudText Typo="Typo.caption">Zadaným kritériím neodpovídá žádná aktivita</MudText>
    }
    else
    {
        <MudPaper>
            <MudGrid>
               
                    @foreach (var item in Activities)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderAvatar>
                                        <MudAvatar Color="Color.Secondary">I</MudAvatar>
                                    </CardHeaderAvatar>
                                    <CardHeaderContent>
                                    <MudText Typo="Typo.body1"><strong>@item.Name</strong></MudText>


                                    

                                </CardHeaderContent>
                                    <CardHeaderActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Default" OnClick="()=>EditActivity(item.Id)" />
                                    </CardHeaderActions>
                                </MudCardHeader>
                                @* <MudCardMedia  Image="@item." Height="250" /> *@
                                <MudCardContent>
                                    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-1">

                                        @* Doba trvání *@
                                        <MudPaper Elevation="0" Class="border-1 rounded-3 pa-1" Style="width:max-content">
                                            <MudPaper Elevation="0" Class="d-flex gap-2">
                                                <MudIcon Icon="@Icons.Material.Filled.Timelapse" />

                                                <MudText>@StringExtensions.GetRangeString(item.DurationMin, item.DurationMax)</MudText>
                                            </MudPaper>
                                        </MudPaper>

                                        @* Intenzita *@
                                        <MudPaper Elevation="0" Class="border-1 rounded-3 pa-1" Style="width:max-content">
                                            <MudPaper Elevation="0" Class="d-flex gap-2">
                                                <MudIcon Icon="@Icons.Material.Filled.Accessibility" />

                                                <MudText>@Intensities.Descriptions[item.Intensity]</MudText>
                                            </MudPaper>
                                        </MudPaper>

                                        @* Obtížnost *@
                                        <MudPaper Elevation="0" Class="border-1 rounded-3 pa-1" Style="width:max-content">
                                            <MudPaper Elevation="0" Class="d-flex gap-2">
                                                <MudIcon Icon="@Icons.Material.Filled.Done" />

                                                <MudText>@Difficulties.Descriptions[item.Difficulty]</MudText>
                                            </MudPaper>
                                        </MudPaper>

                                        @*Osoby*@
                                        <MudPaper Elevation="0" Class="border-1 rounded-3 pa-1" Style="width:max-content">
                                            <MudPaper Elevation="0" Class="d-flex gap-2">
                                                <MudIcon Icon="@Icons.Material.Filled.People" />
                                                <MudText>@StringExtensions.GetRangeString(item.PersonsMin, item.PersonsMax, "", item.GoaliesMin, item.GoaliesMax, " G", "-")</MudText>
                                            </MudPaper>
                                        </MudPaper>

                                        @* Věkové kategorie *@
                                        <MudPaper Elevation="0" Class="border-1 rounded-3 pa-2" Style="width:max-content">
                                            <MudPaper Elevation="0" Class="d-flex gap-2">
                                                <MudIcon Icon="@Icons.Material.Filled.FamilyRestroom" />
                                                <MudText>@(GetAgeGroupList(item))</MudText>
                                            </MudPaper>

                                        </MudPaper>

                                    </MudPaper>
                                <MudText Typo="Typo.body2" Class="mt-2"><strong>Popis</strong></MudText>
                                <MudText Typo="Typo.body2">
                                        @if (item.Description != null)
                                        {
                                            @item.Description.AsSpan(0, Math.Min(100, item.Description.Length)).ToString()
                                        }
                                    </MudText>

                                <MudText Typo="Typo.body2" Class="mt-2"><strong>Štítky</strong></MudText>
                                    <MudText Typo="Typo.body2">@(GetTagList(item))</MudText>
                                </MudCardContent>
                                @* <MudCardActions>
                                     <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" /> 
                                
                                </MudCardActions> *@
                            </MudCard>
                        </MudItem>
                    }
                
            </MudGrid>

            
        </MudPaper>



       @*  <MudTable @ref="@_table" T="ActivityDto" Items="@Activities" RowsPerPage="@(_parameters.PageSize)" FixedHeader="true" Elevation="0" Hover="true" Dense="true" MultiSelection="true"
                  SelectOnRowClick="true" SelectedItemsChanged="OnItemSelectionChanged" OnRowClick="RowClicked">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh Style="inline-size: 200px;overflow-wrap: break-word;">Název</MudTh>
                <MudTh Style="max-inline-size: 300px;overflow-wrap: break-word;">Popis</MudTh>
                <MudTh>Věková kategorie</MudTh>
                <MudTh>Počet osob</MudTh>
                <MudTh>Doba trvání</MudTh>
                <MudTh>Potřebný prostor</MudTh>

                <MudTh Style="max-inline-size: 300px;overflow-wrap: break-word;">Štítky</MudTh>
                <MudTh Style="max-inline-size: 300px;overflow-wrap: break-word;">Vybavení</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Id</MudTd>
                <MudTd DataLabel="Název" Style="inline-size: 200px;overflow-wrap: break-word;">@context.Name</MudTd>
                <MudTd DataLabel="Popis" Style="max-inline-size: 300px;overflow-wrap: break-word;">@context.Description</MudTd>
                <MudTd DataLabel="Věková kategorie" Style="max-inline-size: 300px;overflow-wrap: break-word;">@(GetAgeGroupList(context))</MudTd>
                <MudTd DataLabel="Počet osob">@StringExtensions.GetRangeString(context.PersonsMin, context.PersonsMax,"",context.GoaliesMin, context.GoaliesMax, " G", "-")</MudTd>
                <MudTd DataLabel="Doba trvání">@StringExtensions.GetRangeString(context.DurationMin, context.DurationMax)</MudTd>
                <MudTd DataLabel="Potřebný prostor">@($"{context.PlaceLength} x {context.PlaceWidth}")</MudTd>
                <MudTd DataLabel="Štítky" Style="max-inline-size: 300px;overflow-wrap: break-word;">@(GetTagList(context))</MudTd>
                <MudTd DataLabel="Vybavení" Style="max-inline-size: 300px;overflow-wrap: break-word;">@(GetEquipmentList(context))</MudTd>
                <MudTd DataLabel="">
                    <MudChip T="string" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => EditActivity(context.Id)">Upravit</MudChip>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudPagination SelectedChanged="PageChanged" Count="@((_table!.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
            </PagerContent>
    

        </MudTable>

     *@
    }
</MudPaper>


@code {
    [Parameter] 
    public SearchCriteria SearchCriteria { get; set; } = new();

    [Parameter]
    public EventCallback<List<int>> SelectedActivitiesChanged { get; set; }

    private ActivitySpecificationParameters _parameters = new ();


    public List<ActivityDto>? Activities { get; set; }

    

    private HashSet<int> SelectedActivityIds { get; set; } = new ();

    private bool _buttonEditClicked;

    private Pagination<ActivityDto>? _result = null;


    protected override async Task OnInitializedAsync() {
        await SearchByCriteria(SearchCriteria).ConfigureAwait(false);


        
    }

    public async Task RetrieveData()
    {
        _result = await ViewActivitiesUseCase.ExecuteAsync(_parameters);
        
        if (_result.Data != null) Activities = _result.Data.ToList();
    }

    public async Task SearchByCriteria(SearchCriteria searchCriteria)
        {
            _parameters = new ActivitySpecificationParameters()
            {
                Id = searchCriteria.Ids.Any() ? searchCriteria.Ids.First(): null,
                //Name = searchCriteria.Text,
                Description = searchCriteria.Text,
                Tag = string.Join(";", searchCriteria.Tags.Select(t=>t!.Id)),
                DifficultyMin = searchCriteria.DurationMin,
                DifficultyMax = searchCriteria.DifficultyMax,
                DurationMin = searchCriteria.DurationMin,
                DurationMax = searchCriteria.DurationMax,
                GoaliesMin = searchCriteria.GoaliesMin,
                GoaliesMax = searchCriteria.GoaliesMax,
                IntensityMin = searchCriteria.IntensityMin,
                IntensityMax = searchCriteria.IntensityMax,
                PersonsMin = searchCriteria.PersonsMin,
                PlaceAreaMin = searchCriteria.PlaceAreaMin,
                PlaceAreaMax = searchCriteria.PlaceAreaMax,
                PlaceLengthMin = searchCriteria.PlaceLengthMin,
                PlaceLengthMax = searchCriteria.PlaceLengthMax,
                PlaceWidthMin = searchCriteria.PlaceWidthMin,
                PlaceWidthMax = searchCriteria.PlaceWidthMax,
                

            };

        await RetrieveData().ConfigureAwait(false);
        }

    private void EditActivity(int activityId)
    {
        _buttonEditClicked = true;
        NavigationManager.NavigateTo($"/editactivity/{activityId}");
    }

    private string GetTagList(ActivityDto context)
    {
        return string.Join(", ", context.ActivityTags.Select(t => t.Tag!.Name).OrderBy(n => n));
    }

    private string GetEquipmentList(ActivityDto context)
    {
        return string.Join(", ", context.ActivityEquipments.Select(t => t.Equipment?.Name).OrderBy(n => n));
    }

    private void RowClicked(TableRowClickEventArgs<ActivityDto> obj)
    {
        if (!_buttonEditClicked)
        {
            if (obj.Item != null) ShowDetail(obj.Item);
        }

        _buttonEditClicked = false;
    }
    
    private void ShowDetail(ActivityDto activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                BackdropClick = false,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters { ["Activity"] = activity };

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }


    private async Task OnItemSelectionChanged(int activity)
    {
        if (SelectedActivityIds.Contains(activity))
        {
            SelectedActivityIds.Remove(activity);
        }

        SelectedActivityIds.Add(activity);

        await SelectedActivitiesChanged.InvokeAsync(SelectedActivityIds.ToList());

    }

        private async Task OnItemSelectionChanged(HashSet<ActivityDto> activity)
        {
        await SelectedActivitiesChanged.InvokeAsync(activity.Select(a=>a.Id).ToList());
        }

        private object GetAgeGroupList(ActivityDto context)
        {
        return string.Join(", ", context.ActivityAgeGroups.Select(a=>a.AgeGroup?.Name).OrderBy(n => n));
        }

    }
