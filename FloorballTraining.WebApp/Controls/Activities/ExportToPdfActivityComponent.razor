@using FloorballTraining.CoreBusiness.Dtos
@inject ICreateActivityPdfUseCase CreateActivityPdfUseCase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager;

<MudChip T="string" Disabled="@Disabled" Icon="@Icons.Material.Filled.PictureAsPdf" Variant="Variant.Outlined" Color="Color.Success" OnClick="ExportToPdf">PDF</MudChip>

@code {

    [Parameter]
    public ActivityDto Activity { get; set; } = new();

    [Parameter]
    public bool Disabled { get; set; } = false;


    private async Task ExportToPdf()
    {
        var pdf = await CreateActivityPdfUseCase.ExecuteAsync(Activity.Id, NavigationManager.Uri);

        await DownloadPdf(Activity.Name, pdf);

    }

    private async Task DownloadPdf(string activityName, byte[]? content)
    {

        var fileName = activityName.Replace(" ", "") + ".pdf";


        fileName = Path.GetInvalidFileNameChars().Aggregate(fileName, (current, c) => current.Replace(c, '_'));

        await JSRuntime.InvokeVoidAsync("saveFileAsPdf", fileName, content);

    }
}