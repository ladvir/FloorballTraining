@using FloorballTraining.CoreBusiness.Specifications
@using Variant = MudBlazor.Variant
@inject IViewTagsWithSpecificationUseCase ViewTagsUseCase
@inject IAddTagUseCase AddTagUseCase
@inject IGetTagByIdUseCase GetTagByIdUseCase

<MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2 my-2 ">
    <MudTextField Label="Nový štítek" @bind-Value="_newTagName" MaxLength="50" />
    <MudSelect @bind-Value="_selectedParentForNewTag" FullWidth="true" >
        @foreach (var parent in Parents)
        {
            <MudSelectItem Value="@parent">@parent.Name</MudSelectItem>
        }
    </MudSelect>
    <MudChip T="string" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="AddNewTag">Přidat štítek</MudChip>
</MudPaper>


<MudPaper Elevation="0" Class="d-flex flex-wrap gap-2 mx-0 my-1" >
    @if (Parents.Any())
    {
        @foreach (var parent in Parents.OrderBy(o => o.Name))
        {
            var childrenTags = AllTags.Where(t => !string.IsNullOrEmpty(t.ParentTagName) && t.ParentTagName == parent.Name).OrderBy(o => o.Name).ToList();
        
            <MudPaper Elevation="1" Square="true" MinWidth="10vw;"  Class="pa-1">
                <MudPaper Elevation="0">
                    <MudText Typo="Typo.h6">@parent.Name</MudText>
                </MudPaper>

                <MudChipSet T="string" Class="d-inline-flex flex-wrap gap-1">
                    @foreach (var child in childrenTags)
                    {
                        var isSelected = SelectedTags.Any(x=>x.Id==child.Id);

                        _colorStyle = $"background-color: {(isSelected ? child.Color : Color.Transparent)} ; border:2px solid {Color.Dark}; ";

                        <MudChip OnClick="@(_=>OnTagClick(child))" Color="Color.Transparent" Style="@_colorStyle">@child.Name</MudChip>

                    
                    }
                </MudChipSet>
            </MudPaper>
        }
    }
    else
    {
            <MudPaper Elevation="1" Square="true" MinWidth="10vw;"  Class="pa-1">
                <MudChipSet T="string" Class="d-inline-flex flex-wrap gap-1">
                    @foreach (var child in AllTags.OrderBy(o => o.Name))
                    {
                        var isSelected = SelectedTags.Any(x=>x.Id==child.Id);
                        _colorStyle = $"background-color: {(isSelected ? child.Color : Color.Transparent)} ; border:2px solid {Color.Dark}; ";
                        <MudChip OnClick="@(_=>OnTagClick(child))" Color="Color.Transparent" Style="@_colorStyle">@child.Name</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
    }
    
</MudPaper>

@code {

    [Parameter]
    public IEnumerable<TagDto> SelectedTags { get; set; } = new List<TagDto>();
    
    [Parameter]
    public bool? TrainingGoalsOnly { get; set; } 

    [Parameter]
    public EventCallback<IEnumerable<TagDto>> OnSelectedTagsChanged { get; set; }

    private List<TagDto> AllTags { get; set; } = new();

    private IEnumerable<TagDto> Parents => AllTags.Any()? AllTags.Where(t => string.IsNullOrEmpty(t.ParentTagName)) : [];
    private string _colorStyle = string.Empty;

    private string _newTagName = string.Empty;
    
    private TagDto _selectedParentForNewTag = new();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();

        _selectedParentForNewTag = Parents.FirstOrDefault()?? new TagDto();
    }

    private async Task Refresh()
    {
        _newTagName = string.Empty;

        var data = await ViewTagsUseCase.ViewPaginatedAsync(new TagSpecificationParameters
        {
            IsTrainingGoal = TrainingGoalsOnly
        });
        if (data.Data != null) AllTags = data.Data.ToList();
        
    }

    

    private async Task AddNewTag()
    {
        if (!string.IsNullOrEmpty(_newTagName))
        {
            var parentTag = await GetTagByIdUseCase.ExecuteAsync(_selectedParentForNewTag.Id);
            var newTag = new TagDto
                {
                    ParentTagName = parentTag?.Name,
                    ParentTagId = parentTag?.Id,
                    Name = _newTagName,
                    Color = _selectedParentForNewTag.Color,
                    IsTrainingGoal = _selectedParentForNewTag.IsTrainingGoal && string.IsNullOrEmpty(_selectedParentForNewTag.ParentTagName)
            };

            await AddTagUseCase.ExecuteAsync(newTag);

            await Refresh();
        }
    }

    private void OnTagClick(TagDto option)
    {
        var selectedTags = SelectedTags.ToList();
        
        
            if (selectedTags.Exists(s=>s.Id==option.Id))
            {
                selectedTags = selectedTags.Where(s => s.Id != option.Id).ToList();
            }
            else
            {
                selectedTags.Add(option);
            }
        

        SelectedTags = selectedTags;
        OnSelectedTagsChanged.InvokeAsync(SelectedTags);
    }

}


