@using FloorballTraining.CoreBusiness.Dtos
@using FloorballTraining.CoreBusiness.Specifications
@inject IViewTagsWithSpecificationUseCase ViewTagsUseCase


<MudChipSet MultiSelection="false" Mandatory="true" Class="d-inline-flex flex-wrap gap-1 ">

    @if (TrainingGoals != null && TrainingGoals.Any())
    {

        <MudPaper Elevation="0" Square="true" MinWidth="10vw;" Class="pa-2">

            <MudPaper Elevation="0" Dense="true" Class="d-inline-flex flex-wrap gap-1">
                @foreach (var child in TrainingGoals)
                {
                    bool isSelected = false;

                    if (SelectedTags != null)
                    {
                        isSelected = SelectedTags.Select(t => t.Id).Contains(child.Id);
                    }

                    _colorStyle = $"background-color: {(isSelected ? child.Color : Color.Transparent)} ; border:2px solid {Color.Dark}; ";
                    @* <MudChip OnClick="@(_ => OnTagClick(child))" Color="Color.Transparent" Style="@_colorStyle" Class="text-wrap" Size="Size.Small">@child.Name</MudChip>
 *@
                    
                    <MudCheckBox T="bool" Color="Color.Success" Class="mr-4 d-inline-flex flex-wrap" Style="vertical-align: middle;"
                                 Dense="true" Checked="@isSelected" CheckedChanged="()=>OnTagClick(child)">
                        <MudText Typo="Typo.caption">@child.Name</MudText>

                    </MudCheckBox>
                }
            </MudPaper>
        </MudPaper>
    }

</MudChipSet>


@code {

    [Parameter]
    public List<TagDto> SelectedTags { get; set; } = new ();

    [Parameter]
    public EventCallback<List<TagDto>> OnSelectedTagsChanged { get; set; }

    private List<TagDto>? TrainingGoals { get; set; } 

    private string _colorStyle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        var data =  await ViewTagsUseCase.ViewPaginatedAsync(new TagSpecificationParameters{IsTrainingGoal = true});

        if (data.Data != null) TrainingGoals = data.Data.ToList();
    }

    private void OnTagClick(TagDto tag)
    {
        var theTag = SelectedTags.FirstOrDefault(t => t.Id == tag.Id);
        if (SelectedTags.Count >= 3 && theTag!=null)
        {
            SelectedTags.Remove(theTag);
        }

        else if (theTag!=null)
        {

            SelectedTags.Remove(theTag);
            
        }
        else
        {
            SelectedTags.Add(tag);
        }

        OnSelectedTagsChanged.InvokeAsync(SelectedTags);
    }
}


