@using FloorballTraining.CoreBusiness
@using FloorballTraining.WebApp.Pages.Activities
@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.UseCases.Activities.Interfaces
@using Color = MudBlazor.Color
@using DialogOptions = MudBlazor.DialogOptions
@using DialogPosition = MudBlazor.DialogPosition
@using Environment = FloorballTraining.CoreBusiness.Enums.Environment
@using Variant = MudBlazor.Variant
@inject IDialogService DialogService
@inject AppSettings AppSettings
@inject IViewAgeGroupsUseCase ViewAgeGroupsUseCase
@inject IViewActivitiesUseCase ViewActivitiesUseCase
@inject IViewActivityNamesAndDescriptionsUseCase ViewActivityNamesAndDescriptionsUseCase
@inject IAddActivityUseCase AddActivityUseCase

<MudPaper Class="d-flex flex-wrap gap-2 mt-6 mx-2 align-items-center" Elevation="0" Style="">

    @for(var i=0; i<TrainingGroups.Count;i++)
    {
        var trainingGroup = TrainingGroups[i];

        var index = i+1;

        <MudPaper Elevation="0" Style="width: 45em;" Class="ma-0 pa-0 align-self-start">

            <MudField Label="@($"Skupina - {index}")" Variant="Variant.Outlined" Class="d-flex pa-0 ma-0 " Style="">
            <MudPaper Elevation="0" Class="d-flex pa-0 ma-0 flex-wrap align-items-start align-self-start" Style="">
                <MudPaper Elevation="0" Class="d-inline-flex align-center pa-0 ma-0 mud-width-full align-items-center justify-space-between">
                    <MudPaper Class="" Elevation="0">
                        @if (trainingGroup.Activity == null)
                        {
                            <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-1">
                                <MudAutocomplete T="ActivityDto" @bind-Value="trainingGroup.Activity" Label="Vybrat aktivitu" SearchFunc="@Search" ToStringFunc="@(e => string.IsNullOrEmpty(e?.Name)?String.Empty:e.Name)" Clearable="true" Dense="true" Typo="Typo.subtitle2" ShowProgressIndicator="true">
                                    <BeforeItemsTemplate>
                                        <MudChip T="string" Label="true" Icon="fa-solid fa-magnifying-glass" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="() => AddActivity(trainingGroup, trainingGroup.PersonsMax)">Vyhledat aktivitu</MudChip>
                                    </BeforeItemsTemplate>
                                    <MoreItemsTemplate>
                                        <MudText Align="Align.Center" Class="px-4 py-1" Typo="Typo.subtitle1">V seznamu je zobrazeno pouze prvních 10</MudText>
                                    </MoreItemsTemplate>
                                    <NoItemsTemplate>
                                        <MudText Align="Align.Center" Class="px-4 py-1">
                                            @* <MudChip Label="true" Icon="fa-solid fa-plus" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="() => wait AddNewActivity(trainingGroup,_trainingGroupActivityName))">Vytvoř z názvu</MudChip> *@
                                            <MudChip T="string"  Label="true" Icon="fa-solid fa-plus" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="() => AddNewActivity(trainingGroup,_trainingGroupActivityName)">Vytvoř z názvu</MudChip>
                                        </MudText>
                                    </NoItemsTemplate>
                                </MudAutocomplete>
                            </MudPaper>
                        }
                        else
                        {
                            <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-1">
                                <MudLink Typo="Typo.h6" OnClick="@(() => ShowActivityDetail(trainingGroup.Activity!))" Style="@(HasTrainingGoal(trainingGroup.Activity!) ? "font-weight: bold;" : "")">@(GetActivityName(trainingGroup.Activity!))</MudLink>
                                
                                @if (TrainingPart.Name != trainingGroup.Activity?.Name)
                                {
                                    <MudTooltip Text="Použít název i pro tréninkovou část">
                                        <MudIconButton Icon="fa-regular fa-font-awesome" Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" OnClick="() => SetNameForActivity(trainingGroup.Activity?.Name)"/>
                                    </MudTooltip>
                                }
                            </MudPaper>
                        }

                    </MudPaper>
                    <MudPaper Class="ma-0 pa-0 align-end" Elevation="0">
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Class="ma-0 pa-0 align-end" Dense="true" Style="">
                            <MudMenuItem Icon="@Icons.Material.Filled.Remove" IconSize="Size.Small" OnClick="() => TrainingGroups.Remove(trainingGroup)">Smazat skupinu</MudMenuItem>

                            @if (trainingGroup.Activity!=null)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconSize="Size.Small" OnClick="() => RemoveActivity(trainingGroup, trainingGroup.Activity)">Smazat aktivitu</MudMenuItem>
                            }
                        </MudMenu>
                    </MudPaper>
                </MudPaper>
                
                <MudPaper Elevation="0"  Class="d-inline-flex flex-wrap gap-4">
                    
                    <MudPaper Elevation="0" Class="my-2 justify-content-center">
                        <MudText >Počet osob</MudText>
                        <MudPaper Elevation="0" Class="d-inline-flex flex-none gap-2">
                            <MudNumericField T="int" Label="od" Variant="Variant.Outlined" Class="mudnumeric" Style="width:4em;" Min="1" Max="@Math.Min(trainingGroup.PersonsMax, Training.PersonsMax)" @bind-Value="@trainingGroup.PersonsMin"/>
                            <MudNumericField T="int" Label="do" Variant="Variant.Outlined" Class="mudnumeric" Style="width:4em;" Max="@Training.PersonsMax" Min="@Math.Max(1, trainingGroup.PersonsMin)" @bind-Value="@trainingGroup.PersonsMax"/>
                        </MudPaper>
                        <MudChip T="string" Color="Color.Success" Variant="Variant.Outlined" Size="Size.Small" OnClick="() => SelectAllPersons(trainingGroup)" Style="width:5em;" Class="d-block justify-center">Všichni</MudChip>
                        <ValidationMessage For="() => trainingGroup.PersonsMin"/>
                        <ValidationMessage For="() => trainingGroup.PersonsMax"/>
                    </MudPaper>

                    <MudPaper Elevation="0" Class="my-2 justify-content-center">
                        
                        <MudText Align="Align.Center">Počet brankářů</MudText>
                        <MudPaper Elevation="0" Class="d-inline-flex flex-none gap-2">
                            <MudNumericField T="int" Label="od" Variant="Variant.Outlined" Class="mudnumeric" Style="width:4em;" Min="1" Max="@Math.Min(trainingGroup.GoaliesMax, Training.GoaliesMax)" @bind-Value="@trainingGroup.GoaliesMin" />
                            <MudNumericField T="int" Label="do"  Variant="Variant.Outlined"  Class="mudnumeric" Style="width:4em;" Max="@Training.GoaliesMax" Min="@Math.Max(0, trainingGroup.GoaliesMin)" @bind-Value="@trainingGroup.GoaliesMax" />
                        </MudPaper>
                            <MudChip T="string" Color="Color.Success" Variant="Variant.Outlined" Size="Size.Small" OnClick="() => SelectAllGoalies(trainingGroup)" Style="width:5em;" Class="d-block justify-content-center">Všichni</MudChip>
                        
                        <ValidationMessage For="() => trainingGroup.GoaliesMax" />
                        <ValidationMessage For="() => trainingGroup.GoaliesMin" />
                    </MudPaper>
                    
                </MudPaper>

                    
                    
                   

                </MudPaper>
            </MudField>
        </MudPaper>
    }
    
<MudPaper Elevation="0" Style="max-width: 40em;" Class="pa-0 align-items-center justify-items-center">
    
    <MudChip T="string" Class="ml-4" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => AddTrainingGroup()">Nová skupina</MudChip>
    </MudPaper>
</MudPaper>

@code {
    [Parameter]
    public TrainingPartDto TrainingPart { get; set; } = new();
    
    public List<TrainingGroupDto> TrainingGroups => TrainingPart.TrainingGroups ?? [];

    [Parameter]
    public TrainingDto Training { get; set; } = null!;

    [Parameter]
    public EventCallback OnActivityAdded { get; set; }

    [Parameter]
    public EventCallback OnActivityRemoved { get; set; }

    [Parameter]
    public EventCallback OnDurationChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnTrainingPartNameSetByActivity { get; set; }

    private List<ActivityDto>? _activities;

    private List<ActivityNameAndDescriptionDto> _activitiesAll = [];

    private IEnumerable<AgeGroupDto> _ageGroups = null!;
    private string _trainingGroupActivityName = string.Empty; 

    protected override async Task OnInitializedAsync()
    {
        var ageGroups = await ViewAgeGroupsUseCase.ExecuteAsync(new AgeGroupSpecificationParameters());
        if (ageGroups.Data != null) _ageGroups = ageGroups.Data.ToList();

        await GetActivities();
    }

    private async Task GetActivities()
    {
        _activitiesAll = ((await ViewActivityNamesAndDescriptionsUseCase.ExecuteAsync(new ActivitySpecificationParameters())).Data ?? Array.Empty<ActivityNameAndDescriptionDto>()).ToList();
        
        var activity = TrainingGroups.Select(g=>g.Activity).FirstOrDefault();

        if (activity == null) return;
        var searchCriteria = new SearchCriteria()
            {
                 Ids = new List<int>(activity.Id)
            };

        await SearchByCriteria(searchCriteria);
    }
    
    private async Task<IEnumerable<ActivityDto>> Search(string value, CancellationToken cancellationToken)
    {
        _trainingGroupActivityName = value;
        
        return (await ViewActivitiesUseCase.ExecuteAsync(new ActivitySpecificationParameters()
        {
            Name = value, PageSize = 10
        })).Data ?? Array.Empty<ActivityDto>();
    }

    private async Task<IEnumerable<ActivityDto>> SearchEmpty(string value, CancellationToken token)
    {
        return ((await ViewActivitiesUseCase.ExecuteAsync(new ActivitySpecificationParameters()
        {
            PageSize = 10
        })).Data ?? Array.Empty<ActivityDto>());
    }

    private async Task SearchByCriteria(SearchCriteria searchCriteria)
    {
        var parameters = new ActivitySpecificationParameters()
        {
            Id = searchCriteria.Ids.Any() ? searchCriteria.Ids.First(): null,
            Text = searchCriteria.Text,
            PageSize = 60,
                
            Tag = string.Join(";", searchCriteria.Tags.Select(t=>t.Id))
        };

        var activities = await ViewActivitiesUseCase.ExecuteAsync(parameters);
        if (activities.Data != null) _activities = activities.Data.ToList();
    }

    private async Task AddActivity(TrainingGroupDto trainingGroup, int personsMax)
    {
        var activity = await SelectActivitiesFromDialog(personsMax);

        if (activity != null)
        {
            
            trainingGroup.Activity = activity;
            
            _activities ??= new List<ActivityDto>();

            if (!_activities.Contains(activity))
            {
                _activities.Add(activity);
            }

            await OnActivityAdded.InvokeAsync();
        }
    }

    private async Task<ActivityDto?> SelectActivitiesFromDialog(int personsMax)
    {
        var searchCriteria = SetSearchCriteria(personsMax);
        var options = new DialogOptions
        {
            NoHeader = false,
            CloseOnEscapeKey = false,
            CloseButton = true,
            BackdropClick = false,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.ExtraExtraLarge,
            
            FullWidth = true,
            FullScreen = false
                
        };


        var parameters = new DialogParameters { ["SearchCriteria"] = searchCriteria };

        var dialog = await DialogService.ShowAsync<ActivityListModal>("Výběr aktivit", parameters, options);

        var result = await dialog.Result;

        if (result == DialogResult.Cancel())
        {
            return null;
        }

        if (result?.Data == null) return null;

        var activities = (ActivityDto?)result.Data;
        return activities;
    }

    private SearchCriteria SetSearchCriteria(int personsMax)
    {
        var searchCriteria = new SearchCriteria
            {
                DurationMax = Training.Duration,
                PersonsMin = 1,
                PersonsMax = personsMax,
                Tags = Training.TrainingGoal1 is { Id: > 0 } ? [Training.TrainingGoal1] : []
            };

        if (!Training.TrainingAgeGroups.Any())
        {
            var anyAge = _ageGroups.First(ag => ag.IsAnyAge());
            searchCriteria.AgeGroups.Add(anyAge);
        }
        else
        {   
            searchCriteria.AgeGroups.AddRange(Training.TrainingAgeGroups);
        }

        return searchCriteria;
    }

    private void ShowActivityDetail(ActivityDto activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                BackdropClick = false,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false
            };

        var parameters = new DialogParameters { ["Activity"] = activity };

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }

    private async Task RemoveActivity(TrainingGroupDto trainingGroup, ActivityDto activity)
    {
        trainingGroup.Activity=null;
        await OnActivityRemoved.InvokeAsync();
    }



    private bool HasTrainingGoal(ActivityDto? activity)
    {
        return activity?.ActivityTags.Exists(at => at.Id == Training.TrainingGoal1?.Id)??false;
    }

    private string GetActivityName(ActivityDto? activity)
    {
        return activity?.Name??string.Empty;
    }

    private void SelectAllPersons(TrainingGroupDto trainingGroup)
    {
        trainingGroup.PersonsMin = Training.PersonsMin;
        trainingGroup.PersonsMax = Training.PersonsMax;
    }

    private void SelectAllGoalies(TrainingGroupDto trainingGroup)
    {
        trainingGroup.GoaliesMin = Training.GoaliesMin;
        trainingGroup.GoaliesMax = Training.GoaliesMax;
    }

    private async Task SetNameForActivity(string? activityName)
    {
        await OnTrainingPartNameSetByActivity.InvokeAsync(activityName);
    }

    private void AddTrainingGroup()
    {
        TrainingGroups.Add(new TrainingGroupDto
        {
            PersonsMax = Training.PersonsMax,
            PersonsMin = Training.PersonsMin,
            GoaliesMin = Training.GoaliesMin,
            GoaliesMax = Training.GoaliesMax
        });
        
    }

   private async Task AddNewActivity(TrainingGroupDto trainingGroup, string activityName)
    {
        var activity = new ActivityDto
        {
            Name = activityName,
            ActivityTags = [
                new ActivityTagDto()
                {
                    Tag = Training.TrainingGoal1
                }]
        };

        if (Training.TrainingGoal2 != null)
        {
            activity.ActivityTags.Add(new ActivityTagDto()
            {
                Tag = Training.TrainingGoal2
            });
        }
        
        if (Training.TrainingGoal3 != null)
        {
            activity.ActivityTags.Add(new ActivityTagDto()
            {
                Tag = Training.TrainingGoal3
            });
        }
        
        foreach (var ageGroup in  Training.TrainingAgeGroups)
        {
            activity.ActivityAgeGroups.Add( new ActivityAgeGroupDto()
            {
                Activity = activity,
                AgeGroup = ageGroup
            });
        }

        activity.DurationMin = 1;
        activity.DurationMax = TrainingPart.Duration;
        activity.PersonsMin = trainingGroup.PersonsMin;
        activity.PersonsMax = trainingGroup.PersonsMax;
        activity.Difficulty = Training.Difficulty;
        activity.Environment = Training.Environment.GetDescription();
        activity.Intensity = Training.Intensity;
        activity.GoaliesMin = trainingGroup.GoaliesMin;
        activity.GoaliesMax = trainingGroup.GoaliesMax;
        
        await AddActivityUseCase.ExecuteAsync(activity);
        trainingGroup.Activity = activity ;

    }

}
