@* TrainingListAsCardsComponent *@
@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.UseCases.Helpers
@using DialogOptions = MudBlazor.DialogOptions
@using DialogPosition = MudBlazor.DialogPosition
@using Variant = MudBlazor.Variant
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IViewTrainingsUseCase ViewTrainingsUseCase;
@inject IExportService<TrainingDto> ExportService


<MudPaper Elevation="0">
    @if (Trainings == null)
    {
        <MudPaper Class="align-center justify-center mud-width-full" Elevation="0">
            <MudProgressCircular Color="Color.Warning" Size="Size.Large" Indeterminate="true"/>
        </MudPaper>
    }
    else if (!Trainings.Any())
    {
        <MudText Typo="Typo.caption">Zadaným kritériím neodpovídá žádný trénink</MudText>
    }
    else
    {
        <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4">
            @foreach (var item in Trainings)
            {
                <MudCard Elevation="10" Class="pa-3 card_shape rounded-4 ">
                    <MudCardHeader Class="pa-2 mb-2 ">
                        <CardHeaderAvatar>
                            <MudAvatar>A</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <span class="card-title">@item.Name</span>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="pa-1 card_content">
                        <MudPaper Elevation="0" Class="d-flex flex-wrap gap-1">
                            @* Doba trvání *@
                            <MudPaper Elevation="0" Class="border-1 rounded-2 pa-1">
                                <MudPaper Elevation="0" Class="d-flex gap-1">
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Timelapse"/>
                                    <MudText Style="font-size: small;">@item.Duration</MudText>
                                </MudPaper>
                            </MudPaper>

                            @* Intenzita *@
                            <MudPaper Elevation="0" Class="border-1 rounded-2 pa-1">
                                <MudPaper Elevation="0" Class="d-flex gap-1">
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Accessibility"/>
                                    <MudText Style="font-size: small;">@Intensities.Descriptions[item.Intensity]</MudText>
                                </MudPaper>
                            </MudPaper>

                            @* Obtížnost *@
                            <MudPaper Elevation="0" Class="border-1 rounded-2 pa-1">
                                <MudPaper Elevation="0" Class="d-flex gap-1">
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Done"/>
                                    <MudText Style="font-size: small;">@Difficulties.Descriptions[item.Difficulty]</MudText>
                                </MudPaper>
                            </MudPaper>

                            @*Osoby*@
                            <MudPaper Elevation="0" Class="border-1 rounded-2 pa-1">
                                <MudPaper Elevation="0" Class="d-flex gap-1">
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.People"/>
                                    <MudText Style="font-size: small;">@StringExtensions.GetRangeString(item.PersonsMin, item.PersonsMax)</MudText>
                                </MudPaper>
                            </MudPaper>

                            @* Věkové kategorie *@
                            <MudPaper Elevation="0" Class="border-1 rounded-2 pa-2">
                                <MudPaper Elevation="0" Class="d-flex gap-1">
                                    <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.FamilyRestroom"/>
                                    <MudText Style="font-size: small;">@(item.GetAgeGroupNamesAsString())</MudText>
                                </MudPaper>

                            </MudPaper>

                        </MudPaper>
                        @if (!string.IsNullOrEmpty(item.Description))
                        {
                            <MudText Typo="Typo.body2" Class="mt-2">
                                <strong>Popis</strong>
                            </MudText>
                            <MudText Typo="Typo.body2" Class="truncate-multiline">
                                @item.Description
                            </MudText>
                        }

                        <MudPaper Elevation="0" Class="hide-on-mobile">
                            @{
                                var tags = item.GetTrainingGoals();
                                <MudText Typo="Typo.body2" Class="mt-2">
                                    <strong>Štítky</strong>
                                </MudText>
                                <div class="truncate-multiline">
                                    @for (var i = 0; i < tags.Count; i++)
                                    {
                                        var i1 = i;
                                        <MudText Inline="true" Typo="Typo.body2" style="@($"color: {tags[i1].Color};")">@tags[i1].Name</MudText>
                                        if (i + 1 < tags.Count && tags.Count > 1)
                                        {
                                            <MudText Inline="true" Typo="Typo.body2">, </MudText>
                                        }
                                    }
                                </div>
                            }
                        </MudPaper>
                    </MudCardContent>
                    <MudCardActions Class="align-self-center ">
                        <MudButtonGroup Variant="Variant.Outlined" Color="Color.Success" Size="Size.Large" Class="align-content-center">
                            <MudIconButton T="string" Icon="@Icons.Material.Filled.PictureAsPdf" OnClick="() => ExportToPdf(item)"/>
                            <MudIconButton T="string" Icon="fa-regular fa-eye" OnClick="() => ShowDetail(item)"/>
                            <MudIconButton T="string" Icon="@Icons.Material.Filled.Edit" OnClick="() => EditTraining(item.Id)"/>
                        </MudButtonGroup>
                    </MudCardActions>
                </MudCard>
            }
        </MudPaper>
    }
</MudPaper>


@code {
    [Parameter] public SearchCriteria SearchCriteria { get; set; } = new();

    [Parameter] public EventCallback<List<int>> SelectedTrainingsChanged { get; set; }

    private TrainingSpecificationParameters _parameters = new();


    private List<TrainingDto>? Trainings { get; set; }

    private Pagination<TrainingDto>? _result;


    protected override async Task OnInitializedAsync()
    {
        await SearchByCriteria(SearchCriteria).ConfigureAwait(false);
    }

    private async Task RetrieveData()
    {
        _result = await ViewTrainingsUseCase.ExecuteAsync(_parameters);

        if (_result.Data != null) Trainings = _result.Data.ToList();
    }

    public async Task SearchByCriteria(SearchCriteria searchCriteria)
    {
        _parameters = new TrainingSpecificationParameters()
        {
            Id = searchCriteria.Ids.Any() ? searchCriteria.Ids.First() : null,
            Text = searchCriteria.Text,
            TrainingGoalIds = searchCriteria.Tags.Select(t => t.Id),
            DifficultyMin = searchCriteria.DurationMin,
            DifficultyMax = searchCriteria.DifficultyMax,
            DurationMin = searchCriteria.DurationMin,
            DurationMax = searchCriteria.DurationMax,
            GoaliesMin = searchCriteria.GoaliesMin,
            GoaliesMax = searchCriteria.GoaliesMax,
            IntensityMin = searchCriteria.IntensityMin,
            IntensityMax = searchCriteria.IntensityMax,
            PersonsMin = searchCriteria.PersonsMin,
            PlaceAreaMin = searchCriteria.PlaceAreaMin,
            PlaceAreaMax = searchCriteria.PlaceAreaMax,
            PlaceLengthMin = searchCriteria.PlaceLengthMin,
            PlaceLengthMax = searchCriteria.PlaceLengthMax,
            PlaceWidthMin = searchCriteria.PlaceWidthMin,
            PlaceWidthMax = searchCriteria.PlaceWidthMax,
            AgeGroupsIds = searchCriteria.AgeGroups.Select(a => a.Id).ToList()
        };

        await RetrieveData().ConfigureAwait(false);
    }

    private void EditTraining(int trainingId)
    {
        NavigationManager.NavigateTo($"/edittraining/{trainingId}");
    }

    private void ShowDetail(TrainingDto training)
    {
        var options = new DialogOptions
        {
            NoHeader = false,
            CloseOnEscapeKey = false,
            CloseButton = true,
            BackdropClick = false,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            FullScreen = false,
        };
        var parameters = new DialogParameters { ["Training"] = training };

        DialogService.Show<TrainingDetailReadOnly>(string.Empty, parameters, options);
    }

    private void ExportToPdf(TrainingDto dto)
    {
        ExportService.ExportToPdf(dto.Id, dto.Name, NavigationManager.Uri);
    }

}