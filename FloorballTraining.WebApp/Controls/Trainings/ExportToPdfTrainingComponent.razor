@using System.Text
@using FloorballTraining.CoreBusiness.Dtos
@inject ICreateTrainingPdfUseCase CreateTrainingPdfUseCase
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


<MudChip T="string"  Disabled="@Disabled" Icon="@Icons.Material.Filled.PictureAsPdf" Variant="Variant.Outlined" Color="Color.Success" OnClick="ExportToPdf">PDF</MudChip>

@code {

    [Parameter]
    public TrainingDto? Training { get; set; } = new();

    [Parameter]
    public bool Disabled { get; set; } = false;


    private async Task ExportToPdf()
    {
        if (Training == null) return;

        try
        {
            var pdf = await CreateTrainingPdfUseCase.ExecuteAsync(Training, NavigationManager.Uri);
            await DownloadPdf(Training, pdf);

        }
        catch (Exception x)
        {
            throw new Exception("Problém při exportu do PDF", x);
        }

        

    }

    private async Task DownloadPdf(TrainingDto training, byte[]? content)
    {
        var sb = new StringBuilder();
        sb.Append(training.Name);
        sb.Append(".pdf");

        var fileName = sb.ToString().Replace(" ", "");
        fileName = Path.GetInvalidFileNameChars().Aggregate(fileName, (current, c) => current.Replace(c, '_'));
        await JSRuntime.InvokeVoidAsync("saveFileAsPdf", fileName, content);
    }
}