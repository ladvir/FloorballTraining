@using Variant = MudBlazor.Variant
@inject CoreBusiness.Validations.TrainingPartValidator TrainingPartValidator
@inject AppSettings AppSettings



<MudPaper Elevation="0" Class="mb-2">
    @foreach (var trainingPart in Training.TrainingParts.OrderBy(tp => tp.Order))
    {
        <MudPaper Elevation="0" Outlined="true" Class="mt-2 pa-4 border-1 border-secondary ">
            <MudPaper Elevation="0" Class="d-inline-flex align-center ma-0 mud-width-full align-items-center justify-space-between">
                <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4">
                    <MudPaper Elevation="0">
                        <MudTextField Label="Název" @bind-Value="trainingPart.Name" Class="d-flex ml-2 flex-grow-0" Style="width:22em;" MaxLength="@AppSettings.MaximalLengthTrainingPartName"/>
                        <ValidationMessage For="() => trainingPart.Name"/>
                    </MudPaper>

                    <MudPaper Elevation="0" >
                        <MudNumericField T="int" Label="Doba trvání" Variant="Variant.Outlined" Min="1" Style="min-width: 4em;" Class="mudnumeric ma-0 pa-0" Max="@(Math.Min(Training.Duration, AppSettings.MaxTrainingPartDuration))" Value="@trainingPart.Duration" ValueChanged="async (e) => { trainingPart.Duration = e; await OnDurationChanged(e); }"/>
                        <ValidationMessage For="() => trainingPart.Duration"/>
                    </MudPaper>

                    <MudPaper Elevation="0">
                        <MudTextField Label="Popis" @bind-Value="trainingPart.Description" Variant="Variant.Outlined" FullWidth="true" MaxLength="@AppSettings.MaximalLengthTrainingPartDescription" Class="ma-0 flex-shrink-1" Style="width: clamp(22em,60vw, 160em)"/>
                        <ValidationMessage For="() => trainingPart.Description"/>
                    </MudPaper>
                </MudPaper>
                
                <MudMenu Icon="@Icons.Material.Filled.MoreVert" Class="ma-0 pa-0 align-end" Dense="true" >
                    <MudMenuItem Icon="@Icons.Material.Filled.Remove" IconSize="Size.Small" OnClick="@(() => RemoveTrainingPart(trainingPart))">Smazat tréninkovou část</MudMenuItem>
                </MudMenu>
                
            </MudPaper>
            
            @*TrainingGroups*@
            <ValidationMessage For="() => trainingPart.TrainingGroups"/>
            <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2 align-items-center">
                <TrainingGroupsComponent TrainingPart="@trainingPart" Training="@Training" OnActivityAdded="OnActivityAdded" OnActivityRemoved="OnActivityAdded" OnDurationChanged="OnActivityAdded" OnTrainingPartNameSetByActivity="@(e => trainingPart.Name = e)"/>
            </MudPaper>
        </MudPaper>
    }
</MudPaper>


@code {
    [Parameter] public TrainingDto Training { get; set; } = null!;

    [Parameter] public EventCallback OnTrainingPartChanged { get; set; }

    public void ChangeOrder(TrainingPartDto trainingPart, int direction)
    {
        var originalOrder = trainingPart.Order;
        var trainingPartForSwap = direction > 0
            ? Training.TrainingParts.Where(tp => tp.Order > originalOrder).OrderByDirection(SortDirection.Ascending, t => t.Order).FirstOrDefault()
            : Training.TrainingParts.Where(tp => tp.Order < originalOrder).OrderByDirection(SortDirection.Descending, t => t.Order).FirstOrDefault();

        if (trainingPartForSwap == null) return;

        trainingPart.Order = trainingPartForSwap.Order;

        trainingPartForSwap.Order = originalOrder;
    }

    private void AddTrainingGroup(TrainingPartDto trainingPart)
    {
        trainingPart.TrainingGroups ??= new List<TrainingGroupDto>();
        trainingPart.TrainingGroups.Add(new TrainingGroupDto
        {
            PersonsMax = Training.PersonsMax,
            PersonsMin = Training.PersonsMin
        });
    }

    private async Task OnActivityAdded()
    {
        SetValuesByActivities();

        //await Validate();
        await OnTrainingPartChanged.InvokeAsync();
    }

    private void SetValuesByActivities()
    {
        foreach (var trainingPart in Training.TrainingParts)
        {
            var activityWithinTrainingPart = trainingPart.TrainingGroups?.FirstOrDefault(tg => tg.Activity != null)?.Activity;

            if (string.IsNullOrEmpty(trainingPart.Name))
            {
                trainingPart.Name = activityWithinTrainingPart?.Name;
            }

            if (trainingPart.Duration == 0)
            {
                trainingPart.Duration = activityWithinTrainingPart?.DurationMax ?? 0;
            }
        }
    }

    private async Task Validate()
    {
        foreach (var trainingPart in Training.TrainingParts)
        {
            await TrainingPartValidator.ValidateAsync(trainingPart);
        }
    }

    private async Task OnDurationChanged(int value)
    {
        await OnTrainingPartChanged.InvokeAsync();
    }

    private async Task RemoveTrainingPart(TrainingPartDto trainingPart)
    {
        Training.TrainingParts.Remove(trainingPart);
        await OnTrainingPartChanged.InvokeAsync();
    }
}