@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.UseCases.Members.Interfaces
@inject NavigationManager NavigationManager
@inject IViewMembersWithSpecificationUseCase ViewMembersWithSpecificationUseCase
@inject IDialogService DialogService

@inject IDeleteMemberUseCase DeleteMemberUseCase


<MudPaper Elevation="0" Class="@Class">

<MudText Typo="Typo.h6">Členové</MudText>


<MudChip Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="ShowAddModal">Nový člen</MudChip>


@* @if (Members == null || !Members.Any())
{
    <MudText Typo="Typo.caption">Zadaným kritériím neodpovídá žádný tým</MudText>
}
else
{ *@






    <MudTable Hover="true" FixedHeader="true"
              Items="@Members"
              Dense="true" Virtualize="true" 
              >
        
        
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<MemberDto, object>(x => x.Name)">Jméno</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<MemberDto, object>(x => x.Club.Name)">Klub</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<MemberDto, object>(x => x.ClubRole)">Role</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<MemberDto, object>(x => x.Email)">Email</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Jméno">@context.Name</MudTd>
            <MudTd DataLabel="Klub">@context.Club.Name</MudTd>
            <MudTd DataLabel="Role">@context.ClubRole</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd>
                <MudChip Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Success" OnClick="@(() => Edit(context.Id))">Upravit</MudChip>
                <MudChip Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => ShowDeleteDialog(context))">Smazat</MudChip>
            </MudTd>

        </RowTemplate>

    </MudTable>
</MudPaper>

<MudDialog @bind-ref="_deleteConfirmationDialog" @bind-IsVisible="_isDialogDeletionVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3" />Smazání člena</MudText>
    </TitleContent>
    <DialogContent>
        <p>Opravdu chcete <strong>smazat</strong> člena <strong>@_member!.Name</strong>?</p>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _isDialogDeletionVisible = false" Class="px-10">Ne</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Delete" Class="px-10">Ano</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Parameter]
    public string SearchText { get; set; } = string.Empty;
    
    [Parameter]
    public string Class { get; set; } = "my-4";

    [Parameter] public ClubDto? Club { get; set; }

    [Parameter] public List<MemberDto>? Members { get; set; } = new();

    private MemberDto? _member;

    private readonly DialogOptions _dialogOptions = new()
        {
            NoHeader = false,
            CloseOnEscapeKey = true,
            CloseButton = true,
            DisableBackdropClick = true,
            MaxWidth = MaxWidth.Small,
            Position = DialogPosition.Center,
            FullScreen = false
        };

    private bool _isDialogDeletionVisible;
    private MudDialog? _deleteConfirmationDialog;


    protected override async Task OnParametersSetAsync()
    {
        var memberSpecification = new MemberSpecificationParameters();

        if (Club != null && Club.Id != 0)
        {
            memberSpecification.ClubId = Club.Id;
        }
        
        var members = await ViewMembersWithSpecificationUseCase.ViewAsync(memberSpecification);
        
        Members = members?.ToList();
    }

    private void Edit(int memberId)
    {
        NavigationManager.NavigateTo($"/editmember/{memberId}");
    }

    private void OnAdded(MemberDto member)
    {
        Members!.Add(member);
        StateHasChanged();
    }

    private void ShowDeleteDialog(MemberDto member)
    {
        _isDialogDeletionVisible = true;
        _member = member;
    }

    private async Task Delete()
    {
        _isDialogDeletionVisible = false;

        await DeleteMemberUseCase.ExecuteAsync(_member!);

        Members!.Remove(_member!);

        StateHasChanged();
    }

    private async Task ShowAddModal()
    {
        var options = new DialogOptions
            {
                NoHeader = true,
                CloseOnEscapeKey = false,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.Medium,
                FullWidth = false,
                FullScreen = false,

            };

        var parameter = new DialogParameters { { "Club", Club } };

        var dialog = await DialogService.ShowAsync<AddMemberModal>(string.Empty, parameter, options);
        var result = await dialog.Result;

        if (result != DialogResult.Cancel() && result.Data != null)
        {
            OnAdded((MemberDto)result.Data);
        }
    }
}
