@using Variant = MudBlazor.Variant
<MudPaper Elevation="0"  Class="d-inline-flex flex-nowrap gap-2">
    <MudNumericField Label="od" Style="@($"width:{ (string.IsNullOrEmpty(Width)? "auto": Width)};")" @bind-Value="InputValueLow" Min="MinValue" Max="MaxValue" Variant="Variant.Outlined" />
    <MudNumericField Label="do" Style="@($"width:{ (string.IsNullOrEmpty(Width)? "auto": Width)};")" @bind-Value="InputValueHigh" Min="MinValue" Max="MaxValue" Variant="Variant.Outlined" />
</MudPaper>
@code {

    int _valueLow = 1;
    int _valueHigh = 100;
    bool _firstTimeChanged;

    [Parameter] public int MinValue { get; set; } 
    [Parameter] public int MaxValue { get; set; }  

    [Parameter] public int ValueLow { get; set; } 
    [Parameter] public int ValueHigh { get; set; } 
    [Parameter] public string? Width { get; set; }

    [Parameter] public EventCallback<int> ValueLowChanged { get; set; } 
    [Parameter] public EventCallback<int> ValueHighChanged { get; set; }

    [Parameter] public EventCallback Changed { get; set; }


    protected override void OnParametersSet()
    {
        _firstTimeChanged = true;
        _valueHigh = ValueHigh;
        _valueLow = ValueLow;
    }

    public int InputValueLow
    {
        get
        {
            if (_firstTimeChanged)
            {
                return _valueLow;
            }

            return Math.Min(_valueLow, _valueHigh);
        }
        set
        {
            if (_valueLow.Equals(value))
                return;
            _valueLow = value;
            if (_valueLow >= _valueHigh)
            {
                _valueLow = _valueHigh;
                _valueHigh = value;
                ValueHighChanged.InvokeAsync(_valueHigh);
            }
            ValueLowChanged.InvokeAsync(_valueLow);
            if (_firstTimeChanged) Changed.InvokeAsync();
        }
    }


    public int InputValueHigh
    {
        get
        {
            if (_firstTimeChanged)
            {
                return _valueHigh;
            }
            return Math.Max(_valueLow, _valueHigh);
        }
        set
        {
            if (_valueHigh.Equals(value))
                return;
            _valueHigh = value;
            if (_valueLow >= _valueHigh)
            {
                _valueHigh = _valueLow;
                _valueLow = value;
                ValueLowChanged.InvokeAsync(_valueLow);
            }
            ValueHighChanged.InvokeAsync(_valueHigh);
            if (_firstTimeChanged) Changed.InvokeAsync();
        }
    }

}
