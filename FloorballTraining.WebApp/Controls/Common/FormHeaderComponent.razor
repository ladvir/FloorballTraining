@using DialogOptions = MudBlazor.DialogOptions
@using DialogPosition = MudBlazor.DialogPosition
@using Variant = MudBlazor.Variant
@inject IDialogService DialogService

<MudPaper Elevation="0" Class="d-inline-flex z-100 position-sticky top-0 align-center justify-end align-content-end gap-2" Width="100%">
    <MudText Typo="Typo.h4">@Title</MudText>
    <MudSpacer />
    <MudChip T="string" Icon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Color="Color.Success" OnClick="Submit">Uložit</MudChip>
    <MudChip T="string" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Outlined" OnClick="Cancel" Color="Color.Error">Zrušit</MudChip>

    @if (IsEditForm)
    {
        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Variant="Variant.Text" Dense="true">

            <MudMenuItem Icon="@Icons.Material.Filled.Delete" OnClick="ShowDeleteConfirmationDialog">Smazat</MudMenuItem>
        </MudMenu>
    }
</MudPaper>



@code {
    [Parameter] public string Title { get; set; } = "Titulek";

    [Parameter] public string Name { get; set; } = "Název";

    [Parameter] public bool IsEditForm { get; set; }

    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }


    private readonly DialogOptions _dialogOptions = new()
        {
            NoHeader = false,
            CloseOnEscapeKey = true,
            CloseButton = true,
            BackdropClick = true,
            MaxWidth = MaxWidth.Small,
            Position = DialogPosition.Center,
            FullScreen = false
        };

    private async Task Submit()
    {
        await OnSubmit.InvokeAsync().ConfigureAwait(false);
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync().ConfigureAwait(false);
    }



    private async Task ShowDeleteConfirmationDialog()
    {
        var parameters = new DialogParameters { ["Name"] = Name };

        var dialog = await DialogService.ShowAsync<DeleteConfirmationDialog>($"Smazání {Name}", parameters, _dialogOptions);


        var result = await dialog.Result;

        if (result is { Canceled: false, Data: not null })
        {
            await OnDelete.InvokeAsync();
        }


    }

}
