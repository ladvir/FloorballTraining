@using FloorballTraining.CoreBusiness.Dtos
@using Variant = MudBlazor.Variant
@inject NavigationManager NavigationManager
@inject AppSettings AppSettings

<MudChip T="string" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="ForwardToAddTrainingPage">Nový trénink</MudChip>

<MudExpansionPanel Text="Vyhledání tréninku" Dense="true" Class="my-4 border rounded-4 pa-0">
<MudPaper Elevation="0" Class="d-block flex-wrap">
    <MudPaper Elevation="0" Class="d-inline-flex gap-2 flex-wrap flex-grow-1 align-center mud-width-full">
            @* <MudTextField @bind-Value="@SearchCriteria?.Text" Label="Text v názvu či popisku" Class="flex-grow-0 flex-shrink-1" Style="width:22em;" /> *@

            <MudPaper Elevation="0">
                <MudText Style="width:150px;" Typo="Typo.caption">Počet osob: @Persons</MudText>
                <RangeSlider MinValue="1" MaxValue="@AppSettings.MaximalPersons" ValueHigh="@_personsHigh" ValueHighChanged="PersonsHighChanged" ValueLow="@_personsLow" ValueLowChanged="PersonsLowChanged" />
            </MudPaper>
            
            <MudPaper Elevation="0">
                <MudText Style="width:150px;" Typo="Typo.caption"><strong>Počet brankářů: </strong>@Goalies</MudText>
                <RangeSlider MinValue="0" MaxValue="@AppSettings.MaximalPersons" ValueHigh="@_goaliesHigh" ValueHighChanged="GoaliesHighChanged" ValueLow="@_goaliesLow" ValueLowChanged="GoaliesLowChanged" />
            </MudPaper>

            <MudPaper Elevation="0">
            <MudText Style="width:150px;" Typo="Typo.caption">Doba trvání: @Duration</MudText>
            <RangeSlider MinValue="1" MaxValue="@AppSettings.MaxTrainingDuration" ValueHigh="@_durationHigh" ValueHighChanged="DurationHighChanged" ValueLow="@_durationLow" ValueLowChanged="DurationLowChanged" />
        </MudPaper>
        
        <MudPaper Elevation="0">
                    <MudText Style="width:200px;" Typo="Typo.caption">Intenzita: @Intensity</MudText>
                <RangeSlider MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue" ValueHigh="@_intensityHigh" ValueHighChanged="IntensityHighChanged" ValueLow="@_intensityLow" ValueLowChanged="IntensityLowChanged" />
        </MudPaper>
            
        <MudPaper Elevation="0">
                    <MudText Style="width:200px;" Typo="Typo.caption">Obtížnost: @Difficulty</MudText>
            <RangeSlider MinValue="@Difficulties.MinValue" MaxValue="@Difficulties.MaxValue" ValueHigh="@_difficultyHigh" ValueHighChanged="DifficultyHighChanged" ValueLow="@_difficultyLow" ValueLowChanged="DifficultyLowChanged" />
        </MudPaper>
    </MudPaper>

    <MudPaper Elevation="0" Class="my-2 ">
        <MudText Typo="Typo.h6">Věkové kategorie</MudText>
        <AgeGroupsComponent SelectedValues="@SearchCriteria.AgeGroups" SelectedValuesChanged="OnAgeGroupsCriteriaChanged" />
    </MudPaper>

        <MudPaper Elevation="0" Class="my-2 ">
            <MudText Typo="Typo.h6">Místa</MudText>
            <PlacesSelectionComponent SelectedValues="@SearchCriteria.Places" SelectedValuesChanged="OnPlacesCriteriaChanged" />
        </MudPaper>

    
    <MudPaper Elevation="0" Class="my-2">
        <MudText Typo="Typo.h6">Štítky</MudText>
            <TagExpandListSelectOnlyComponent SelectedTags="@SearchCriteria.Tags" OnSelectedTagsChanged="OnTrainingGoalCriteriaChanged" TrainingGoalsOnly="true" />
    </MudPaper>
    
    <MudPaper Elevation="0" Class="mt-2 mb-0">
        <MudChip T="string" Icon="@Icons.Material.Filled.Clear" Variant="Variant.Outlined" Color="Color.Error" OnClick="ClearFilter">Zruš filtr</MudChip>
        <MudChip T="string" Icon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Color="Color.Success" OnClick="OnSearch">Hledej</MudChip>
    </MudPaper>
</MudPaper>
</MudExpansionPanel>


@code {

    [Parameter]
    public SearchCriteria SearchCriteria { get; set; } = new();

    [Parameter]
    public EventCallback<SearchCriteria> OnSearchItem { get; set; }

    private int _durationLow = 1;
    private int _durationHigh;

    private int _personsLow = 1;
    private int _personsHigh;

    private int _goaliesLow;
    private int _goaliesHigh;

    private int _difficultyLow = Difficulties.MinValue;
    private int _difficultyHigh = Difficulties.MaxValue;


    private int _intensityLow = Intensities.MinValue;
    private int _intensityHigh = Intensities.MaxValue;

    private string Persons => StringExtensions.GetRangeString(SearchCriteria.PersonsMin ?? 1, SearchCriteria.PersonsMax ?? AppSettings.MaximalPersons);
    private string Goalies => StringExtensions.GetRangeString(SearchCriteria.GoaliesMin ?? 0, SearchCriteria.GoaliesMax?? AppSettings.MaximalPersons);

    private string Duration => StringExtensions.GetRangeString(_durationLow, _durationHigh);
    private string Difficulty => StringExtensions.GetRangeString(Difficulties.Values.First(v => v.Value == _difficultyLow).Description, Difficulties.Values.First(v => v.Value == _difficultyHigh).Description);
    private string Intensity => StringExtensions.GetRangeString(Intensities.Values.First(v => v.Value == _intensityLow).Description, Intensities.Values.First(v=>v.Value==_intensityHigh).Description);

    protected override void OnParametersSet()
    {
        SearchCriteria= new SearchCriteria();

        _durationLow = SearchCriteria.DurationMin ?? 1;
        _durationHigh = SearchCriteria.DurationMax ?? AppSettings.MaxTrainingDuration;

        _personsLow = SearchCriteria.PersonsMin ?? 1;
        _personsHigh = SearchCriteria.PersonsMax ?? AppSettings.MaximalPersons;

        _goaliesLow = SearchCriteria.GoaliesMin ?? 0;
        _goaliesHigh = SearchCriteria.GoaliesMax ?? AppSettings.MaximalPersons;
    }

    private void OnSearch()
    {
        SearchCriteria.DurationMax =AppSettings.MaxTrainingDuration;
        SearchCriteria.DurationMin ??= 1;
        SearchCriteria.PersonsMax ??= AppSettings.MaximalPersons;
        SearchCriteria.PersonsMin ??= 1;

        OnSearchItem.InvokeAsync(SearchCriteria);
    }

    private void DurationHighChanged(int value)
    {
        SearchCriteria.DurationMax = value;
        _durationHigh = value;
    }

    private void DurationLowChanged(int value)
    {
            SearchCriteria.DurationMin = value;
            _durationLow = value;
    }


    private void PersonsHighChanged(int value)
    {
        
            SearchCriteria.PersonsMax = value;
            _personsHigh = value;
    }

    private void PersonsLowChanged(int value)
    {
            SearchCriteria.PersonsMin = value;
            _personsLow = value;
    }


    private void GoaliesHighChanged(int value)
    {
        
        SearchCriteria.GoaliesMax = value;
        _goaliesHigh = value;
    }

    private void GoaliesLowChanged(int value)
    {
        
            
        SearchCriteria.GoaliesMin = value;
        _goaliesLow = value;
        
        
    }

    private void DifficultyLowChanged(int value)
    {
        
            
            SearchCriteria.DifficultyMin = value;
            _difficultyLow = value;
        
       
    }

    private void DifficultyHighChanged(int value)
    {
        
            
            SearchCriteria.DifficultyMax = value;
            _difficultyHigh = value;
        
       
    }
    

    private void IntensityLowChanged(int value)
    {
       
            
            SearchCriteria.IntensityMin = value;
            _intensityLow = value;
        
        
    }

    private void IntensityHighChanged(int value)
    {
          
            SearchCriteria.IntensityMax = value;
            _intensityHigh = value;
        
        
    }

    private void ClearFilter()
    {
        SearchCriteria = new SearchCriteria();
        OnSearch();
        
    }

    private void ForwardToAddTrainingPage()
    {
        NavigationManager.NavigateTo("/AddTraining");
    }

    private void OnAgeGroupsCriteriaChanged(List<AgeGroupDto> ageGroups)
    {
        
        SearchCriteria.AgeGroups = ageGroups;
        
    }

    private void OnPlacesCriteriaChanged(List<PlaceDto> places)
    {
        
        SearchCriteria.Places = places;
        
    }

    private void OnTrainingGoalCriteriaChanged(List<TagDto?> tags)
    {
        
        SearchCriteria.Tags = tags;
        
    }

}