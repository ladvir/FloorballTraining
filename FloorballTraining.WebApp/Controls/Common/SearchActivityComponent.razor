<MudPaper Elevation="0" Class="flex-1 ma-0 pa-0">
    
    <MudText Typo="Typo.h6">Filtrování</MudText>

    <MudTextField @bind-Value="@SearchCriteria.Text" Label="Text v názvu či popisku" Class="flex-grow-0 flex-shrink-1" Style="width:22em;"/>

    <MudPaper Elevation="0">
        <MudText Typo="Typo.caption"><strong>Počet osob celkem: </strong>@Persons</MudText>
        <RangeSlider MinValue="1" MaxValue="@PersonsMax" ValueHigh="@_personsHigh" ValueHighChanged="PersonsHighChanged" ValueLow="@_personsLow" ValueLowChanged="PersonsLowChanged"/>
    </MudPaper>

    <MudPaper Elevation="0">
        <MudText Typo="Typo.caption"><strong>Počet brankářů: </strong>@Goalies</MudText>
        <RangeSlider MinValue="1" MaxValue="@GoaliesMax" ValueHigh="@_goaliesHigh" ValueHighChanged="GoaliesHighChanged" ValueLow="@_goaliesLow" ValueLowChanged="GoaliesLowChanged"/>
    </MudPaper>

    <MudPaper Elevation="0">
        <MudText Typo="Typo.caption"><strong>Doba trvání:</strong> @Duration</MudText>
        <RangeSlider MinValue="1" MaxValue="@DurationMax" ValueHigh="@_durationHigh" ValueHighChanged="DurationHighChanged" ValueLow="@_durationLow" ValueLowChanged="DurationLowChanged"/>
    </MudPaper>

    <MudPaper Elevation="0">
        <MudText Typo="Typo.caption"><strong>Intenzita:</strong> @Intensity</MudText>
        <RangeSlider MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue" ValueHigh="@_intensityHigh" ValueHighChanged="IntensityHighChanged" ValueLow="@_intensityLow" ValueLowChanged="IntensityLowChanged"/>
    </MudPaper>

    <MudPaper Elevation="0">
        <MudText Typo="Typo.caption"><strong>Obtížnost:</strong> @Difficulty</MudText>
        <RangeSlider MinValue="@Difficulties.MinValue" MaxValue="@Difficulties.MaxValue" ValueHigh="@_difficultyHigh" ValueHighChanged="DifficultyHighChanged" ValueLow="@_difficultyLow" ValueLowChanged="DifficultyLowChanged"/>
    </MudPaper>


    <MudPaper Elevation="0" Class="my-1">
        <MudText Typo="Typo.caption" Class=""><strong>Věkové kategorie</strong></MudText>
        <AgeGroupsComponent SelectedValues="@SearchCriteria.AgeGroups" SelectedValuesChanged="async e => { SearchCriteria.AgeGroups = e; await OnSearch(); }"/>
    </MudPaper>

    <MudPaper Elevation="0" Class="my-1">
        <MudText Typo="Typo.caption"><strong>Štítky</strong></MudText>
        <TagSelectionDropdownComponent SelectedTags="@SearchCriteria.Tags" OnSelectedTagsChanged="async e => { SearchCriteria.Tags = e.ToList()!; await OnSearch(); }"/>
    </MudPaper>

    <MudPaper Elevation="0" Class="my-1">
        <MudChip T="string" Icon="@Icons.Material.Filled.Clear" Variant="Variant.Outlined" Color="Color.Error" OnClick="ClearFilter">Zruš filtr</MudChip>
        <MudChip T="string" Icon="@Icons.Material.Filled.Search" Variant="Variant.Outlined" Color="Color.Success" OnClick="OnSearch">Hledej</MudChip>
    </MudPaper>
</MudPaper>

@code {
    [Parameter]
    public SearchCriteria SearchCriteria { get; set; } = new();

    [Parameter]
    public int DurationMax{ get; set; }

    [Parameter]
    public int PersonsMax { get; set; }

    [Parameter]
    public int GoaliesMax { get; set; }

    [Parameter]
    public EventCallback<SearchCriteria> OnSearchItem { get; set; }

    private int _durationLow;
    private int _durationHigh;

    private int _personsLow;
    private int _personsHigh;
    
    private int _goaliesLow;
    private int _goaliesHigh;

    private int _difficultyLow = Difficulties.MinValue;
    private int _difficultyHigh = Difficulties.MaxValue;


    private int _intensityLow = Intensities.MinValue;
    private int _intensityHigh = Intensities.MaxValue;

    private string Persons => StringExtensions.GetRangeString(SearchCriteria.PersonsMin ?? 1, SearchCriteria.PersonsMax ?? PersonsMax);
    private string Goalies => StringExtensions.GetRangeString(SearchCriteria.GoaliesMin ?? 0, SearchCriteria.GoaliesMax ?? GoaliesMax);
    private string Duration => StringExtensions.GetRangeString(_durationLow, _durationHigh);
    private string Difficulty => StringExtensions.GetRangeString(Difficulties.Values.First(v => v.Value == _difficultyLow).Description, Difficulties.Values.First(v => v.Value == _difficultyHigh).Description);
    private string Intensity => StringExtensions.GetRangeString(Intensities.Values.First(v => v.Value == _intensityLow).Description, Intensities.Values.First(v=>v.Value==_intensityHigh).Description);

    protected override void OnParametersSet()
    {
        _durationLow = SearchCriteria.DurationMin ?? 1;
        _durationHigh = SearchCriteria.DurationMax ?? DurationMax;

        _personsLow = SearchCriteria.PersonsMin ?? 1;
        _personsHigh = SearchCriteria.PersonsMax ?? PersonsMax;

        _goaliesLow = SearchCriteria.GoaliesMin ?? 0;
        _goaliesHigh = SearchCriteria.GoaliesMax?? PersonsMax;
    }

    private async Task OnSearch()
    {
       await OnSearchItem.InvokeAsync(SearchCriteria).ConfigureAwait(false);
    }

    private async Task DurationHighChanged(int value)
    {
        if(_durationHigh!=value) {
            SearchCriteria.DurationMax = value;
            _durationHigh = value;
            await OnSearch();
        }
    }

    private async Task DurationLowChanged(int value)
    {
        if (_durationLow != value)
        {
            SearchCriteria.DurationMin = value;
            _durationLow = value;
            await OnSearch();
        }
    }


    private async Task PersonsHighChanged(int value)
    {
        if (_personsHigh != value)
        {
            SearchCriteria.PersonsMax = value;
            _personsHigh = value;
            await OnSearch();
        }
    }

    private async Task PersonsLowChanged(int value)
    {
        if (_personsLow != value)
        {
            SearchCriteria.PersonsMin = value;
            _personsLow = value;
            await OnSearch();
        }
    }
    
    private async Task GoaliesHighChanged(int value)
    {
        if (_goaliesHigh != value)
        {
            SearchCriteria.GoaliesMax = value;
            _goaliesHigh = value;
            await OnSearch();
        }
    }

    private async Task GoaliesLowChanged(int value)
    {
        if (_goaliesLow != value)
        {
            SearchCriteria.GoaliesMin = value;
            _goaliesLow = value;
            await OnSearch();
        }
    }

    private async Task DifficultyLowChanged(int value)
    {
        if (_difficultyLow != value)
        {
            SearchCriteria.DifficultyMin = value;
            _difficultyLow = value;
            await OnSearch();
        }
    }

    private async Task DifficultyHighChanged(int value)
    {
        if (_difficultyHigh != value)
        {
            SearchCriteria.DifficultyMax = value;
            _difficultyHigh = value;
            await OnSearch();
        }
    }
    

    private async Task IntensityLowChanged(int value)
    {
        if (_intensityLow != value)
        {
            SearchCriteria.IntensityMin = value;
            _intensityLow = value;
            await OnSearch();
        }
    }

    private async Task IntensityHighChanged(int value)
    {
        if (_intensityHigh != value)
        {
            SearchCriteria.IntensityMax = value;
            _intensityHigh = value;
            await OnSearch();
        }
    }

    private async Task ClearFilter()
    {
        SearchCriteria = new SearchCriteria();
        await OnSearch().ConfigureAwait(false);
    }
}