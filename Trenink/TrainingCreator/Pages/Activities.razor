@page "/activities"
@using TrainingDataAccess.Services.ActivityServices
@using TrainingCreator.Pages.Components
@using TrainingCreator.Data
@using TrainingDataAccess.Services.TagServices

@inject IActivityService ActivityService
@inject ITagService TagService
@inject IDialogService DialogService

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium"/>
}
else
{
    <MudScrollToTop>
        <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" Size="Size.Large" />
    </MudScrollToTop>

    <MudPaper Class="d-flex flex-grow-0 align-center flex-row gap-4" Elevation="0">
        <MudText Typo="Typo.h4">Aktivity</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" aria-label="add" Color="Color.Success"
                       OnClick="ActivityNew_Show" DisableElevation="true" Variant="Variant.Filled" />
        <MudTextField @bind-Value="_searchString1" Placeholder="Hledej" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
                      MaxWidth="350px" Width="250px" Margin="Margin.Dense" Variant="Variant.Outlined"/>
    </MudPaper>

    <MudPaper Class="d-flex flex-wrap gap-4 ma-4 flex-grow-4" Elevation="0">
        @foreach (var activity in GetFilteredItems())
        {
            <ActivityCard Activity="activity"/>
        }
    </MudPaper>
}

@code {

    private bool _isLoading ;
    private List<ActivityDto>? _activities ;
    private static IEnumerable<TagDto>? _tags;
    private string _searchString1 = "";
    
    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        _isLoading = true;
        await Task.Delay(1);
        _activities = await ActivityService.GetAllActivities2();

    //var tags = _activities.SelectMany(a => a.TagIds);
    //_tags = await TagService.GetAllTagsByIds(tags);
        _tags = await TagService.GetAllTags();

        _isLoading = false;
    }

    

    private async Task ActivityNew_Show()
    {
        var activity = new ActivityDto();
        var result = await ShowModalDialog(RecordAction.Insert, activity);

        if (!result.Cancelled)
        {
            _activities?.Add((ActivityDto)result.Data);
        }
    }

    private async Task<DialogResult> ShowModalDialog(RecordAction action, ActivityDto activity)
    {
        
        var options = new DialogOptions
        {
            NoHeader = true, DisableBackdropClick = true, Position = DialogPosition.Center,
            FullWidth = true, FullScreen = false, MaxWidth = MaxWidth.ExtraLarge
        };
        var parameters = new DialogParameters { ["Activity"] = activity , ["Action"] = action};

        var dialog = await DialogService.ShowAsync<ActivityNew>(action == RecordAction.Insert? "Nová aktivita" : "Aktivita", parameters, options);
        var result = await dialog.Result;
        return result;
    }

    private Func<ActivityDto, string, bool> _filter = FilterFunc;

    private static bool FilterFunc(ActivityDto element, string searchString)
    {
        return true;

        if (string.IsNullOrWhiteSpace(searchString)) return true;


        var words = searchString.Split(' ');

        if (words.All(w => element.Name.Contains(w, StringComparison.InvariantCultureIgnoreCase))
            || words.All(w => element.Description.Contains(w, StringComparison.InvariantCultureIgnoreCase))
            || words.All(w => $"{element.PersonsMin} {element.PersonsMax} ".Contains(w, StringComparison.InvariantCultureIgnoreCase))
            || words.All(w => element.TagIds.Any(t => _tags != null && _tags.Any(ta=> ta.TagId==t&& ta.Name!.Contains(w, StringComparison.InvariantCultureIgnoreCase))))
            )
            return true;

        return false;
    }

    private List<ActivityDto> GetFilteredItems()
    {
        if (string.IsNullOrEmpty(_searchString1))
        {
            return _activities?? new List<ActivityDto>();
        }

        return _activities != null ? 
            _activities.Where(a => _filter(a, _searchString1)).ToList() 
            : new List<ActivityDto>();
    }
}
