@page "/activities"
@using TrainingDataAccess.Services.ActivityServices
@using TrainingCreator.Pages.Components
@using TrainingCreator.Data
@using TrainingDataAccess.Services.TagServices
@using TrainingDataAccess.Models

@inject IActivityService ActivityService
@inject ITagService TagService
@inject IDialogService DialogService

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium"/>
}
else
{
    <MudScrollToTop>
        <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" Size="Size.Large"/>
    </MudScrollToTop>

    <MudPaper Class="d-flex flex-grow-0 align-center flex-row gap-4" Elevation="0">
        <MudText Typo="Typo.h4">Aktivity</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Success"
                       OnClick="ActivityNew_Show" DisableElevation="true" Variant="Variant.Filled"/>
        <MudTextField @bind-Value="_searchString1" Placeholder="Hledej" Adornment="Adornment.End" 
                      Style="max-width:300px;" 
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
                  Margin="Margin.Dense" Variant="Variant.Outlined" OnAdornmentClick="Search" />
        
        
    </MudPaper>


    
    <MudPaper Class="d-flex flex-wrap gap-4 ma-4 flex-grow-4" Elevation="0">
        @foreach (var activity in GetFilteredItems())
        {

            string persons = StringExtentions.GetRangeString(activity.PersonsMin.GetValueOrDefault(0), activity.PersonsMax.GetValueOrDefault(0));
            var duration = StringExtentions.GetRangeString(activity.DurationMin.GetValueOrDefault(0), activity.DurationMax.GetValueOrDefault(0));

            <MudCard Elevation="0" Outlined="true" Style="width: 15vw; min-height: 5vh; overflow-y: hidden; overflow-wrap: break-word ">
                <MudCardHeader Class="ma-1 pa-1">
                    <CardHeaderContent>
                        <MudPaper Elevation="0" Class="ma-0 pa-0" Style="overflow:hidden;">
                            <MudPaper Style="text-overflow: ellipsis; white-space: nowrap; max-width: 12vw" Elevation="0" Class="pa-0 ma-0">
                                <MudText Typo="Typo.h5">@activity.Name</MudText>
                            </MudPaper>

                            <MudPaper Class="my-2 pa-0" Elevation="0">
                                <MudPaper Class="d-inline-flex gap-1 ma-0 pa-0" Elevation="0">
                                    <MudIcon Icon="@Icons.Material.Sharp.People"/>
                                    <MudText Style="min-width: 5vw;" Class="ma-0 pa-0">@persons</MudText>
                                </MudPaper>
                                <MudPaper Class="d-inline-flex gap-1 ma-0 pa-0" Elevation="0">
                                    <MudIcon Icon="@Icons.Material.Sharp.Timer"/>
                                    <MudText Style="min-width: 5vw;" Class="ma-0 pa-0">@duration</MudText>
                                </MudPaper>
                            </MudPaper>
                            
                        </MudPaper>
                        
                        
                        

                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudMenu PositionAtCursor="true">
                            <ActivatorContent>
                                <MudIconButton Icon="@Icons.Material.Filled.Menu" />
                            </ActivatorContent>
                            <ChildContent>
                                <MudMenuItem OnClick="() => ShowDetail(activity)">Detail</MudMenuItem>
                                <MudMenuItem OnClick="() => Edit(activity)">Edit</MudMenuItem>
                                <MudMenuItem OnClick="() => ConfirmDelete(activity)">Delete</MudMenuItem>
                            </ChildContent>
                        </MudMenu>
                    </CardHeaderActions>
                </MudCardHeader>

                <MudCardContent Class="ma-0 pa-0 align-top">

                    <MudText Typo="Typo.body2" GutterBottom="true" Style="overflow: hidden;" Class="ma-1 pa-1">@activity.Description.TruncateLongString(150)</MudText>

                </MudCardContent>
            </MudCard>
        }

       
    </MudPaper>

    <MudPagination Count="_pagesCount" Selected="_pagination.Page" SelectedChanged="PageChanged" />
}

@code {
    private bool _isLoading ;
    private List<ActivityDto> _activities = null!;
   // private static IEnumerable<TagDto>? _tags;
    private string _searchString1 = "";
    
    PaginationDTO _pagination = new PaginationDTO();

    private int _pagesCount;
   
    private async Task PageChanged(int i)
    {
        _pagination.Page = i;
        await FetchData(_searchString1);
    }

    
    protected override async Task OnInitializedAsync()
    {
        _pagination = new PaginationDTO
            {
                Page = 1,
                ItemsPerPage = 10
            };
        
        await FetchData(_searchString1);
    }

    private async Task FetchData(string searchString)
    {
        _isLoading = true;
        await Task.Delay(1);

        var result = await ActivityService.GetActivities(_pagination, searchString);

        _activities = result.Items.ToList();
        _pagesCount = (int)Math.Ceiling(result.Count / (decimal)_pagination.ItemsPerPage);

        _isLoading = false;
    }
    
    private async Task ActivityNew_Show()
    {
        var activity = new ActivityDto();
        var result = await ShowModalDialog(RecordAction.Insert, activity);

        if (!result.Cancelled)
        {
            _activities.Add((ActivityDto)result.Data);
        }
    }

    private async Task<DialogResult> ShowModalDialog(RecordAction action, ActivityDto activity)
    {

        var options = new DialogOptions
        {
            NoHeader = true, DisableBackdropClick = true, Position = DialogPosition.Center,
            FullWidth = true, FullScreen = false, MaxWidth = MaxWidth.ExtraLarge
        };
        var parameters = new DialogParameters { ["Activity"] = activity , ["Action"] = action};

        var dialog = await DialogService.ShowAsync<ActivityNew>(action == RecordAction.Insert? "Nová aktivita" : "Aktivita", parameters, options);
        var result = await dialog.Result;
        return result;
    }

    private Func<ActivityDto, string, bool> _filter = FilterFunc;




    private static bool FilterFunc(ActivityDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;

        var words = searchString.Split(' ');

        if (words.All(w => element.Name.Contains(w, StringComparison.InvariantCultureIgnoreCase))
            || words.All(w => element.Description.Contains(w, StringComparison.InvariantCultureIgnoreCase))
            || words.All(w => $"{element.PersonsMin} {element.PersonsMax} ".Contains(w, StringComparison.InvariantCultureIgnoreCase))
            //|| words.All(w => element.TagIds.Any(t => _tags != null && _tags.Any(ta=> ta.TagId==t&& ta.Name!.Contains(w, StringComparison.InvariantCultureIgnoreCase))))
            )
            return true;

        return false;
    }

    private void ShowDetail(ActivityDto activity)
    {
        var options = new DialogOptions
        {
            NoHeader = false,
            CloseOnEscapeKey = true,
            CloseButton = true,
            DisableBackdropClick = true,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            FullScreen = false,

        };
        var parameters = new DialogParameters { ["Activity"] = activity};

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }

    private List<ActivityDto> GetFilteredItems()
    {
        return _activities;

        if (string.IsNullOrEmpty(_searchString1))
        {
            return _activities;
        }

        return _activities.Where(a => _filter(a, _searchString1)).ToList();
    }
    
    private async Task Edit(ActivityDto activity)
    {
        var result = await ShowModalDialog(RecordAction.Update, activity);

        if (!result.Cancelled)
        {
            // _activities?.Add((ActivityDto)result.Data);
        }
    }

   

    private async Task ConfirmDelete(ActivityDto activity)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                NoHeader = false,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                FullWidth = true,
                FullScreen = false,
                MaxWidth = MaxWidth.Medium,
                CloseButton = true
            };

        var parameters = new DialogParameters
            {
                ["Title"] = "Smazání aktivity",
                ["ConfirmationText"] = $"Opravdu si přejete aktivitu {activity.Name} smazat ?",
                ["IconName"] = Icons.Material.Filled.Delete
            };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Aktivita", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await Delete(activity);
        }
        
    }

    private async Task Delete(ActivityDto activity)
    {
        await ActivityService.DeleteActivity(activity);

        _activities.Remove(activity);
    }


    private async Task Search()
    {
        await FetchData(_searchString1);
    }
}
