@page "/activities"
@using TrainingDataAccess.Models
@using TrainingDataAccess.Services.ActivityServices
@using TrainingCreator.Pages.Components
@using TrainingCreator.Data
@using TrainingDataAccess.Services.TagServices

@inject IActivityService ActivityService
@inject ITagService TagService
@inject IDialogService DialogService

@if (_activities is null)
{
    <p><em>Načítám...</em></p>
}
else
{

    <MudScrollToTop>
        <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" Size="Size.Large" />
    </MudScrollToTop>


    <MudPaper Class="d-flex flex-grow-0 align-center flex-row gap-4" Elevation="0">
        <MudText Typo="Typo.h4">Aktivity</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" aria-label="add" Color="Color.Success"
                       OnClick="ActivityNew_Show" DisableElevation="true" Variant="Variant.Filled" />
        <MudTextField @bind-Value="_searchString1" Placeholder="Hledej" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
                      MaxWidth="350px" Width="250px" Margin="Margin.Dense" Variant="Variant.Outlined"/>
    </MudPaper>

    <MudPaper Class="d-flex flex-wrap gap-4 ma-4 flex-grow-4" Elevation="0">
        @foreach (var activity in GetFilteredItems())
        {
            <ActivityCard Activity="activity"/>
        }
    </MudPaper>
}



@code {
    private List<ActivityDto>? _activities ;
    private IEnumerable<TagDto>? _tags;


    private string _searchString1 = "";
    
   

    protected override async Task OnInitializedAsync()
    {
        _activities = await ActivityService.GetAllActivities2();

        var tags = _activities.SelectMany(a => a.TagIds);

        _tags = await TagService.GetAllTagsByIds(tags);
    }

    private async Task ConfirmDelete(ActivityDto activity)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, NoHeader = false, DisableBackdropClick = true, 
            Position = DialogPosition.Center, FullWidth = true, FullScreen = false, MaxWidth = MaxWidth.Medium, CloseButton = true};

        var parameters = new DialogParameters
        {
            ["Title"] = "Smazání aktivity",
            ["ConfirmationText"] =$"Opravdu si přejete aktivitu {activity.Name} smazat ?",
            ["IconName"] = Icons.Material.Filled.Delete
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Aktivita", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await Delete(activity);
        }
        StateHasChanged();
    }

    private async Task Delete(ActivityDto activity)
    {
        await ActivityService.DeleteActivity(activity);

        _activities?.Remove(activity);
    }

    private async Task ActivityNew_Show()
    {
        var activity = new ActivityDto();
        var result = await ShowModalDialog(RecordAction.Insert, activity);

        if (!result.Cancelled)
        {
            _activities?.Add((ActivityDto)result.Data);
        }
    }

    private async Task<DialogResult> ShowModalDialog(RecordAction action, ActivityDto activity)
    {
        
        var options = new DialogOptions
        {
            NoHeader = true, DisableBackdropClick = true, Position = DialogPosition.Center,
            FullWidth = true, FullScreen = false, MaxWidth = MaxWidth.ExtraLarge
        };
        var parameters = new DialogParameters { ["Activity"] = activity , ["Action"] = action};

        var dialog = await DialogService.ShowAsync<ActivityNew>(action == RecordAction.Insert? "Nová aktivita" : "Aktivita", parameters, options);
        var result = await dialog.Result;
        return result;
    }

    private Func<ActivityDto, string, bool> Filter = FilterFunc;

    private static bool FilterFunc(ActivityDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;


        var words = searchString.Split(' ');

        if (words.All(w => element.Name.Contains(w, StringComparison.InvariantCultureIgnoreCase))
            || words.All(w => element.Description.Contains(w, StringComparison.InvariantCultureIgnoreCase))
            || words.All(w => $"{element.PersonsMin} {element.PersonsMax} ".Contains(w, StringComparison.InvariantCultureIgnoreCase))
            //|| words.All(w => element.Tags.Any(t => t.Name!.Contains(w, StringComparison.InvariantCultureIgnoreCase)))
            )
            return true;

        return false;
    }



    private List<ActivityDto> GetFilteredItems()
    {
        if (string.IsNullOrEmpty(_searchString1))
        {
            return _activities?? new List<ActivityDto>();
        }

        return _activities != null ? 
            _activities.Where(a => Filter(a, _searchString1)).ToList() 
            : new List<ActivityDto>();
    }
}
