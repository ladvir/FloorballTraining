@page "/activities"
@using TrainingDataAccess.Models
@using TrainingDataAccess.Services.AcitivityServices
@using TrainingCreator.Pages.Components

@inject IActivityService ActivityService
@inject IDialogService DialogService

<h3>Aktivity</h3>


<MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Add" Color="Color.Primary" Size="Size.Small" OnClick="ActivityNew_Show">Nová aktivita</MudButton>



@if (_activities is null)
{
    <p><em>Načítám...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Název</th>
                <th>Popis</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in _activities)
            {
                <tr>
                    <td>@activity.Name</td>
                    <td>@activity.Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Activity>? _activities;



    protected override async Task OnInitializedAsync()
    {
        _activities = await ActivityService.GetAllActivities();
    }


    private async Task ActivityNew_Show()
    {
        var activity = new Activity();
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters { ["Activity"] = activity };
        

        

        var dialog = await DialogService.ShowAsync<ActivityNew>("Nová aktivita", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            _activities?.Add((Activity)result.Data);
        }
    }

}
