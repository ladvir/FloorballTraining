@page "/activities"
@using TrainingDataAccess.Models
@using TrainingDataAccess.Services.AcitivityServices
@using TrainingCreator.Pages.Components

@inject IActivityService ActivityService
@inject IDialogService DialogService

@if (_activities is null)
{
    <p><em>Načítám...</em></p>
}
else
{

    <MudTable Items="@_activities" @ref="@_table" Dense="true" Hover="true" Bordered="false" Striped="true" Filter="new Func<Activity,bool>(FilterFunc1)" @bind-SelectedItem="_selectedItem1">
        <ColGroup>
            <col style="width: 120px;" />
            <col />
        </ColGroup>

        <ToolBarContent>
            <MudText Typo="Typo.h6">Aktivity</MudText>

            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Add" Color="Color.Primary" Size="Size.Small" OnClick="ActivityNew_Show" Class="mr-5 ml-16">Nová aktivita</MudButton>

            <MudTextField @bind-Value="_searchString1" Placeholder="Hledej" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="ml-3 mr-3"/>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Class="clm-row-small">Název</MudTh>
            <MudTh>Popis</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Název">@context.Name</MudTd>
            <MudTd DataLabel="Popis">@context.Description</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudChip Color="Color.Primary">@CurrentFirstRecordNumber .. @CurrentLastRecordNumber  / @_table.GetFilteredItemsCount()</MudChip>
            <MudPagination Size="Size.Medium" SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" BoundaryCount="2" MiddleCount="1"/>
        </PagerContent>
    </MudTable>
}

@code {
    private List<Activity> _activities = new List<Activity>();
    private MudTable<Activity> _table = new MudTable<Activity>();
    
    private string _searchString1 = "";
    private Activity _selectedItem1 = new Activity();

    private HashSet<Activity> selectedItems = new HashSet<Activity>();

    
    public long CurrentPageItems => GetCurrentPageItems();

    public long CurrentFirstRecordNumber => _table.GetFilteredItemsCount()>0? (_table.CurrentPage * _table.RowsPerPage) + 1: 0;

    public long CurrentLastRecordNumber
    {
        get
        {
            var itemsLeft = (_table.CurrentPage + 1) * _table.RowsPerPage;

            if (_table.GetFilteredItemsCount() <= 0) return 0;

            if (_table.GetFilteredItemsCount() - itemsLeft > 0 )
            {
                return itemsLeft ;
            }

            return _table.GetFilteredItemsCount();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _activities = await ActivityService.GetAllActivities();
    }

    private async Task ActivityNew_Show()
    {
        var activity = new Activity();
        var options = new DialogOptions { CloseOnEscapeKey = true, NoHeader = false, DisableBackdropClick = true, Position = DialogPosition.Center, FullWidth = true, FullScreen = false, MaxWidth = MaxWidth.Medium};
        var parameters = new DialogParameters { ["Activity"] = activity };

        var dialog = await DialogService.ShowAsync<ActivityNew>("Nová aktivita", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            _activities.Add((Activity)result.Data);
        }
    }

    private bool FilterFunc1(Activity element) => FilterFunc(element, _searchString1);

    private bool FilterFunc(Activity element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString) 
            || element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) 
            || element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || $"{element.PersonsMin} {element.PersonsMax} ".Contains(searchString)) 
            return true;

        return false;
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);

    }

    private long GetCurrentPageItems()
    {
        var currentPage = _table.CurrentPage;
        var rowsPerPage = _table.RowsPerPage;
        var filtered = _table.FilteredItems.ToList();

        return filtered.Skip(currentPage * rowsPerPage).Take(rowsPerPage).Count();
    }
}
