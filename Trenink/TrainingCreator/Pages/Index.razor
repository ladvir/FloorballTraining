@page "/"
@using TrainingDataAccess.Services.ActivityServices
@using TrainingDataAccess.Services.TagServices
@using TrainingDataAccess.Models

@inject IActivityService ActivityService
@inject ITagService TagService

<link href="https://use.fontawesome.com/releases/v5.14.0/css/all.css" rel="stylesheet">


<PageTitle>Přehled</PageTitle>


<MudPaper Class="d-flex align-content-start flex-wrap flex-grow-1 gap-4" Elevation="0">

    <MudIcon Icon="@Icons.Material.Filled.FollowTheSigns" Color="Color.Default" />

    @if (SelectedValues != null)
    {
        <MudChipSet @ref="@_mudChipSet" AllClosable="true" OnClose="Remove">
            @foreach (var tag in SelectedValues)
            {
                <MudChip Value="@tag" Style="@($"background-color:{tag.Color}; color:white;")" Variant="Variant.Text">@tag.Name</MudChip>
            }
        </MudChipSet>
    }

    <MudTextField @bind-Value="NewTagName" Variant="Variant.Text" Margin="Margin.Dense" OnKeyUp="AddCustomTag" @bind-Text="NewTagName" FullWidth="false" Style="Width: 200px" />

</MudPaper>

<MudPaper Class="border-solid border-2 mud-border-primary pa-1 overflow-y-auto --mud-typography-caption-size font flex-auto" Width="15%" MaxHeight="80%">
    <CascadingValue Value="this">
        <CascadingValue Value="@SelectedValues">
            <TagsList @ref="@TagsList" Tags="_tags" SelectedValues="SelectedValues" SelectedValuesChanged="Refresh" />
        </CascadingValue>
    </CascadingValue>
</MudPaper>
@code
{
    [CascadingParameter]
    public Error? Error { get; set; }

    public TagsList? TagsList { get; set; } = null!;

    public List<Tag>? SelectedValues;

    private List<Tag>? _tags;

    private MudChipSet? _mudChipSet = new MudChipSet();

    public string NewTagName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _tags = await TagService.GetAllTags();
        SelectedValues = new List<Tag>();
    }

    public void Refresh(List<Tag>? xxx)
    {
        SelectedValues = xxx;
        StateHasChanged();
    }

    private void Remove(MudChip obj) => SelectedValues?.Remove((Tag)obj.Value);

    private async Task AddCustomTag(KeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "Enter" or "NumpadEnter":
                await InsertCustomTag();
                break;
            case "Escape" or "Esc":
                NewTagName = string.Empty;
                break;
        }
    }

    private async Task InsertCustomTag()
    {
        if (string.IsNullOrEmpty(NewTagName)) return;

        var parentTag = _tags?.Single(t => t.IsCustomRoot);

        var newTag = new Tag
            {
                Name = NewTagName,
                ParentTagId = parentTag?.TagId
            };

        await TagService.CreateTag(newTag);

        _tags?.Add(newTag);

        SelectedValues?.Add(newTag);

        NewTagName = string.Empty;
    }
}


