@page "/"
@using TrainingDataAccess.Services.ActivityServices
@using TrainingDataAccess.Services.TagServices
@using TrainingDataAccess.Models
@using TrainingDataAccess.Services.TrainingServices
@using TrainingCreator.Data
@using TrainingCreator.Pages.Components
@using TrainingCreator.Services
@using TrainingDataAccess.Dtos
@using TrainingDataAccess.Mappers
@using TrainingDataAccess.Models.Factories
@inject PdfCreationService PdfCreationService;
@inject IActivityService ActivityService

@inject ITrainingService TrainingService
@inject ITagService TagService
@inject IDialogService DialogService

@inject ITrainingFactory TrainingFactory
@inject ITrainingPartFactory TrainingPartFactory
@inject IActivityFactory ActivityFactory


@inject NavigationManager NavigationManager

<PageTitle>Přehled</PageTitle>



<MudButton OnClick="Save">Save</MudButton>

<MudButton OnClick="Find">Find</MudButton>
<MudText>@_activity.Name</MudText>

<MudButton OnClick="Add">Add</MudButton>

<MudButton OnClick="Pdf">PDF</MudButton>



<a href="@_pdfLink" download="filename">@_pdfLink</a>


@foreach (var activity in _activitiesSelected){
<MudText>@activity.Name</MudText>
}


<MudText >@_text</MudText>

@code
{
    private string _text = string.Empty;
    private string _pdfLink = string.Empty;

    private List<ActivityOverviewDto> _activities = new List<ActivityOverviewDto>();

    private List<ActivityOverviewDto> _activitiesSelected = new List<ActivityOverviewDto>();

    private ActivityOverviewDto _activity = new ActivityOverviewDto();


    protected override async Task OnInitializedAsync()
    {
        _activities = await ActivityService.GetActivitiesAll(string.Empty);
        await base.OnInitializedAsync();
    }

    private async Task Save()
    {
        try
        {
            _text = string.Empty;
            
            var trainingDto = new TrainingDto();

            var trainingPart = new TrainingPartDto
            {
                TrainingId = trainingDto.TrainingId,
                Description = "Index"
            };


            var trainingGroup = new TrainingGroupDto();

            foreach (var activity in _activitiesSelected)
            {
                trainingGroup.TrainingGroupActivities.Add(new TrainingGroupActivityDto
                    {
                        Activity = activity.MapToActivityDto(),
                        ActivityId = activity.ActivityId

                    });
            }
            
            trainingPart.TrainingGroups.Add(trainingGroup);

            trainingDto.TrainingParts.Add(trainingPart);

            await TrainingService.SaveTraining(trainingDto);
            StateHasChanged();

        }
        catch (Exception x)
        {
            _text = DateTime.Now + @"<br/>" + x.Message + @"<br/>" + x.InnerException?.InnerException?.Message;
        }


    }

    private void Find()
    {
        Random R = new Random();

    // get random number from 0 to 2. 
        int someRandomNumber = R.Next(0, _activities.Count());

        _activity = _activities.ElementAt( someRandomNumber);
    }

    private void Add()
    {
        _activitiesSelected.Add(_activity);
    }
    
    private void Pdf()
    {
        
            _pdfLink = PdfCreationService.CreatePdf(1).Result;

        


    }
}


