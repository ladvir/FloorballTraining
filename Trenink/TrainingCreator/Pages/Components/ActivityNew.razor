@using Microsoft.AspNetCore.Components
@using TrainingCreator.Data
@using TrainingDataAccess.Models
@using TrainingDataAccess.Services.ActivityServices
@using TrainingDataAccess.Services.TagServices
@using TinyMCE.Blazor
@inject IActivityService ActivityService
@inject ITagService TagService
@inject ISnackbar Snackbar


<MudPaper Style=" min-width:40vw;min-height: 60vh; overflow-y: auto" Class="align-stretch flex-grow-0 ">
    <MudGrid>
        <MudItem md="9">
            <MudPaper Class="d-flex flex-wrap gap-2 " Elevation="0">


                <MudDialog>
                    <DialogContent>
                        <MudGrid>
                            <MudItem md="12">


                                <MudTextField Label="Název" @bind-Value="Activity.Name" For="() => Activity.Name" HelperText="Alespoň 2 znaky" HelperTextOnFocus="true" FullWidth="true" />
                                <MudTextField Label="Popis" @bind-Value="Activity.Description" For="() => Activity.Description" Lines="6" Class="align-self-stretch" Variant="Variant.Outlined" />

                                
                            </MudItem>

                            <MudItem md="12">

                                @*Tags *@
                                <MudPaper Class="d-flex align-items-start flex-column flex-grow-1 gap-2 pa-1 " Elevation="0">

                                    <MudPaper Class="d-inline-flex gap-2 align-baseline" Elevation="0">
                                        <MudIcon Icon="fas fas-thin fa-tags" Size="Size.Small" Class="m-2" />
                                        <MudAutocomplete @ref="TagsAutocomplete"
                                                         T="Tag" Label="Štítky" @bind-Value="_tag"
                                                         SearchFunc="@Search" ToStringFunc="@(e => e == null ? null : $"{e.Name}")" Style="Width: 10vw" Class="pa-0" Dense="true"
                                                         AdornmentIcon="@Icons.Material.Filled.Search" OnKeyUp="AddCustomTag" SelectOnClick="true" CoerceValue="true" CoerceText="true"
                                                         Lines="30" Margin="Margin.Dense" Clearable="true"
                                                         ResetValueOnEmptyText="true" TextChanged="TagTextChanged" Variant="Variant.Outlined">

                                            <NoItemsTemplate>
                                                <MudText Align="Align.Center" Class="px-4 py-1">
                                                    Nenalezen žádný záznam
                                                </MudText>
                                            </NoItemsTemplate>

                                        </MudAutocomplete>
                                    </MudPaper>

                                    <MudPaper Class="d-flex flex-wrap gap-2 flex-grow-0" MaxWidth="50vw" Width="50vw" Elevation="0">
                                        <MudChipSet @ref="_mudChipSet" AllClosable="true" OnClose="Remove">
                                            @foreach (var tag in SelectedTags.OrderBy(t => t.ParentTagId))
                                            {
                                                <MudChip Value="@tag" Style="@($"background-color:{tag.Color}; color:white;font-size:0.8em;")" Variant="Variant.Text" Size="Size.Small">@tag.Name</MudChip>
                                            }
                                        </MudChipSet>
                                    </MudPaper>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </DialogContent>
                </MudDialog>
            </MudPaper>
        </MudItem>
        <MudItem md="3">
            <MudPaper Class="d-flex align-right justify-top mud-width-full pa-3 align-top" MaxHeight="600px" Style="max-height: 80vh;  overflow-y: auto;" Elevation="0">
                <TagsList Tags="_tags" SelectedValues="_selectedTagsIds" SelectedValuesChanged="Refresh" />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" Class="align-content-center py-2">
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">OK</MudButton>
        </MudItem>
    </MudGrid>


</MudPaper>



@code {

    private MudChipSet _mudChipSet = new MudChipSet();
    private Tag _tag = new Tag();
    public MudAutocomplete<Tag> TagsAutocomplete = new MudAutocomplete<Tag>();

    List<Tag> _tags = new();

    List<int> _selectedTagsIds = new();

    public List<Tag> SelectedTags => _tags.Where(t => _selectedTagsIds.Exists(st => st == t.TagId)).ToList();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public Activity Activity { get; set; } = new Activity();


    private Activity _activityBackup = null!;

    [Parameter]
    public RecordAction Action { get; set; }
    
    private async Task<IEnumerable<Tag>?> Search(string value)
    {
        if (string.IsNullOrEmpty(value)) return _tags.Where(t => t.IsLeaf);
        return await Task.Run(() => Filter(value));
    }

    private IEnumerable<Tag> Filter(string value)
    {
        return _tags.Where(x => x.Name != null && x.IsLeaf && x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Select(t => new Tag(t));
    }

    public void Refresh(List<int>? selectedTags)
    {
        if (selectedTags != null) Activity.Tags = _tags.Where(t => selectedTags.Any(st => st == t.TagId)).ToList();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _activityBackup = new Activity(Activity);        
    }

    protected override async Task OnParametersSetAsync()
    {
        var tagInDatabase = await TagService.GetAllTags();

        if (tagInDatabase != null) _tags = tagInDatabase;
        _selectedTagsIds = Activity.Tags.Select(t => t.TagId!.Value).ToList();
    }

    protected async Task Submit()
    {
        try
        {
            switch (Action)
            {
                case RecordAction.Insert:

                    await ActivityService.CreateActivity(Activity);
                    break;

                case RecordAction.Update:
                    await ActivityService.UpdateActivity(Activity);
                    break;


            }
            MudDialog.Close(DialogResult.Ok(Activity));

        }
        catch (Exception x)
        {
            Snackbar.Add($"Chyba {x.Message}", Severity.Error);
        }
    }

    void Cancel()
    {
        Activity = _activityBackup;
        MudDialog.Cancel();
    }

    private void Remove(MudChip obj)
    {
        var tag = (Tag)obj.Value;

        _selectedTagsIds.Remove(tag.TagId!.Value);

        foreach (var activityTag in Activity.Tags.Where(t => t.Name == tag.Name && t.TagId == tag.TagId))
        {
            Activity.Tags.Remove(activityTag);
        }
        StateHasChanged();

    }

    private async Task AddCustomTag(KeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "Enter" or "NumpadEnter":
                await InsertCustomTag(TagsAutocomplete.Text);

                Action = RecordAction.Update;

                break;
            case "Escape" or "Esc":
                break;
        }
        StateHasChanged();
    }

    private async Task InsertCustomTag(string tagName)
    {
        if (string.IsNullOrEmpty(tagName)) return;

        var parentTag = _tags.Single(t => t.IsCustomRoot);

        //existing custom tag
        var selectedTag = _tags.FirstOrDefault(t => t.Name == tagName && t.ParentTagId == parentTag.TagId);
        if (selectedTag != null)
        {
            RefreshTags(selectedTag);
            return;
        }

        //existing standard tag
        selectedTag = _tags.FirstOrDefault(t => t.Name == tagName);
        if (selectedTag != null)
        {
            RefreshTags(selectedTag);
            return;
        }
        //new tag
        var newTag = new Tag
            {
                Name = tagName,
                ParentTagId = parentTag.TagId
            };

        await TagService.CreateTag(newTag);
        _tags.Add(newTag);
        RefreshTags(newTag);

    }

    private void RefreshTags(Tag tag)
    {
        if (!_selectedTagsIds.Contains(tag.TagId!.Value)) _selectedTagsIds.Add(tag.TagId!.Value);


        if (!Activity.Tags.Exists(t => t.Name == tag.Name)) Activity.Tags.Add(tag);

        TagsAutocomplete.Clear();

        StateHasChanged();
    }


    private void TagTextChanged(string text)
    {
        if (text == string.Empty) return;

        var existingTag = _tags.FirstOrDefault(t => t.Name == text);


        if (existingTag != null)
        {
            RefreshTags(existingTag);
        }
    }

}
