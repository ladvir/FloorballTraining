@page "/activityNew"
@using TrainingDataAccess.Services.ActivityServices
@using TrainingDataAccess.Services.TagServices
@using Microsoft.AspNetCore.Components
@using TrainingDataAccess.Models
@using TrainingDataAccess.Dtos
@using TrainingCreator.Data
@inject IActivityService ActivityService
@inject ITagService TagService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager


<MudPaper Style=" min-width:40vw;min-height: 60vh; overflow-y: auto" Class="align-stretch flex-grow-0 ">
                                <MudTextField Label="Název" @bind-Value="_activity.Name" For="() => _activity.Name" HelperText="Alespoň 2 znaky" HelperTextOnFocus="true" FullWidth="true" />
                                <MudTextField Label="Popis" @bind-Value="_activity.Description" For="() => _activity.Description" Lines="6" Class="align-self-stretch" Variant="Variant.Outlined" />

                                @*Tags *@
                                <MudPaper Class="d-flex align-items-start flex-column flex-grow-1 gap-2 pa-1 " Elevation="0">

                                    <MudPaper Class="d-inline-flex gap-2 align-baseline" Elevation="0">
                                        <MudIcon Icon="fas fas-thin fa-tags" Size="Size.Small" Class="m-2" />
                                        <MudAutocomplete @ref="_tagsAutocomplete"
                                                         T="TagDto" Label="Štítky" @bind-Value="_tag"
                                                         SearchFunc="@Search" ToStringFunc="@(e => e == null ? null : $"{e.Name}")" Style="Width: 10vw" Class="pa-0" Dense="true"
                                                         AdornmentIcon="@Icons.Material.Filled.Search" OnKeyUp="AddCustomTag" SelectOnClick="true" CoerceValue="true" CoerceText="true"
                                                         Lines="30" Margin="Margin.Dense" Clearable="true"
                                                         ResetValueOnEmptyText="true" TextChanged="TagTextChanged" Variant="Variant.Outlined">

                                            <NoItemsTemplate>
                                                <MudText Align="Align.Center" Class="px-4 py-1">
                                                    Nenalezen žádný záznam
                                                </MudText>
                                            </NoItemsTemplate>

                                        </MudAutocomplete>
                                    </MudPaper>

                                    <MudPaper Class="d-flex flex-wrap gap-2 flex-grow-0" MaxWidth="50vw" Width="50vw" Elevation="0">
                                        <MudChipSet @ref="_mudChipSet" AllClosable="true" OnClose="Remove">
                                            @foreach (var tag in SelectedTags.OrderBy(t => t.ParentTagId))
                                            {
                                                <MudChip Value="@tag" Style="@($"background-color:{tag.Color}; color:white;font-size:0.8em;")" Variant="Variant.Text" Size="Size.Small">@tag.Name</MudChip>
                                            }
                                        </MudChipSet>
                                    </MudPaper>
                                </MudPaper>


        
            <MudPaper Class="d-flex align-right justify-top mud-width-full pa-3 align-top" MaxHeight="600px" Style="max-height: 80vh;  overflow-y: auto;" Elevation="0">
                <TagsList Tags="_tags" SelectedValues="_selectedTagsIds" SelectedValuesChanged="Refresh" />
            </MudPaper>
       
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">OK</MudButton>
</MudPaper>



@code {

    private MudChipSet _mudChipSet = new();
    private TagDto _tag = new();
    private MudAutocomplete<TagDto> _tagsAutocomplete = new();

    List<TagDto> _tags = new();

    List<int> _selectedTagsIds = new();

    public List<TagDto> SelectedTags => _tags.Where(t => _selectedTagsIds.Exists(st => st == t.TagId)).ToList();

    private ActivityDto _activity { get; set; } = new ActivityDto();
    private ActivityDto _activityBackup = null!;

    [Parameter]
    public RecordAction Action { get; set; }

    private async Task<IEnumerable<TagDto>?> Search(string value)
    {
        if (string.IsNullOrEmpty(value)) return _tags.Where(t => t.IsLeaf);
        return await Task.Run(() => Filter(value));
    }

    private IEnumerable<TagDto> Filter(string value)
    {
        return _tags.Where(x => x.Name != null && x.IsLeaf && x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Select(t => new TagDto(t));
    }

    public void Refresh(List<int>? selectedTags)
    {
        if (selectedTags != null) _activity.TagIds = _tags.Where(t => selectedTags.Any(st => st == t.TagId)).Select(t => t.TagId).ToList();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _activityBackup = new ActivityDto(_activity);
    }

    protected override async Task OnParametersSetAsync()
    {
        var tagInDatabase = await TagService.GetAllTags();

        _tags = tagInDatabase.Select(t=>t).ToList();
        _selectedTagsIds = _activity.TagIds.ToList();
    }

    protected async Task Submit()
    {
        try
        {
            await ActivityService.SaveActivity(_activity);
            NavigationManager.NavigateTo("/activities");
        }
        catch (Exception x)
        {
            Snackbar.Add($"Chyba {x.Message}", Severity.Error);
        }
    }

    void Cancel()
    {
        _activity = _activityBackup;

        NavigationManager.NavigateTo("activities");
    }

    private void Remove(MudChip obj)
    {
        var tag = (Tag)obj.Value;

        _selectedTagsIds.Remove(tag.TagId);

        foreach (var activityTag in _activity.TagIds.Where(t => t == tag.TagId))
        {
            _activity.TagIds.ToList().Remove(activityTag);
        }
        StateHasChanged();
    }

    private async Task AddCustomTag(KeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "Enter" or "NumpadEnter":
                await InsertCustomTag(_tagsAutocomplete.Text);

                Action = RecordAction.Update;

                break;
            case "Escape" or "Esc":
                break;
        }
        StateHasChanged();
    }

    private async Task InsertCustomTag(string tagName)
    {
        if (string.IsNullOrEmpty(tagName)) return;

        var parentTag = _tags.Single(t => t.IsCustomRoot);

        //existing custom tag
        var selectedTag = _tags.FirstOrDefault(t => t.Name == tagName && t.ParentTagId == parentTag.TagId);
        if (selectedTag != null)
        {
            RefreshTags(selectedTag);
            return;
        }

        //existing standard tag
        selectedTag = _tags.FirstOrDefault(t => t.Name == tagName);
        if (selectedTag != null)
        {
            RefreshTags(selectedTag);
            return;
        }
        //new tag
        var newTag = new TagDto();

        newTag.Name = tagName;
        newTag.ParentTagId = parentTag.TagId;
        newTag.ParentTag = parentTag;
        
        var tag = await TagService.CreateTag(newTag);
        _tags.Add(newTag);
        RefreshTags(newTag);

    }

    private void RefreshTags(TagDto tag)
    {
        if (!_selectedTagsIds.Contains(tag.TagId)) _selectedTagsIds.Add(tag.TagId);


        if (!_activity.TagIds.ToList().Exists(t => t == tag.TagId)) _activity.TagIds.Add(tag.TagId);

        _tagsAutocomplete.Clear();

        StateHasChanged();
    }


    private void TagTextChanged(string text)
    {
        if (text == string.Empty) return;

        var existingTag = _tags.FirstOrDefault(t => t.Name == text);


        if (existingTag != null)
        {
            RefreshTags(existingTag);
        }
    }

}
