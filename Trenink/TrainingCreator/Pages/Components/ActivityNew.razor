@using Microsoft.AspNetCore.Components
@using TrainingCreator.Models
@using TrainingDataAccess.Models
@using TrainingDataAccess.Services.ActivityServices
@using TrainingDataAccess.Services.TagServices
@inject IActivityService ActivityService
@inject ITagService TagService
@inject ISnackbar Snackbar

<EditForm Model="@NewActivity" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>
            <MudGrid >
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Název" @bind-Value="NewActivity.Name" For="() => NewActivity.Name" HelperText="Alespoň 3 znaky" />
                            <MudTextField Label="Popis" @bind-Value="NewActivity.Description" For="() => NewActivity.Description" />
                            <MudChipSet AllClosable="true" OnClose="RemoveTag">
                                @foreach (var tag in NewActivity.Tags)
                                {
                                    <MudChip Text="@tag.Name" Value="tag.TagId"/>
                                }
                            </MudChipSet>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Cancel">Cancel</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" >OK</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </DialogContent>
    </MudDialog>
    
    <MudChipSet AllClosable="true" OnClose="AddTag">
        @foreach (var tag in _tags)
        {
            <MudChip Text="@tag.Name" Value="tag.TagId" />
        }
    </MudChipSet>
    
    
    
    

</EditForm>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public Activity Activity { get; set; } = new Activity();

    public NewActivity NewActivity = new NewActivity();

    List<Tag> _tags = new List<Tag>();

    protected override async Task OnInitializedAsync()
    {
        _tags = await TagService.GetAllTags();
    }

    public void AddTag(MudChip chip)
    {
        Activity.Tags ??= new List<Tag>();

        Activity.Tags.Add(new Tag
        {

            TagId = (int)chip.Value,
            Name = chip.Text
        });
    }
    
    
    public void RemoveTag(MudChip chip)
    {
        if (Activity.Tags == null) return;

        foreach (var tagForRemoval in Activity.Tags.Where(t => t.TagId == (int)@chip.Value))
        {
            Activity.Tags.Remove(tagForRemoval);
        }
    }

    private async Task InsertNewActivity(NewActivity newActivity)
    {
        Activity = new Activity
            {
                Name = newActivity.Name,
                Description = newActivity.Description,
                Tags = newActivity.Tags
            };
        await ActivityService.CreateActivity(Activity);
    }



    protected async Task Submit()
    {
        StateHasChanged();

        try
        {
            await InsertNewActivity(NewActivity);
            MudDialog.Close(DialogResult.Ok(Activity));

        }
        catch (Exception x)
        {
            Snackbar.Add($"Chyba {x.Message}", Severity.Error);

        }
    }

    void Cancel() => MudDialog.Cancel();
}
