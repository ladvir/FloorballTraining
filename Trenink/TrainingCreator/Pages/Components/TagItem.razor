@using System.Text.RegularExpressions
@using TrainingDataAccess.Dtos
@using TrainingDataAccess.Models

@if (Tag.Children != null && Tag.Children.Any())
{
    <MudListItem Text="@Tag.Name" InitiallyExpanded="true" Dense="true" Class="@($"ma-0 py-0 pr-0 pl-{2*Tag.Level} ")" Style="font-weight: bold;">
        <NestedList >
            @if (Tag.Children != null)
            {
                foreach (var subTag in Tag.Children)
                {
                    <TagItem Tag="@subTag"/>
                }
            }
        </NestedList>
    </MudListItem>
}
else
{
    <MudListItem Value="@Tag.TagId" Style="@_colorStyle" InitiallyExpanded="ContainsSelectedTags" OnClick="Clicked" Dense="true" Class="@($"ma-0 py-0 pr-0 pl-{2*Tag.Level}")">
        <MudText Typo="Typo.caption">@Tag.Name</MudText>
    </MudListItem>
}

@code {
    
    [Parameter]
    public TagDto Tag { get; set; } = null!;
    
    

    [CascadingParameter]
    public List<int> SelectedValues { get; set; } = null!;

    [CascadingParameter]
    public TagTree Parent { get; set; } = null!;

    private string _colorStyle = string.Empty;

    protected override void OnParametersSet() { 
        UpdateSelectedValues(false);
        base.OnParametersSet();
    }

    void ToggleTag()
    {
        Tag.IsExpanded = !Tag.IsExpanded;
    }

    private void UpdateSelectedValues(bool switchState)
    {
        if (Tag.Name == TagDto.CustomRootTagName) return; 

        var isSelected = SelectedValues.Contains(Tag.TagId);



        //isSelected = switchState ^ isSelected;
        _colorStyle = $"background-color:{(isSelected ? Tag.Color : Color.Info)}";

        StateHasChanged();

        //switch (isSelected)
        //{
        //    case true when !SelectedValues.Contains(Tag.TagId):
        //        SelectedValues.Add(Tag.TagId);
        //        break;
        //    case false when SelectedValues.Contains(Tag.TagId):
        //        SelectedValues.Remove(Tag.TagId);
        //        break;
        //}
    }

    private void Clicked()
    {
        if (SelectedValues.Contains(Tag.TagId))
        {
            SelectedValues.Remove(Tag.TagId);
        }
        else
        {
            SelectedValues.Add(Tag.TagId);
        }

        UpdateSelectedValues(true);
        Parent.Refresh();
    }

    public bool ContainsSelectedTags
    {
        get { 
            return Tag.Children != null && Tag.Children.Any(c => SelectedValues.Contains(c.TagId));
        }
    }

}