@using TrainingDataAccess.Services.ActivityServices
@using Microsoft.AspNetCore.Components
@using TrainingDataAccess.Models
@using TrainingDataAccess.Services.TagServices
@inject IActivityService ActivityService
@inject ITagService TagService
@inject ISnackbar Snackbar

<EditForm Model="@Activity" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>
            <MudGrid >
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Název" @bind-Value="Activity.Name" For="() => Activity.Name" HelperText="Alespoň 3 znaky" />
                            <MudTextField Label="Popis" @bind-Value="Activity.Description" For="() => Activity.Description" />
                            <MudPaper>
                                @foreach (var tag in Activity.Tags??=new List<Tag>())
                                {
                                    <MudChip Text="@tag.Name" Value="tag.TagId" OnClick="@(() => RemoveTag(tag))" />
                                }
                            </MudPaper>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Cancel">Cancel</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" >OK</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </DialogContent>
    </MudDialog>
    
    
    <MudPaper>
        @foreach (var tag in _tags)
        {
            <MudChip Text="@tag.Name" Value="tag.TagId" OnClick="@(() => AddTag(tag))" />
        }
    </MudPaper>
    
    
</EditForm>

@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public Activity Activity { get; set; } = new Activity();

    

    private List<Tag> _tags = new List<Tag>();

    protected override async Task OnInitializedAsync()
    {

        Activity = await ActivityService.GetActivity(Activity.ActivityId);
        _tags = await TagService.GetAllTags();


        _tags = _tags.Except(Activity.Tags, new TagComparer()).ToList();
    }

    public void AddTag(Tag tag)
    {
        Activity.Tags ??= new List<Tag>();

        Activity.Tags.Add(tag);
        _tags.Remove(tag);

        StateHasChanged();
    }

    public void RemoveTag(Tag tag)
    {
        Activity.Tags.Remove(tag);
        _tags.Add(tag);
        StateHasChanged();
    }

    protected async Task Submit()
    {
        try
        {
            await ActivityService.UpdateActivity(Activity);
            MudDialog.Close(DialogResult.Ok(Activity));

        }
        catch (Exception x)
        {
            Snackbar.Add($"Chyba {x.Message}", Severity.Error);

        }
    }

    void Cancel()
    {
        MudDialog.Cancel();
    } 
}
