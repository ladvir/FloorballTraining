@using TrainingDataAccess.Services.ActivityServices
@using Microsoft.AspNetCore.Components
@using TrainingDataAccess.Models
@using TrainingDataAccess.Services.TagServices
@inject IActivityService ActivityService
@inject ITagService TagService
@inject ISnackbar Snackbar

<link href="https://use.fontawesome.com/releases/v5.14.0/css/all.css" rel="stylesheet">

<div class="d-flex flex-grow-1 gap-1">
    <MudPaper Class="flex-auto d-flex py-8 " Width="80%" Elevation="0">
        <EditForm Model="@Activity" OnValidSubmit="@Submit" >
            <DataAnnotationsValidator />
            <MudDialog >
                <DialogContent>
                            <MudCard>
                                <MudCardContent>
                            <MudTextField Label="Název" @bind-Value="Activity.Name" For="() => Activity.Name" HelperText="Alespoň 3 znaky" HelperTextOnFocus="true" />
                            <MudTextField Label="Popis" @bind-Value="Activity.Description" For="() => Activity.Description" Lines="15" />
                                    <MudPaper Class="flex-none " Width="240px" MinHeight="100px" Elevation="0">
                                        <MudCard Elevation="0">
                                            
                                            
                                                <MudPaper Class="d-flex flex-wrap gap-1" MaxWidth="528px" Elevation="0">
                                                    <MudIcon Icon="fas fas-thin fa-tags" Size="Size.Small" />

                                                    @if (Activity.Tags != null)
                                                    {
                                                        <MudChipSet @ref="@_mudChipSet" AllClosable="true" OnClose="Remove">
                                                            @foreach (var tag in Activity.Tags)
                                                            {
                                                                <MudChip Value="@tag" Style="@($"background-color:{tag.Color}; color:white;")" Variant="Variant.Text">@tag.Name</MudChip>
                                                            }
                                                        </MudChipSet>
                                                    }

                                                    <MudTextField @bind-Value="NewTagName" Variant="Variant.Text" Margin="Margin.Dense" OnKeyUp="AddCustomTag" @bind-Text="NewTagName" FullWidth="false" Style="Width: 200px" />
                                                </MudPaper>
                                            
                                        </MudCard>
                                    </MudPaper>


                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton ButtonType="ButtonType.Reset" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Cancel">Cancel</MudButton>
                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" >OK</MudButton>
                                </MudCardActions>
                            </MudCard>
                </DialogContent>
            </MudDialog>
        </EditForm>
    </MudPaper>

    <MudDivider Vertical="true" FlexItem="true" />

    @*<TagsList Tags="_tags.ToHashSet()" Action="@(AddTag)" SelectedValues="Activity.Tags.ToHashSet()" />*@
    
</div>

@code {
    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public Activity Activity { get; set; } = new Activity();

    
    private MudChipSet? _mudChipSet = new MudChipSet();

    public string NewTagName = string.Empty;
    private List<Tag>? _tags = new List<Tag>();
    public void Refresh(List<Tag>? xxx)
    {
        Activity.Tags = xxx;
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {

        Activity = await ActivityService.GetActivity(Activity.ActivityId);
        _tags = await TagService.GetAllTags();


        if (Activity.Tags != null) _tags = _tags.Except(Activity.Tags, new TagComparer()).ToList();
    }
    

    protected async Task Submit()
    {
        try
        {
            await ActivityService.UpdateActivity(Activity);
            MudDialog.Close(DialogResult.Ok(Activity));

        }
        catch (Exception x)
        {
            Snackbar.Add($"Chyba {x.Message}", Severity.Error);

        }
    }

    private void Remove(MudChip obj) => Activity.Tags?.Remove((Tag)obj.Value);

    private async Task AddCustomTag(KeyboardEventArgs e)
    {
        switch (e.Code)
        {
            case "Enter" or "NumpadEnter":
                await InsertCustomTag();
                break;
            case "Escape" or "Esc":
                NewTagName = string.Empty;
                break;
        }
    }

    private async Task InsertCustomTag()
    {
        if (string.IsNullOrEmpty(NewTagName)) return;

        var parentTag = _tags?.Single(t => t.IsCustomRoot);

        var newTag = new Tag
            {
                Name = NewTagName,
                ParentTagId = parentTag?.TagId
            };

        await TagService.CreateTag(newTag);

        _tags?.Add(newTag);

        Activity.Tags?.Add(newTag);

        NewTagName = string.Empty;
    }

    void Cancel()
    {
        MudDialog.Cancel();
    } 
}
