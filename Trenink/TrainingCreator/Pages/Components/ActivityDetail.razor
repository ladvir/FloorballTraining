@page "/activityDetail/{activityid?}"
@using TrainingDataAccess.Services.ActivityServices
@using TrainingDataAccess.Services.TagServices
@using Microsoft.AspNetCore.Components
@using TrainingDataAccess.Dtos
@using TrainingCreator.Data
@inject IActivityService ActivityService
@inject ITagService TagService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<EditForm Model="@Activity" OnValidSubmit="Submit">
    
    <DataAnnotationsValidator/>
    <MudPaper Elevation="0" Class="d-flex flex-wrap">
        @*Field*@
        <MudPaper Elevation="0" >
    
            <MudTextField Label="Název" @bind-Value="Activity.Name" For="() => Activity.Name"  />
            <MudTextField Label="Popis" @bind-Value="Activity.Description" For="() => Activity.Description" Lines="6" Variant="Variant.Outlined" Margin="Margin.Dense" Class="my-5" />

            <MudPaper Elevation="0" Class="d-inline-flex gap-4">
                <MudPaper Elevation="0">
                    <MudText>Počet osob: @Persons</MudText>
                    <RangeSlider @bind-ValueHigh="Activity.PersonsMax" @bind-ValueLow="Activity.PersonsMin" MinValue="0" MaxValue="30"/>
                </MudPaper>

                <MudPaper Elevation="0">
                    <MudText>Doba trvání: @Duration</MudText>
                    <RangeSlider @bind-ValueHigh="Activity.DurationMax" @bind-ValueLow="Activity.DurationMin" MinValue="1" MaxValue="30"/>
                </MudPaper>
            </MudPaper>
        
            <MudPaper Class="d-flex flex-wrap my-2" MaxWidth="50vw" Width="50vw" Elevation="0" >
                <MudChipSet @bind-ref="_mudChipSet" AllClosable="true" OnClose="Remove">
                    @foreach (var tag in SelectedTags.OrderBy(t => t.ParentTagId))
                    {
                        <MudChip Value="@tag" Style="@($"background-color:{tag.Color}; color:white;font-size:0.8em;")" Variant="Variant.Text" Size="Size.Small">@tag.Name</MudChip>
                    }
                </MudChipSet>
            </MudPaper>
        
        </MudPaper>
        @*Tags *@
        @*<MudPaper Elevation="0" Class="align-stretch flex-grow-0 my-0" >*@
            <MudPaper Class="d-flex align-right justify-top pa-3 " Style="height: 60vh; overflow-y: auto;" Elevation="0">
                <TagsList Tags="_tags" SelectedValues="SelectedTags.Select(t=>t.TagId).ToList()" SelectedValuesChanged="Refresh" />
            </MudPaper>
        @*</MudPaper>*@
    </MudPaper>
    
    @*Buttons*@
    <MudPaper Elevation="0" Class="d-inline-flex my-2">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Cancel">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onkeypress:preventDefault>OK</MudButton>
    </MudPaper>
</EditForm>

@code {
    [Parameter]
    public string ActivityId { get; set; } = string.Empty; 

    public List<TagDto> SelectedTags => _tags.Where(t => Activity.AcitvityTags.Any(st => st.TagId == t.TagId)).ToList();

    private MudChipSet _mudChipSet = new();
    private List<TagDto> _tags = new();

    private ActivityDto Activity { get; set; } = new ();
    private string Persons => StringExtentions.GetRangeString(Activity.PersonsMin.GetValueOrDefault(0), Activity.PersonsMax.GetValueOrDefault(0));
    private string Duration => StringExtentions.GetRangeString(Activity.DurationMin.GetValueOrDefault(0), Activity.DurationMax.GetValueOrDefault(0));

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(ActivityId))
        {
            var activityId = int.Parse(ActivityId);
            Activity = await ActivityService.GetActivity(activityId);
        }

        _tags = await TagService.GetAllTags();

        StateHasChanged();
    }

    public void Refresh(List<int>? selectedTags)
    {
        if (selectedTags == null) return;


        var tags = _tags.Where(t => selectedTags.Any(st => st == t.TagId)).Select(t => t);

        foreach (var tag in tags)
        {
            Activity.AcitvityTags.Add( new ActivityTagDto
            {
                ActivityId = Activity.ActivityId,
                Activity = Activity,
                Tag = tag,
                TagId = tag.TagId

            });
        }

    }

    protected async Task Submit()
    {
        try
        {
            await ActivityService.SaveActivity(Activity);
            NavigationManager.NavigateTo("/activities");
        }
        catch (Exception x)
        {
            Snackbar.Add($"Chyba {x.Message}", Severity.Error);
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("activities");
    }

    private void Remove(MudChip obj)
    {
        var tag = (ActivityTagDto) obj.Value;

        var index = SelectedTags.FindIndex(s => s.TagId == tag.TagId);

        SelectedTags.RemoveAt(index);

        foreach (var activityTag in Activity.AcitvityTags.Where(t => t.TagId == tag.TagId))
        {
            Activity.AcitvityTags.Remove(activityTag);
        }
    }
}
