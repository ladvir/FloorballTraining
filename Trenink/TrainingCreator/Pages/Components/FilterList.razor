@typeparam TItem

<input @bind=_filter @bind:event="oninput" />
@foreach (TItem item in GetFilteredItems())
{
    if (ChildContent == null)
    {
        <li>@item?.ToString()</li>
    }
    else
    {
        @ChildContent(item);
    }
}

@code {
    [Parameter]
    public IEnumerable<TItem>? Items { get; set; }

    [Parameter]
    public Func<TItem, string>? GetFilterableText { get; set; }

    [Parameter]
    public RenderFragment<TItem>? ChildContent { get; set; }

    private string? _filter;
    private static readonly Func<TItem, string> DefaultGetFilterableText =
        item => (item?.ToString() ?? "");


    private IEnumerable<TItem> GetFilteredItems()
    {
        IEnumerable<TItem> result = (Items ?? Array.Empty<TItem>());
        if (!string.IsNullOrEmpty(_filter))
        {
            result = result
                .Where(x =>
                    (GetFilterableText?.Invoke(x) ?? "")
                        .Contains(_filter, StringComparison.InvariantCultureIgnoreCase));
        }
        return result;
    }

}