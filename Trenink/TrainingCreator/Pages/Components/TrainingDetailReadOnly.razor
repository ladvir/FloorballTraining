
@using TrainingDataAccess.Dtos
@using TrainingDataAccess.Services.TrainingServices

@inject ITrainingService TrainingService

<MudDialog >
    
    <DialogContent>
        <MudPaper Class="align-stretch flex-grow-0 " Elevation="0">
            <MudText Class="d-flex justify-content-start flex-wrap my-4 ">@Training.Name</MudText>
            <MudText Class="d-flex justify-content-start flex-wrap my-4 ">@Training.Description</MudText>
            
            <MudText Class="d-flex justify-content-start flex-wrap my-4 ">@Training.Persons</MudText>
            <MudText Class="d-flex justify-content-start flex-wrap my-4 ">@Training.Duration</MudText>
            

            @*TrainingParts *@
            <MudPaper Class="d-flex align-items-start flex-column flex-grow-1 gap-2 pa-1 my-4 " Elevation="0">

                @foreach (var trainingPart in Training.TrainingParts)
                {
                    <MudText>@trainingPart.Name</MudText>
                    <MudText>@trainingPart.Description</MudText>
                    <MudText>@trainingPart.Duration</MudText>
                    <MudSpacer/>
                }
            </MudPaper>
        </MudPaper>
    </DialogContent>
    
    <DialogActions>
        <MudPaper Class="align-content-center pa-2" Elevation="0"> 
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Close">Zavřít</MudButton>

        </MudPaper>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public TrainingDto Training { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Training = await TrainingService.GetTraining(Training.TrainingId);
    }

    void Close()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
}