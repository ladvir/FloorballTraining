@using TrainingDataAccess.Models
@using TrainingDataAccess.Services.ActivityServices
@using TrainingDataAccess.Services.TagServices

@inject ITagService TagService

<MudDialog >
    
    <DialogContent>
        <MudPaper Class="align-stretch flex-grow-0 " Elevation="0">
            <ActivityCountersOverview Activity="Activity"/>
            
            <MudText Class="d-flex justify-content-start flex-wrap my-4 ">@Activity.Description</MudText>

            @*Tags *@
            <MudPaper Class="d-flex align-items-start flex-column flex-grow-1 gap-2 pa-1 my-4 " Elevation="0">
                <MudChipSet >
                        @foreach (var tag in _tags.OrderBy(t => t.ParentTagId))
                        {
                            <MudChip Value="@tag" Style="@($"background-color:{tag.Color}; color:white;font-size:0.8em;")" Variant="Variant.Text" Size="Size.Small">@tag.Name</MudChip>
                        }
                    </MudChipSet>
            </MudPaper>

            

        </MudPaper>
    </DialogContent>
    
    <DialogActions>
        <MudPaper Class="align-content-center pa-2" Elevation="0"> 
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Close">Zavřít</MudButton>

        </MudPaper>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public ActivityDto Activity { get; set; } = new ActivityDto();

    private List<Tag> _tags = new List<Tag>();

    protected override async Task OnInitializedAsync()
    {
        var tags =  await TagService.GetAllTagsByIds(Activity.TagIds);

        _tags = tags.Select(t => new Tag
        {
            TagId = t.TagId,
            Name = t.Name,
            Color = t.Color,
            ParentTagId = t.ParentTagId



        }).ToList();

    }


    void Close()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
}
