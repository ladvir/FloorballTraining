@using TrainingDataAccess.Models
@using TrainingCreator.Data
@using TrainingCreator.Shared
@using TrainingDataAccess.Dtos
@using TrainingDataAccess.Services.TagServices
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject ITagService TagService
<MudPaper Elevation="0">
    <MudList Clickable="@true" Dense="@true">
        <MudListSubheader DisableGutters="true">
            <MudTextField T="string" @bind-Text="@SearchTerm" Variant="@Variant.Text" Adornment="@Adornment.Start" Clearable="true" OnClearButtonClick="Clear"
                          AdornmentIcon="@Icons.Material.Filled.Search" HelperText="Hledej" OnKeyPress="KeyHandler" OnKeyUp="KeyUpHandler" />

            @if (!string.IsNullOrEmpty(SearchTerm) && !GetFilteredItems().Any(t => t.IsLeaf))
            {
                <MudButton OnClick="() => AddNewTag(SearchTerm)">Přidej</MudButton>
            }
        </MudListSubheader>
        @foreach (var tag in GetFilteredItems())
        {
            <CascadingValue Value="this">
                <CascadingValue Value="@SelectedValues">
                    <TagItem Tag="@tag" />
                </CascadingValue>
            </CascadingValue>
        }
    </MudList>
</MudPaper>

@code {

    [Parameter]
    public List<TagDto> Tags { get; set; } = new();

    [Parameter]
    public List<int> SelectedValues { get; set; } = new();

    [CascadingParameter]
    public TagsList Parent { get; set; } = null!;


    private string SearchTerm { get; set; } = "";

    private List<TagDto> _backupOriginalTags = new();

    protected override async Task OnParametersSetAsync()
    {

        RefreshData();
        await base.OnParametersSetAsync();
    }

    private List<TagDto> GetFilteredItems()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            return _backupOriginalTags.Where(t => t.ParentTagId == null).ToList();
        }

        var foundTags = _backupOriginalTags.Where(x => x.Name.Contains(SearchTerm, StringComparison.InvariantCultureIgnoreCase)).Select(t => new TagDto(t)).ToList();
        var result = BuildTree(foundTags);

        return result.OrderBy(r => r.Name).ToList();
    }

    private List<TagDto> BuildTree(List<TagDto> tags)
    {
        if (!tags.Any()) return new List<TagDto>();
        var result = new List<TagDto>();

        var maxLevel = tags.Max(t => t.Level);

        foreach (var tag in tags.Where(t => t.Level <= maxLevel))
        {
            if (!tag.IsRoot)
            {
                var parentTagId = tag.ParentTagId;



                var parent = Tags.First(t => t.TagId == parentTagId);

                var children = tags.Where(t => t.ParentTagId == parentTagId).ToList();

                parent.Children = children;

                if (!result.Contains(parent)) result.Add(parent);

                result = BuildTree(result);
            }
            else
            {
                if (result.All(t => t.TagId != tag.TagId)) result.Add(tag);
            }
        }

        return result;
    }

    private async Task AddNewTag(string tagName)
    {

        if (string.IsNullOrEmpty(tagName)) return;

        var parentTag = Tags.Single(t => t.IsCustomRoot);

        //existing custom tag
        var selectedTag = Tags.FirstOrDefault(t => t.Name == tagName && t.ParentTagId == parentTag.TagId);
        if (selectedTag != null)
        {
            RefreshTags(selectedTag);
            return;
        }

        //existing standard tag
        selectedTag = Tags.FirstOrDefault(t => t.Name == tagName);
        if (selectedTag != null)
        {
            RefreshTags(selectedTag);
            return;
        }
        //new tag
        var newTag = new TagDto
            {
                Name = tagName,
                ParentTagId = parentTag.TagId,
                ParentTag = parentTag
            };

        var tag = await TagService.CreateTag(newTag);

        newTag.TagId = tag.TagId;

        RefreshTags(newTag);
        Refresh();
        RefreshData();

    }

    private void RefreshTags(TagDto tag)
    {
        SelectedValues.Add(tag.TagId);
        Tags.Add(tag);
    }

    private void RefreshData()
    {
        SearchTerm = string.Empty;

        _backupOriginalTags = Tags.Select(tag => new TagDto(tag)).ToList();
        GetFilteredItems();
    }

    public void Refresh()
    {
        Parent.Refresh(Tags, SelectedValues);
    }

    void KeyHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            return;
        }
        var key = args.Key;
        SearchTerm += key;
    }

    void KeyUpHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Backspace" && SearchTerm.Length >= 1)
        {
            SearchTerm = SearchTerm.Substring(0,
                SearchTerm.Length - 1);
        }
    }

    void Clear()
    {
        SearchTerm = string.Empty;
    }
}
