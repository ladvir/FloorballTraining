@*@page "/trainingNew"
@using TrainingDataAccess.Services.TrainingServices
@using TrainingDataAccess.Services.ActivityServices
@using TrainingDataAccess.Services.TagServices
@using Microsoft.AspNetCore.Components
@using TrainingDataAccess.Dtos
@using TrainingCreator.Data
@inject ITrainingService TrainingService
@inject IActivityService ActivityService
@inject ITagService TagService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar


<MudPaper Elevation="0">
    <MudText Typo="Typo.h4">Nový trénink</MudText>


    <MudPaper Class="d-flex flex-column " Elevation="0">
        <MudTextField Label="Název" @bind-Value="Training.Name" Style="max-width:20vw;" Variant="Variant.Outlined" Class="ma-0 pa-0"/>
        <MudTextField Label="Zaměření" @bind-Value="Training.Description" Style="max-width:20vw;" For="() => Training.Description" Lines="2" Class="ma-0 pa-0" Variant="Variant.Outlined" />
    </MudPaper>

<MudPaper Class="d-inline-flex gap-1" Elevation="0">
    <MudTextField Label="Počet osob" @bind-Value="Training.Persons" Style="max-width:5vw;" InputMode="InputMode.numeric" For="() => Training.Persons" Class="align-self-stretch " Variant="Variant.Outlined" T="int" />
    <MudTextField Label="Délka trvání" @bind-Value="Training.Duration" Style="max-width:5vw;" For="() => Training.Duration" Class="align-self-stretch" Variant="Variant.Outlined" T="int" />
</MudPaper>

<MudPaper Class="" Elevation="0">
    <MudPaper Class="d-inline-flex" Elevation="0">
    <MudText Typo="Typo.h5">Tréninkové části</MudText>
    <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Success"
                   OnClick="()=>AddTrainingPart()" 
                   DisableElevation="true" Variant="Variant.Filled" />
                   </MudPaper>
    @foreach (var trainingPart in Training.TrainingParts)
    {
        <MudPaper Elevation="25">
            <MudToolBar>
                <MudIconButton Icon="@Icons.Material.Sharp.DragHandle" Color="Color.Inherit" Class="mr-5"/>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Sharp.Edit" />
                <MudIconButton Icon="@Icons.Material.Sharp.DeleteForever" OnClick="() => Training.TrainingParts.Remove(trainingPart)" />
            </MudToolBar>


                <MudRadioGroup T="int" @bind-SelectedOption="@trainingPart.TrainingPartType">
                    
                @foreach (var trainignPartTag in _trainingPartsTags)
                {
                        <MudRadio Option="@(trainignPartTag.TagId)">@trainignPartTag.Name</MudRadio>
                }
                </MudRadioGroup>
            
            <MudTextField Label="Název" Style="max-width:5vw;" @bind-Value="trainingPart.Name" />
            <MudTextField Label="Popisek" Style="max-width:5vw;" @bind-Value="trainingPart.Description" />

            <MudPaper Class="d-inline-flex" Elevation="0">
                <MudText Typo="Typo.subtitle1"> Aktivity</MudText> 
                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Success"
                               OnClick="() => AddSelectedActivity(trainingPart)" DisableElevation="true" Variant="Variant.Filled"/>
                               
            </MudPaper>
                <MudList>
                    @foreach (var trainingPartActivity in trainingPart.Activities)
                    {
                        <MudListItem>@trainingPartActivity.Name</MudListItem>
                    }
                </MudList>

            </MudPaper>
    }
</MudPaper>

<MudPaper Class="" Elevation="0">
    <MudPaper Class="d-flex " Elevation="0">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/trainings"))">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">OK</MudButton>
    </MudPaper>
</MudPaper>
</MudPaper>

@code {

    [Parameter]
    public TrainingDto Training { get; set; } = new TrainingDto();

    [Parameter]
    public List<ActivityDto> Activities { get; set; } = new List<ActivityDto>();


    private long _trainingsCount;
    private RecordAction _action = RecordAction.Insert;

    private List<TagDto> _trainingPartsTags = new List<TagDto>();

    private TrainingDto _trainingBackup = null!;

    private Dictionary<string, int> _trainingPartsType = new Dictionary<string, int>();
    

    protected override async Task OnInitializedAsync()
    {
        if (!Activities.Any())
        {
            Activities = await ActivityService.GetAllActivities();
        }
        _trainingPartsTags = await TagService.GetTagsByParentName("Tréninková část");

        //_trainingsCount = await TrainingService.GetTrainingsCount();

        Training = new TrainingDto("Trénink - " + _trainingsCount);

        if (Training.TrainingId == 0)
        {
            _trainingBackup = new TrainingDto();
            _action = RecordAction.Insert;
        }
        else
        {
            _trainingBackup = new TrainingDto(Training);
            _action = RecordAction.Update;
        }
    }

    protected async Task Submit()
    {
        _action = RecordAction.Insert;

        
        try
        {
            //switch (_action)
            //{
            //    case RecordAction.Insert:

            //        await TrainingService.CreateTraining(Training);
            //        break;

            //    case RecordAction.Update:
            //        await TrainingService.UpdateTraining(Training);
            //        break;



            //}
            NavigationManager.NavigateTo("/trainings");

        }
        catch (Exception x)
        {
            Snackbar.Add($"Chyba {x.Message} - {x.InnerException?.Message}", Severity.Error);
        }
    }

    
   

    private async Task AddSelectedActivity(TrainingPartDto trainingPart)
    {
        try
        {
            var random = new Random();

            var activitiesForGivenPart = Activities
                .Where(a => a.TagIds.Any(t => t == trainingPart.TrainingPartType));


            var availableActivity = activitiesForGivenPart.
                Where(a => trainingPart.Activities.All(ta => ta.ActivityId != a.ActivityId)).ToList();

            if (!availableActivity.Any())
            {
                throw new Exception("Žádné další aktivity k dispozici");
            }
            var index = random.Next(availableActivity.Count());

            var activity = availableActivity[index];
            
            trainingPart.Activities.Add(activity);

            Training.SetValuesBasedOnActivities();
        }
        catch (Exception x)
        {
            Snackbar.Add(x.Message);
        }
    }

   
    private void AddTrainingPart()
    {
        var trainigPartName = $"{Training.Name} - {Training.TrainingParts.Count}";
        Training.TrainingParts.Add(new TrainingPartDto(trainigPartName));

        


    }

}
*@