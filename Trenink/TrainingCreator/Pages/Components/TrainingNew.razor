@using Microsoft.AspNetCore.Components
@using TrainingCreator.Data
@using TrainingDataAccess.Models
@using TrainingDataAccess.Services.TrainingServices
@inject ITrainingService TrainingService

@inject ISnackbar Snackbar


<MudPaper Style=" min-width:40vw;min-height: 60vh; overflow-y: auto" Class="align-stretch flex-grow-0 ">
    <MudGrid>
        <MudItem md="9">
            <MudPaper Class="d-flex flex-wrap gap-2 " Elevation="0">


                <MudDialog>
                    <DialogContent>
                        <MudGrid>
                            <MudItem md="12">


                                <MudTextField Label="Název" @bind-Value="Training.Name" For="() => Training.Name" HelperText="Alespoň 2 znaky" HelperTextOnFocus="true" FullWidth="true" />
                                <MudTextField Label="Popis" @bind-Value="Training.Description" For="() => Training.Description" Lines="6" Class="align-self-stretch" Variant="Variant.Outlined" />
                                


                            </MudItem>

                            <MudItem md="3">
                                <MudTextField Label="Počet osob" @bind-Value="Training.Persons" For="() => Training.Persons" Class="align-self-stretch" Variant="Variant.Outlined" T="int" />
                                <MudTextField Label="Délka trvání" @bind-Value="Training.Duration" For="() => Training.Duration" Lines="6" Class="align-self-stretch" Variant="Variant.Outlined" T="int"/>
                                <MudTextField Label="Počet trenérů" @bind-Value="Training.CoachCount" For="() => Training.CoachCount" Lines="6" Class="align-self-stretch" Variant="Variant.Outlined" T="int" />
                                <MudTextField Label="Místo" @bind-Value="Training.Place" For="() => Training.Place" Lines="6" Class="align-self-stretch" Variant="Variant.Outlined" />
                            </MudItem>
                            
                            <MudItem xs="12">
                                <MudText Typo="Typo.h3">Tréninkové části</MudText>
                                
                                @*
                                
                                <MudDropContainer T="Activity" @ref="_dropContainer" Items="@Training.TrainingParts.SelectMany(tp=>tp.Activities)"
                                    
                                                  ItemDropped="TaskUpdated" Class="d-flex flex-row">
                                    <ChildContent>
                                        @foreach (var trainingPart in Training.TrainingParts)
                                        {
                                            <MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                                                <MudToolBar DisableGutters="true">
                                                    <MudText Typo="Typo.subtitle1"><b>@trainingPart.Name</b></MudText>
                                                    <MudSpacer />
                                                    <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                                        <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteSection(trainingPart))">Smazat</MudButton>
                                                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Přejmenovat</MudButton>
                                                    </MudMenu>
                                                </MudToolBar>
                                                <MudDropZone T="Activity" Identifier="@trainingPart.Name" Class="mud-height-full" />
                                                @if (trainingPart.NewTaskOpen)
                                                {
                                                    <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                                                        <MudTextField @bind-Value="trainingPart.NewTaskName" Placeholder="New Task" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                                                        <MudButton OnClick="@(() => AddTask(trainingPart))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
                                                    </MudPaper>
                                                }
                                                else
                                                {
                                                    <MudButton OnClick="@(() => trainingPart.NewTaskOpen = !trainingPart.NewTaskOpen)" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
                                                }
                                            </MudPaper>
                                        }
                                        <MudPaper Class="pa-4" Elevation="0" Width="224px">
                                            @if (_addSectionOpen)
                                            {
                                                <MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
                                                    <EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
                                                        <DataAnnotationsValidator />
                                                        <MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Section" DisableUnderLine="true"></MudTextField>
                                                        <MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
                                                    </EditForm>
                                                </MudPaper>
                                            }
                                            else
                                            {
                                                <MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
                                            }
                                        </MudPaper>
                                    </ChildContent>
                                    <ItemRenderer>
                                        <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Name</MudPaper>
                                    </ItemRenderer>
                                </MudDropContainer>*@
                                
                                
                                


                            </MudItem>

                        </MudGrid>
                    </DialogContent>
                </MudDialog>
            </MudPaper>
        </MudItem>
        
        <MudItem xs="12" Class="align-content-center py-2">
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">OK</MudButton>
        </MudItem>
    </MudGrid>


</MudPaper>



@code {

    
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();

    [Parameter] public Training Training { get; set; } 

    private Training _trainingBackup = null!;

    [Parameter]
    public RecordAction Action { get; set; }
    
    private MudDropContainer<Activity>? _dropContainer;


    protected override void OnInitialized()
    {
        _trainingBackup = new Training(Training);
    }

    protected async Task Submit()
    {
        try
        {
            switch (Action)
            {
                case RecordAction.Insert:

                    await TrainingService.CreateTraining(Training);
                    break;

                case RecordAction.Update:
                    await TrainingService.UpdateTraining(Training);
                    break;


            }
            MudDialog.Close(DialogResult.Ok(Training));

        }
        catch (Exception x)
        {
            Snackbar.Add($"Chyba {x.Message}", Severity.Error);
        }
    }

    void Cancel()
    {
        Training = _trainingBackup;
        MudDialog.Cancel();
    }

    private void TaskUpdated(MudItemDropInfo<Activity> info)
    {
        info.Item.ActivityId = int.Parse(info.DropzoneIdentifier);
    }

    private void DeleteSection(TrainingPart trainingPart)
    {

        //todo viragla - smazat nejprve vazbu aktivity na training part a pak teprvedanou training partd

        if (Training.TrainingParts.Count == 1)
        {
            Training.TrainingParts.Clear();
        }
        else
        {
            int newIndex = Training.TrainingParts.IndexOf(trainingPart) - 1;
            if (newIndex < 0)
            {
                newIndex = 0;
            }

            Training.TrainingParts.Remove(trainingPart);

            
        }
    }

}
