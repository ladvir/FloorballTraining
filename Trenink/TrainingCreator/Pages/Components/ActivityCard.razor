@using TrainingDataAccess.Models
@inject IDialogService DialogService
<MudCard Elevation="0" Outlined="true" Style="min-width: 10vw; min-height: 10vh;  max-width: 10vw; max-height: 10vh; position:relative; overflow-wrap: break-word ">
    <MudCardHeader>
        <CardHeaderAvatar>
            <MudAvatar Color="Color.Secondary" >I</MudAvatar>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">@Activity.Name</MudText>
           
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Default" OnClick="ShowDetail"/>
        </CardHeaderActions>
    </MudCardHeader>
    @*<MudCardMedia Image="images/pilars.jpg" Height="50" />*@
    <MudCardContent>
        <div Class="d-flex justify-content-start flex-grow-0 ma-0">
            <MudBadge Content="@Activity.PersonsMin" Overlap="true" Class="mx-6 my-0">
                <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Default" />
            </MudBadge>
                
            <MudBadge Content="@Activity.DurationMax" Overlap="true" Class="mx-6 my-0">
                <MudIcon Icon="@Icons.Material.Filled.Timer" Color="Color.Default" />
            </MudBadge>
        </div>
        <MudText Typo="Typo.body2" GutterBottom="true" Style="overflow: hidden; max-height: 5vh">@Description</MudText>
    </MudCardContent>
    @*<MudCardActions>
        <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
        <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
    </MudCardActions>*@
</MudCard>

@code {

        private const int DescriptionLength = 150;

    [Parameter]
    public Activity Activity { get; set; } = new Activity();

    private string Description
    {
        get
        {
            var descr = Activity.Description;

            return descr.Length >= DescriptionLength ? descr[..(DescriptionLength-3)] + "..." : descr;
        }
    }

    private void ShowDetail()
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = true,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters { ["Activity"] = Activity};
        
        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);
        
    }

}
