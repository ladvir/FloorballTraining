@using TrainingDataAccess.Models
@using TrainingDataAccess.Services.ActivityServices
@using TrainingCreator.Data
@inject IDialogService DialogService
@inject IActivityService ActivityService


<MudCard Elevation="0" Outlined="true" Style="width: 15vw; height: 15vh; overflow-y: hidden; overflow-wrap: break-word ">
    <MudCardHeader Class="ma-1 pa-1">
        @*<CardHeaderAvatar>
                    <MudAvatar Color="Color.Secondary" >I</MudAvatar>
                </CardHeaderAvatar>*@
        <CardHeaderContent>

            
            <ActivityCountersOverview Activity="Activity"/>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudMenu PositionAtCursor="true">
                <ActivatorContent >
                    <MudIconButton Icon="@Icons.Material.Filled.Menu"/>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem OnClick="ShowDetail">Detail</MudMenuItem>
                    <MudMenuItem OnClick="Edit">Edit</MudMenuItem>
                    <MudMenuItem OnClick="ConfirmDelete">Delete</MudMenuItem>
                    <MudMenuItem OnClick="Select">Do výběru</MudMenuItem>
                </ChildContent>
            </MudMenu>
        </CardHeaderActions>
    </MudCardHeader>

    <MudCardContent Class="ma-1 pa-1">
        <MudText Typo="Typo.body2" GutterBottom="true" Style="overflow: hidden; height: 5vh" >@Description</MudText>
                
    </MudCardContent>
</MudCard>

@code {

    private const int DescriptionLength = 150;

    [Parameter]
    public ActivityDto Activity { get; set; } = new ActivityDto();

    private string Description
    {
        get
        {
            var descr = Activity.Description;

            return descr.Length >= DescriptionLength ? descr[..(DescriptionLength-3)] + "..." : descr;
        }
    }

    private void ShowDetail()
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = true,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters { ["Activity"] = Activity};

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }

    private void Select()
    {
    }


    private async Task Edit()
    {
        var result = await ShowModalDialog(RecordAction.Update, Activity);

        if (!result.Cancelled)
        {
           // _activities?.Add((ActivityDto)result.Data);
        }
    }

    private async Task<DialogResult> ShowModalDialog(RecordAction action, ActivityDto activity)
    {

        var options = new DialogOptions
            {
                NoHeader = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                FullWidth = true,
                FullScreen = false,
                MaxWidth = MaxWidth.ExtraLarge
            };
        var parameters = new DialogParameters { ["Activity"] = activity, ["Action"] = action };

        var dialog = await DialogService.ShowAsync<ActivityNew>(action == RecordAction.Insert ? "Nová aktivita" : "Aktivita", parameters, options);
        var result = await dialog.Result;
        return result;
    }

    private async Task ConfirmDelete()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, NoHeader = false, DisableBackdropClick = true, 
            Position = DialogPosition.Center, FullWidth = true, FullScreen = false, MaxWidth = MaxWidth.Medium, CloseButton = true};

        var parameters = new DialogParameters
        {
            ["Title"] = "Smazání aktivity",
                ["ConfirmationText"] = $"Opravdu si přejete aktivitu {Activity.Name} smazat ?",
            ["IconName"] = Icons.Material.Filled.Delete
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Aktivita", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await Delete(Activity);
        }
        StateHasChanged();
    }

    private async Task Delete(ActivityDto activity)
    {
        await ActivityService.DeleteActivity(activity);

        //_activities?.Remove(activity);
    }
}
