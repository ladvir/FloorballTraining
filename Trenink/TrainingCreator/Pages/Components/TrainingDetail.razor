@page "/trainingDetail/{trainingid?}"
@using TrainingDataAccess.Services.TrainingServices
@using TrainingDataAccess.Services.ActivityServices
@using TrainingDataAccess.Services.TagServices
@using Microsoft.AspNetCore.Components
@using TrainingDataAccess.Dtos
@using TrainingCreator.Data
@inject ITrainingService TrainingService
@inject IActivityService ActivityService
@inject ITagService TagService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar


<MudPaper Elevation="0">
    <MudText Typo="Typo.h4">Trénink</MudText>

    
    


    <MudPaper Class="d-flex flex-column " Elevation="0">
        <MudTextField Label="Název" @bind-Value="Training.Name" Variant="Variant.Outlined" Class="my-2 pa-0" />
        <MudTextField Label="Popis" @bind-Value="Training.Description"  For="() => Training.Description" Lines="2" Class="my-2 pa-0" Variant="Variant.Outlined"  />
    </MudPaper>

<MudPaper Class="d-inline-flex gap-1" Elevation="0">
        <MudTextField Label="Počet osob" @bind-Value="Training.Persons" Style="max-width:5vw;" InputMode="InputMode.numeric" For="() => Training.Persons" Class="align-self-stretch my-2 " Variant="Variant.Outlined" T="int" />
        <MudTextField Label="Délka trvání" @bind-Value="Training.Duration" Style="max-width:5vw;" InputMode="InputMode.numeric" For="() => Training.Duration" Class="align-self-stretch my-2" Variant="Variant.Outlined" T="int" />
</MudPaper>


<MudExpansionPanels MultiExpansion="true" Dense="true">

    <MudExpansionPanel IsInitiallyExpanded="true" Text="Tréninkové části" >
        <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Success" Class="ml-2" OnClick="AddTrainingPart" DisableElevation="true" Variant="Variant.Filled" >Nová tréninková část</MudButton>
        
        @*TrainingParts*@
        @foreach (var trainingPart in Training.TrainingParts.OrderBy(tp => tp.Order))
        {
            <MudPaper Elevation="0" Outlined="true" Class="my-4 border-1 border-secondary">
                <MudToolBar Dense="true" Class="my-2 pa-0">
                    <MudPaper Elevation="0" Class="d-flex flex-column ma-0 pa-0" Style="Width: 20px;">
                        <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowUp" Color="Color.Inherit" Size="Size.Small"
                                       OnClick="() => ChangeOrder(trainingPart, -1)"/>
                        <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowDown" Color="Color.Inherit" Size="Size.Small" OnClick="() => ChangeOrder(trainingPart, 1)" />
                    </MudPaper>

                    <MudText @bind-Value="trainingPart.Name" Class="ml-2"/>

                    <MudSpacer/>
                    
                    <MudIconButton Icon="@Icons.Material.Sharp.Edit"/>
                    <MudIconButton Icon="@Icons.Material.Sharp.DeleteForever" OnClick="() => Training.TrainingParts.Remove(trainingPart)"/>
                </MudToolBar>

                <MudPaper Elevation="0">
                    <MudTextField Label="Název" @bind-Value="trainingPart.Name" Class="ml-2" Variant="Variant.Outlined" />
                <MudTextField Label="Popisek" @bind-Value="trainingPart.Description" Class="ml-2" Variant="Variant.Outlined"/>

                <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Success" Class="ml-2" OnClick="() => AddTrainingGroup(trainingPart)" DisableElevation="true" Variant="Variant.Filled">Nová skupina</MudButton>
                    </MudPaper>
                @*TrainingGroups*@
                <MudPaper Class="d-inline-flex gap-2" Elevation="0">

                    @foreach (var trainingGroup in trainingPart.TrainingGroups)
                    {
                        
                            <MudField Label="Skupina" Class="ma-2" Variant="Variant.Outlined">
                                <MudTextField Label="Název" @bind-Value="trainingGroup.Name" Class="ml-2" />
                                

                                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Success"
                                               OnClick="() => AddActivity(trainingGroup)"
                                               DisableElevation="true" Variant="Variant.Filled" Title="Výběr aktivit pro skupinu"/>

                                @*Activities*@
                                <MudPaper Class="d-flex flex-column gap-2" Elevation="0">
                                    @foreach (var activity in trainingGroup.Activities)
                                    {
                                        <MudCard Style="min-width:20vh;max-width:80%;">
                                            <MudCardHeader>
                                                <CardHeaderContent>
                                                    <MudText Typo="Typo.h6">@activity.Name</MudText>
                                                </CardHeaderContent>
                                                <CardHeaderActions>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" OnClick="() => trainingGroup.Activities.Remove(activity)"/>
                                                </CardHeaderActions>
                                            </MudCardHeader>
                                            <MudCardContent>
                                                <MudText Typo="Typo.body2" Style="overflow-wrap: break-word;">@(activity.Description?.TruncateLongString(100))</MudText>
                                            </MudCardContent>
                                            <MudCardActions>
                                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => ShowActivityDetail(@activity))">Detail</MudButton>
                                            </MudCardActions>
                                        </MudCard>
                                    }
                                </MudPaper>
                            </MudField>
                    }

                </MudPaper>

            </MudPaper>

        }
        
        

    

        </MudExpansionPanel>
</MudExpansionPanels>

<MudPaper Class="" Elevation="0">
    <MudPaper Class="d-flex " Elevation="0">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/trainings"))">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">OK</MudButton>
    </MudPaper>
</MudPaper>
</MudPaper>

@code {

    [Parameter]
    public string TrainingId { get; set; } = string.Empty;

    public TrainingDto Training { get; set; } = new TrainingDto();

    private List<TagDto> _trainingPartsTags = new List<TagDto>();

    private List<ActivityDto> _activites = new();


    protected override async Task OnInitializedAsync()
    {
        
        _trainingPartsTags = await TagService.GetTagsByParentName("Tréninková část");
        if (string.IsNullOrEmpty(TrainingId))
        {
            Training = new TrainingDto("Trénink - " + DateTime.Now.ToString("yyyy MMMM dd hh:mm:ss"));
            AddTrainingPart();
            return;
        }

        var trainingId = int.Parse(TrainingId);
        Training = await TrainingService.GetTraining(trainingId);
    }

    protected async Task Submit()
    {
        try
        {
            await TrainingService.SaveTraining(Training);

            NavigationManager.NavigateTo("/trainings");

        }
        catch (Exception x)
        {
            Snackbar.Add($"Chyba {x.Message} - {x.InnerException?.Message}", Severity.Error);
        }
    }

    private void AddTrainingPart()
    {
        Training.TrainingParts.Add(new TrainingPartDto
            {
                Name = $"TrainingPart - {Training.TrainingParts.Count+1}",
                Order = Training.TrainingParts.Count + 1
            });
    }
    
    public void ChangeOrder(TrainingPartDto trainingPart, int direction)
    {

        var originalOrder = trainingPart.Order;

        TrainingPartDto? trainingPartForSwap;

        if (direction > 0)
        {
            trainingPartForSwap = Training.TrainingParts.Where(tp => tp.Order > originalOrder).OrderByDirection(SortDirection.Ascending, t=>t.Order ).FirstOrDefault();
        }
        else
        {
            trainingPartForSwap = Training.TrainingParts.Where(tp => tp.Order < originalOrder).OrderByDirection(SortDirection.Descending, t => t.Order).FirstOrDefault();
        }
        

        if(trainingPartForSwap==null ) return;


        trainingPart.Order = trainingPartForSwap.Order;

        trainingPartForSwap.Order = originalOrder;        
    }

    private void AddTrainingGroup(TrainingPartDto trainingPart)
    {
        trainingPart.TrainingGroups.Add(new TrainingGroupDto());
    }

    private void ShowActivityDetail(ActivityDto activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = true,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters( );

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }
    
    private async Task AddActivity(TrainingGroupDto trainingGroup)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = true,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        
        var parameters = new DialogParameters
        {
           
        };


        var dialog = await DialogService.ShowAsync<ActivitiesList>("Aktivita", parameters, options);

        var result = await dialog.Result;

        if (result.Cancelled)
        {
            return;
        }

        
        var selectedActivities = dialog.GetReturnValueAsync<List<ActivityDto>>().Result;


        trainingGroup.Activities.AddRange(selectedActivities);
    }

}
