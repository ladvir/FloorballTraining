@page "/trainings"
@using TrainingCreator.Data
@using TrainingCreator.Pages.Components
@using TrainingDataAccess.Services.TrainingServices
@using TrainingDataAccess.Dtos

@inject ITrainingService TrainingService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium" />
}
else
{
    <MudScrollToTop>
        <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" Size="Size.Large" />
    </MudScrollToTop>

    <MudPaper Class="align-content-start d-inline-flex gap-3 align-center object-left" Elevation="0">
        <MudText Typo="Typo.h4">Tréninky</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Success"
                   OnClick="ShowTrainingForm" DisableElevation="true" Variant="Variant.Filled" />

        <MudTextField @bind-Value="_searchString1" Placeholder="Hledej" Adornment="Adornment.End"
                  Style="max-width: 300px;"
                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
                  Margin="Margin.Dense" MaxLength="100" Variant="Variant.Outlined" OnAdornmentClick="Search" />

        <MudSelect T="int" @bind-Value="ItemsPerPageValue" Label="Na stránce"
               SelectedValuesChanged="ItemsPerPageValueChanged"
               Style="max-width:150px;" Margin="Margin.Dense">
            @foreach (var itemsPerPage in _itemsPerPageValues)
            {
                <MudSelectItem Value="@itemsPerPage" />
            }
        </MudSelect>
    </MudPaper>



    <MudPaper Class="d-flex flex-wrap gap-4 ma-4 flex-grow-4" Elevation="0">
        @foreach (var training in _trainings)
        {
            <MudCard Class="ma-0 pa-1" Elevation="0" Outlined="true" Style="min-width: 14vw; max-width: 14vw; min-height: 5vh; overflow-y: hidden; overflow-wrap: break-word ">
                <MudCardHeader Class="ma-0 pa-1" Style="overflow: hidden;max-width: 13vw; min-width: 13vw;">
                    <CardHeaderContent>
                        <MudPaper Elevation="0" Class="ma-0 pa-0" Style="overflow:hidden;max-width: 10vw;">
                            <MudPaper Style="text-overflow: ellipsis; white-space: nowrap; max-width: 11vw" Elevation="0">
                                <MudText Typo="Typo.h6">@training.Name</MudText>
                            </MudPaper>

                            <MudPaper Class="d-inline-flex mt-2 pa-0 object-left" Elevation="0">
                                <MudPaper Class="d-inline-flex " Elevation="0">
                                    <MudIcon Icon="@Icons.Material.Sharp.People" />
                                    <MudText Typo="Typo.subtitle2" Style="min-width: 5vw;">@training.Persons</MudText>
                                </MudPaper>
                                <MudPaper Class="d-inline-flex " Elevation="0">
                                    <MudIcon Icon="@Icons.Material.Sharp.Timer" />
                                    <MudText Typo="Typo.subtitle2" Style="min-width: 5vw;">@training.Duration</MudText>
                                </MudPaper>
                            </MudPaper>
                        </MudPaper>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Variant="Variant.Text" Color="Color.Primary" Icon="@Icons.Material.Sharp.Edit" OnClick="() => Edit(training)">Upravit</MudIconButton>
                        <MudIconButton Variant="Variant.Text" Color="Color.Primary" Icon="@Icons.Material.Sharp.Delete" OnClick="() => ConfirmDelete(training)">Smazat</MudIconButton>
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="ma-1 pa-0 align-top" Style="overflow: hidden;">
                    <MudText Typo="Typo.body2" GutterBottom="true">
                        @if (training.Description != null)
                        {
                            @training.Description.TruncateLongString(150)
                        }
                    </MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ShowDetail(training)">Detail</MudButton>

                </MudCardActions>
            </MudCard>
        }


    </MudPaper>

    <MudPagination Count="_pagesCount" Selected="_pagination.Page" SelectedChanged="PageChanged" />
}

@code {
    private bool _isLoading;
    private List<TrainingDto> _trainings = null!;
    private string _searchString1 = "";

    private readonly int[] _itemsPerPageValues = new[] { 5, 10, 20, 30, 50, 100 };
    private int ItemsPerPageValue { get; set; } = 10;

    PaginationDTO _pagination = new();

    private int _pagesCount;

    private async Task PageChanged(int i)
    {
        _pagination.Page = i;
        await FetchData(_searchString1);
    }


    protected override async Task OnInitializedAsync()
    {
        await ItemsPerPageValueChanged();
    }

    private async Task FetchData(string searchString)
    {
        _isLoading = true;
        await Task.Delay(1);

        var result = await TrainingService.GetTrainings(_pagination, searchString);

        _trainings = result.Items.ToList();
        _pagesCount = (int)Math.Ceiling(result.Count / (decimal)_pagination.ItemsPerPage);

        _isLoading = false;
    }

    private void ShowTrainingForm()
    {
        NavigationManager.NavigateTo("trainingDetail");
    }

    private void ShowDetail(TrainingDto training)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = true,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters { ["Training"] = training };

        DialogService.Show<TrainingDetailReadOnly>(string.Empty, parameters, options);

    }

    private Task Edit(TrainingDto training)
    {
        NavigationManager.NavigateTo($"trainingDetail/{training.TrainingId}");
        return Task.CompletedTask;
    }



    private async Task ConfirmDelete(TrainingDto training)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                NoHeader = false,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                FullWidth = true,
                FullScreen = false,
                MaxWidth = MaxWidth.Medium,
                CloseButton = true
            };

        var parameters = new DialogParameters
            {
                ["Title"] = "Smazání tréninku",
                ["ConfirmationText"] = $"Opravdu si přejete trénink {training.Name} smazat ?",
                ["IconName"] = Icons.Material.Filled.Delete
            };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Trénink", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await Delete(training);
        }

    }

    private async Task Delete(TrainingDto training)
    {
        await TrainingService.DeleteTraining(training);

        _trainings.Remove(training);
    }


    private async Task Search()
    {
        await FetchData(_searchString1);
    }

    private async Task ItemsPerPageValueChanged()
    {

        _pagination = new PaginationDTO
            {
                Page = 1,
                ItemsPerPage = ItemsPerPageValue
            };

        await Search();
    }
}
