@page "/trainings"
@using TrainingDataAccess.Models
@using TrainingCreator.Data
@using TrainingCreator.Pages.Components
@using TrainingDataAccess.Services.TrainingServices

@inject ITrainingService TrainingService
@inject NavigationManager NavigationManager

<MudScrollToTop>
    <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.ArrowCircleUp" Size="Size.Large" />
</MudScrollToTop>

<MudPaper Class="d-flex flex-grow-0 align-center flex-row gap-4" Elevation="0">
    <MudText Typo="Typo.h4">Tréninky</MudText>
    <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" aria-label="add" Color="Color.Success" 
                   OnClick="@(()=>NavigationManager.NavigateTo("/trainingnew"))" DisableElevation="true" Variant="Variant.Filled" />
    
    <MudTextField @bind-Value="_searchString1" Placeholder="Hledej" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small"
                  MaxWidth="350px" Width="250px" Margin="Margin.Dense" Variant="Variant.Outlined"/>
</MudPaper>

<MudPaper Class="d-flex flex-wrap gap-4 ma-4 flex-grow-1" Elevation="0" AlignItems="AlignItems.Start" Justify="Justify.FlexStart">
    @foreach (var training in _trainings)
    {
        <TrainingCard Training="training"/>
    }
</MudPaper>


@code {
    private List<Training> _trainings = new List<Training>();
    private string _searchString1 = "";

    protected override async Task OnInitializedAsync()
    {
        _trainings = await TrainingService.GetAllTrainings();
    }
}
