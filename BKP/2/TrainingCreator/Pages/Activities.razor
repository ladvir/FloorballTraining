@page "/activities"
@using TrainingCreator.Models
@using TrainingDataAccess.Models
@using TrainingGenerator.Services.AcitivityDeletors


@inject IActivityService ActivityService


<h3>Aktivity</h3>


<EditForm Model="@_newActivity" OnValidSubmit="@InsertNewActivity">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="name" @bind-Value="_newActivity.Name" />
    <InputText id="description" @bind-Value="_newActivity.Description" />

    <button id="submit" class="btn btn-primary">Ulož</button>
</EditForm>


@if (_activities is null)
{
    <p><em>Načítám...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Název</th>
                <th>Popis</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var activity in _activities)
            {
                <tr>
                    <td>@activity.Name</td>
                    <td>@activity.Description</td>
                </tr>
            }
        </tbody>


    </table>
}


@code {
    private IEnumerable<Activity>? _activities;

    private readonly NewActivity _newActivity = new NewActivity();

    protected override async Task OnInitializedAsync()
    {
        _activities = await ActivityService.GetAllActivities();
    }

    private async Task InsertNewActivity()
    {
        var activity = new Activity
            {
                Name = _newActivity.Name,
                Description = _newActivity.Description
            };
        await ActivityService.CreateActivity(activity);
    }

    }
