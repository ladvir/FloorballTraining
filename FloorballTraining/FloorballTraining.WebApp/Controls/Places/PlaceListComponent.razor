@using Environment = CoreBusiness.Enums.Environment
@using FloorballTraining.UseCases.Places
@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.CoreBusiness.Dtos
@using FloorballTraining.UseCases.Helpers
@inject NavigationManager NavigationManager
@inject IViewPlacesUseCase ViewPlacesUseCase

<MudTable Hover="true" FixedHeader="true"
          Items="@_places"
          Dense="true">
    <HeaderContent>
        <MudTh>Název</MudTh>
        <MudTh>Délka</MudTh>
        <MudTh>Šířka</MudTh>
        <MudTh>Prostředí</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    
        <RowTemplate>
            <MudTd DataLabel="Název">@context.Name</MudTd>
            <MudTd DataLabel="Délka">@context.Length</MudTd>
            <MudTd DataLabel="Šířka">@context.Width</MudTd>
            <MudTd DataLabel="Prostředí">@context.Environment</MudTd>
        <MudTd>
            <MudChip Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Success" OnClick="@(()=>EditPlace(context.Id))">Upravit</MudChip>
        </MudTd>
          
    </RowTemplate>

</MudTable>



@code { 
    [Parameter]
    public string SearchText { get; set; } = string.Empty;
    
    private List<PlaceDto> _places = new();
    
        
    protected override async Task OnParametersSetAsync()
    {
        PlaceSpecificationParameters parameters = new()
        {
            Name = SearchText
        };


        var places = await ViewPlacesUseCase.ExecuteAsync(parameters);

        if (!places.Data.Any())
        {
            return ;
        }


        _places = places.Data.ToList();
     
    }

    private void EditPlace(int placeId)
    {
        NavigationManager.NavigateTo($"/editplace/{placeId}");
    }
}
