@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.CoreBusiness.Dtos
@inject IViewPlacesUseCase ViewPlacesUseCase

<SearchComponent OnSearchItem="OnSearchItem"/>

@if(Places.Any())
{
    <MudPaper Elevation="0" Class="d-inline-flex">
        @foreach(var place in Places)
        {
            <MudChip Size="Size.Small" Text="@place.Name" Value="@place.Id" OnClick="async () => await OnSelectPlace(place)" />
        }
    </MudPaper>
}

@code {
    [Parameter]
    public List<PlaceDto> Places { get; set; } = new();

    [Parameter]
    public EventCallback<PlaceDto?> OnPlaceSelected { get; set; }

    private async Task OnSearchItem(string searchString)
    {

        PlaceSpecificationParameters parameters =new();
        
        var places = await ViewPlacesUseCase.ExecuteAsync(parameters);

        if (!places.Data.Any())
        {
            Places = new List<PlaceDto>();
        }

        Places = places.Data.ToList();
    }

    private async Task OnSelectPlace(PlaceDto? place)
    {
        await OnPlaceSelected.InvokeAsync(place);
        Places.Clear();
    }

}
