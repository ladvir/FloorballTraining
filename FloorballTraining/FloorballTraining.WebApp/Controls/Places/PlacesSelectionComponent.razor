@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.CoreBusiness.Dtos
@inject IViewPlacesUseCase ViewPlacesUseCase

@if (_places != null)
{
    <MudChip Icon="@Icons.Material.Filled.SelectAll" Color="Color.Success" OnClick="SelectAll">Vše</MudChip>
    <MudChip Icon="@Icons.Material.Filled.Deselect" Color="Color.Success" OnClick="DeselectAll">Nic</MudChip>

    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap my-2 align-items-start">

        @foreach (var place in _places)
        {
            <MudCheckBox T="bool" Color="Color.Success" Class="mr-4 d-inline-flex flex-wrap" Size="Size.Small" Style="vertical-align: middle;"
                         Dense="true" CheckedChanged="() => CheckboxChanged(place)">
                @place.Name

            </MudCheckBox>
        }

    </MudPaper>
}

@code {

    [Parameter]
    public List<PlaceDto>? SelectedValues { get; set; } = new();

    [Parameter]
    public EventCallback<List<PlaceDto>> SelectedValuesChanged { get; set; }

    private IReadOnlyList<PlaceDto>? _places ;

    private readonly List<PlaceDto> _selectedValues = new();

    protected override async Task OnInitializedAsync()
    {
        if (SelectedValues != null && SelectedValues.Any())
            foreach (var item in SelectedValues)
            {
                _selectedValues.Add(item);
            }

        var places = await ViewPlacesUseCase.ExecuteAsync(new PlaceSpecificationParameters());
        _places = places.Data;
    }

    private bool IsChecked(long placeId)
    {
        return _selectedValues.Exists(s => s.Id == placeId);
    }

    private async Task CheckboxChanged(PlaceDto value)
    {
        if (_selectedValues.Contains(value))
        {
            _selectedValues.Remove(value);
        }
        else
        {
                _selectedValues.Add(value);
        }
        

        await SelectedValuesChanged.InvokeAsync(_selectedValues);
    }

    private async Task SelectAll()
    {
        foreach (var place in _places!)
        {
            if (!_selectedValues.Contains(place)) _selectedValues.Add(place);
        }
        await SelectedValuesChanged.InvokeAsync(_selectedValues);
    }

    private async Task DeselectAll()
    {
       _selectedValues.Clear();
        await SelectedValuesChanged.InvokeAsync(_selectedValues);
    }

}





    

