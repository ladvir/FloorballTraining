@using Environment = FloorballTraining.CoreBusiness.Environment
@using Microsoft.AspNetCore.Routing.Constraints
 <MudPaper Elevation="0" Class="my-2 pa-0 d-inline-flex flex-wrap gap-4 align-items-center">
     <MudSelect T="Environment" Label="Prostředí" @bind-Value="Environment" Text="@Environment.ToString()" Style="width:22em;">
         <MudSelectItem Value="Environment.Anywhere" OnClick="PlaceChanged">Kdekoliv</MudSelectItem>
         <MudSelectItem Value="Environment.Indoor" OnClick="PlaceChanged">Uvnitř</MudSelectItem>
         <MudSelectItem Value="Environment.Outdoor" OnClick="PlaceChanged">Venku</MudSelectItem>
     </MudSelect>

    <MudPaper Elevation="0" Class="d-inline-flex gap-2  align-items-center">
        
        <MudTextField DebounceInterval="500" OnDebounceIntervalElapsed="PlaceChanged" T="int" @bind-Value="Length" Label="Délka" Style="width:5em;" Variant="Variant.Outlined"  />
        
        <MudText>x</MudText>
        <MudTextField DebounceInterval="500" OnDebounceIntervalElapsed="PlaceChanged" T="int" @bind-Value="Width" Label="Šířka" Style="width:5em;" Variant="Variant.Outlined" />
        
     <MudText>metrů</MudText>
    </MudPaper>
 </MudPaper>


@code {

    [Parameter]
    public Environment Environment { get; set; } 

    [Parameter]
    public int Length { get; set; }

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public EventCallback<(Environment environment, int length, int width)> ActivityPlaceChanged { get; set; }

    private async Task PlaceChanged()
    {
        await ActivityPlaceChanged.InvokeAsync((Environment, Length,Width));
    }


    private void HandleIntervalElapsed(string debouncedText)
    {
        var x = ActivityPlaceChanged.InvokeAsync((Environment, Length,Width));
    }

    
}
