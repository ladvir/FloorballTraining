@using FloorballTraining.WebApp.Pages.Activities
@using FloorballTraining.WebApp.Data
@using FloorballTraining.UseCases
@inject IViewActivityByCriteriaUseCase ViewActivityByCriteriaUseCase
@inject IDialogService DialogService

<MudPaper Class="d-flex flex-wrap gap-2 flex-grow-4" Elevation="0">
    @foreach (var activity in _activities)
    {
        <MudPaper Elevation="0" Class="d-flex flex-wrap border-1 border-dark rounded-3 pa-2 " Style="">
            <MudCheckBox T="bool" CheckedChanged="()=>ActivityCheck(activity)" Size="Size.Small" Class="ma-0 pa-0" Dense="true"  >
                <MudLink OnClick="() => ShowDetail(activity)">@activity.Name</MudLink>
            </MudCheckBox>
        </MudPaper>
    }

    
</MudPaper>


@code {

    private List<Activity> _activities = new();

    [Parameter]
    public List<Activity>? SelectedActivities { get; set; } = new();

    [Parameter]
    public ActivitySearchCriteria ActivitySearchCriteria { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        _activities = (await ViewActivityByCriteriaUseCase.ExecuteAsync(ActivitySearchCriteria)).ToList();
    }

    private void ActivityCheck(Activity activity)
    {
        if (SelectedActivities != null && SelectedActivities.Contains(activity))
        {
            SelectedActivities.Remove(activity);
            return;
        }

        SelectedActivities?.Add(activity);

    }

    private void ShowDetail(Activity activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters { ["Activity"] = activity };

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }

    

}
