@using FloorballTraining.UseCases.Activities.Interfaces
@using FloorballTraining.WebApp.Pages.Activities
@using FloorballTraining.WebApp.Data
@using FloorballTraining.UseCases
@using FloorballTraining.CoreBusiness.Dtos
@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.UseCases.Helpers
@using Microsoft.AspNetCore.Mvc.Formatters
@inject IViewActivitiesUseCase ViewActivitiesUseCase
@inject IDialogService DialogService

<MudField Label="Nalezené aktivity" Variant="Variant.Outlined" Class="my-2 pa-2">
    @if (!_activities.Any())
    {
        <MudText Typo="Typo.caption">Zadaným kritériím neodpovídá žádná aktivita</MudText>
    }
    else
    {
        <MudPaper Class="d-block" Elevation="0">

            <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2">
                <MudChip Icon="@Icons.Material.Filled.Clear" Variant="Variant.Outlined" Color="Color.Success" OnClick="UncheckAll" Disabled="@(SelectedActivity!=null)">Zruš výběr</MudChip>
            </MudPaper>

            <MudPaper Class="d-flex flex-wrap gap-2 flex-grow-4 my-2 ml-0" Elevation="0">
                <MudRadioGroup T="ActivityDto" SelectedOption="@SelectedActivity" SelectedOptionChanged="ActivitySelectionChanged " >
                    @foreach (var activity in _activities.OrderBy(a => a.Name))
                    {
                        <MudPaper Elevation="0" Class="d-flex flex-wrap border-1 border-dark rounded-3 pa-2 " Style="">
                            
                            <MudRadio Option="@activity" Size="Size.Small" Class="ma-0 pa-0" Dense="true">
                                <MudLink OnClick="() => ShowDetail(activity)">@activity.Name</MudLink>
                            </MudRadio>
                        </MudPaper>

                    }
                </MudRadioGroup>
            </MudPaper>
        </MudPaper>
    }

</MudField>

@code {

    private List<ActivityDto> _activities = new();

    [Parameter]
    public ActivityDto? SelectedActivity { get; set; } 

    [Parameter]
    public SearchCriteria SearchCriteria { get; set; } = new();

    [Parameter]
    public EventCallback<ActivityDto> OnActivitySelectionChanged { get; set; }


    private ActivitySpecificationParameters _parameters=new();
    private Pagination<ActivityDto>? _result = null;

    protected override async Task OnParametersSetAsync()
    {
        await SearchByCriteria(SearchCriteria);
    }


    public async Task RetrieveData()
    {
        _result = await ViewActivitiesUseCase.ExecuteAsync(_parameters);
        _activities = _result.Data.ToList();
    }

    public async Task SearchByCriteria(SearchCriteria searchCriteria)
    {
        _parameters = new ActivitySpecificationParameters()
        {
            Id = searchCriteria.Ids.Any() ? searchCriteria.Ids.First(): null,
            Name = searchCriteria.Text,
            Description = searchCriteria.Text,
            Tag = string.Join(";", searchCriteria.Tags.Select(t=>t!.Id))
        };

        await RetrieveData();
    }

    
    private void ShowDetail(ActivityDto activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters { ["Activity"] = activity };

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);
    }

   
    private void UncheckAll()
    {
        SelectedActivity = null;
    }

    private async Task ActivitySelectionChanged(ActivityDto? activity)
    {
        SelectedActivity = activity;
        await OnActivitySelectionChanged.InvokeAsync(SelectedActivity);
    }

}
