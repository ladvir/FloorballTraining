@using FloorballTraining.WebApp.Pages.Activities
@using FloorballTraining.WebApp.Data
@using FloorballTraining.UseCases
@inject IViewActivityByCriteriaUseCase ViewActivityByCriteriaUseCase
@inject IDialogService DialogService

<MudPaper Elevation="0"> 
    <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Success" OnClick="ShowAddActivityForm" DisableElevation="true" Variant="Variant.Filled"/>
</MudPaper>


<MudPaper Class="d-flex flex-wrap gap-4 ma-4 flex-grow-4" Elevation="0">
    @foreach (var activity in _activities)
    {

        <MudCard Class="ma-0 pa-1" Elevation="0" Outlined="true" Style="min-width: 14vw; max-width: 14vw; min-height: 5vh; overflow-y: hidden; overflow-wrap: break-word ">
            <MudCardHeader Class="ma-0 pa-1" Style="overflow: hidden;max-width: 13vw; min-width: 13vw;">
                <CardHeaderContent>

                    <MudPaper Elevation="0" Class="ma-0 pa-0" Style="overflow: hidden; max-width: 10vw;">
                        <MudPaper Style="text-overflow: ellipsis; white-space: nowrap; max-width: 11vw" Elevation="0">
                            <MudText Typo="Typo.h6">@activity.Name</MudText>
                        </MudPaper>
                    </MudPaper>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudCheckBox T="bool" CheckedChanged="()=>ActivityCheck(activity)"></MudCheckBox>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent Class="ma-1 pa-0 align-top" Style="overflow: hidden;">
                <MudText Typo="Typo.body2" GutterBottom="true">
                    @if (activity.Description != null)
                    {
                        @activity.Description
                    }
                </MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton OnClick="() => ShowDetail(activity)">Detail</MudButton>
            </MudCardActions>
        </MudCard>
    }

    
</MudPaper>


@code {
    
    private List<Activity> _activities = new();

    [Parameter]
    public List<Activity> SelectedActivities { get; set; } = new();

    [Parameter]
    public ActivitySearchCriteria ActivitySearchCriteria { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        _activities = (await ViewActivityByCriteriaUseCase.ExecuteAsync(ActivitySearchCriteria)).ToList();
    }

    private void ActivityCheck(Activity activity)
    {
        if (SelectedActivities.Contains(activity))
        {
            SelectedActivities.Remove(activity);
            return;
        }

        SelectedActivities.Add(activity);

    }

    private void ShowDetail(Activity activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = true,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters { ["Activity"] = activity };

        //DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }

    private async Task ShowAddActivityForm()
    {
        var options = new DialogOptions
        {
            NoHeader = true,
            CloseOnEscapeKey = true,
            CloseButton = true,
            DisableBackdropClick = true,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            FullScreen = false,

        };
        

        var dialog = await DialogService.ShowAsync<AddActivityModal>(string.Empty, new DialogParameters(), options);
        var result = await dialog.Result;

        if (result == DialogResult.Cancel())
        {
            return;
        }

        if (result.Data == null) return;

        _activities.Add((Activity)result.Data);

        StateHasChanged();

    }

}
