@using FloorballTraining.WebApp.Data
@using FloorballTraining.WebApp.Pages.Activities
@using FloorballTraining.Services
@inject IDialogService DialogService
@inject IFileHandlingService FileHandlingService

<MudPaper Elevation="0" Class="d-flex gap-2 my-2 flex-wrap">
    @foreach (var media in Medium)
    {
        var path = Path.Combine(StorageLocation, media.Path).Replace(@"\", "/");

        <MudCard Style="max-width:300px;max-height: 300px;">
            <MudCardHeader Class="ma-0 pa-2">
                <CardHeaderContent>
                    <MudPaper Class="d-inline-flex gap-2 mt-0 pt-0 align-top" Elevation="0">
                        <MudTextField @bind-Value="@media.Name" Label="Název" Class="mt-0 pt-0" />
                        <MudIconButton ButtonType="ButtonType.Button" OnClick="()=>OpenDeleteDialog(media) " Icon="@Icons.Material.Filled.Delete" />
                        <MudIconButton ButtonType="ButtonType.Button" OnClick="()=>Clone(media) " Icon="@Icons.Material.Filled.CopyAll" />

                        @if (!string.IsNullOrEmpty(media.Data))
                        {
                            <MudIconButton ButtonType="ButtonType.Button" OnClick="()=>OpenDrawingDialog(media)" Icon="@Icons.Material.Filled.Draw" />
                        }
                    </MudPaper>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent >
                <MudImage @onclick="() =>OpenDialog(media)" Src="@(!string.IsNullOrEmpty(media.Data)? media.Preview: path)" ObjectFit="ObjectFit.Contain" Width="200" Height="200" Alt="@media.Name" />
            </MudCardContent>
        </MudCard>
    }

    <MudDialog @bind-ref="_mediaPreviewDialog" @bind-IsVisible="_mediaPreviewDialogVisible" Options="_mediaPreviewDialogOptions">
        <DialogContent>
            <MudCarousel TData="Media" ItemsSource="Medium" Class="mud-width-full" Style="height:80vh;" ShowArrows="true" ShowBullets="true" EnableSwipeGesture="true" @bind-SelectedIndex="_index" AutoCycle="false" >
            
                <ItemTemplate>
                    <div class="d-flex flex-column flex-column justify-center" style="height:100%">
                        <MudImage Src="@(!string.IsNullOrEmpty(context.Data)? context.Preview: Path.Combine(StorageLocation, context.Path).Replace(@"\", "/" ))" ObjectFit="ObjectFit.Contain" Alt="@context.Name" />
                    </div>
                </ItemTemplate>
            </MudCarousel>
            
        </DialogContent>
    </MudDialog>

    <MudDialog @bind-ref="_mediaDeleteConfirmationDialog" @bind-IsVisible="_mediaDeleteConfirmationDialogVisible" Options="_mediaDeleteConfirmationDialogOptions">
        <TitleContent>
            <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3" />Smazání obrázku nebo videa </MudText>
        </TitleContent>
        <DialogContent>
            <p>Opravdu chcete <strong>smazat @_media?.Name</strong>?</p>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _mediaDeleteConfirmationDialogVisible = false" Class="px-10">Ne</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => Delete(_media)" Class="px-10">Ano</MudButton>
        </DialogActions>
    </MudDialog>

</MudPaper>

@code {
    [Parameter]
    public List<Media> Medium { get; set; } = new();

    [Parameter]
    public EventCallback<List<Media>?> MediumChanged { get; set;}

    [Parameter]
    public string StorageLocation { get; set; } = string.Empty;


    private MudDialog? _mediaPreviewDialog;
    private DialogOptions _mediaPreviewDialogOptions = new() { FullWidth = true, CloseButton = true, CloseOnEscapeKey = true };
    private bool _mediaPreviewDialogVisible;
    private int _index = 0;

    private MudDialog? _mediaDeleteConfirmationDialog;
    private DialogOptions _mediaDeleteConfirmationDialogOptions = new() { FullWidth = false, CloseButton = false, CloseOnEscapeKey = true };
    private bool _mediaDeleteConfirmationDialogVisible;
    private Media? _media =null;

    private void OpenDialog(Media media)
    {
        _mediaPreviewDialogVisible = true;
        _index = Medium.IndexOf(media);
    }

    private void OpenDeleteDialog(Media media)
    {
        _mediaDeleteConfirmationDialogVisible = true;
        _media = media;
    }

    private async Task Delete(Media? media)
    {
        if (media == null) return;
        


        if (!string.IsNullOrEmpty(media.Path))
        {
            FileHandlingService.Delete(media.Path);
        }

        Medium.Remove(media);

        await MediumChanged.InvokeAsync(Medium);

        _media = null;
        _mediaDeleteConfirmationDialogVisible = false;
    }

    private async Task OpenDrawingDialog(Media media)
    {
        var options = new DialogOptions
            {
                NoHeader = true,
                CloseOnEscapeKey = true,
                CloseButton = false,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraExtraLarge,
                FullWidth = true,
                FullScreen = false
            };

        var parameters = new DialogParameters { { "DrawingAsJson", media.Data} };
        var dialog = await DialogService.ShowAsync<DrawingModal>("Kreslení", parameters, options);

        var result = await dialog.Result;

        if (result == DialogResult.Cancel())
        {
            return;
        }

        if (result.Data == null) return;

        var drawing = (DrawingResult)result.Data;

        media.Preview = drawing.Image;
        media.Data = drawing.Json;
    }

    private async Task Clone(Media media)
    {
        var clone = new Media();
        clone.Merge(media);


        if(!string.IsNullOrEmpty(clone.Path))
        {
            clone.Path = FileHandlingService.Copy(clone.Path);
        }

        Medium.Add(clone);
        await MediumChanged.InvokeAsync(Medium);

        
    }

}