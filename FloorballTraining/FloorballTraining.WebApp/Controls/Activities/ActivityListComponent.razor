@using FloorballTraining.WebApp.Pages.Activities
@using FloorballTraining.UseCases
@using FloorballTraining.CoreBusiness.Dtos

@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudTable T="ActivityDto" Items="@Activities" FixedHeader="true" Elevation="0" Hover="true" Dense="true" MultiSelection="true" 
          SelectOnRowClick="true" SelectedItemsChanged="OnItemSelectionChanged" OnRowClick="RowClicked">
    <HeaderContent>
        <MudTh Style="inline-size: 200px;overflow-wrap: break-word;">Název</MudTh>
        <MudTh Style="max-inline-size: 300px;overflow-wrap: break-word;">Popis</MudTh>
        <MudTh>Počet osob min.</MudTh>
        <MudTh>Počet osob max.</MudTh>
        <MudTh>Doba trvání min.</MudTh>
        <MudTh>Doba trvání max.</MudTh>
        <MudTh Style="max-inline-size: 300px;overflow-wrap: break-word;">Štítky</MudTh>
        <MudTh Style="max-inline-size: 300px;overflow-wrap: break-word;">Vybavení</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Název" Style="inline-size: 200px;overflow-wrap: break-word;">@context.Name</MudTd>
        <MudTd DataLabel="Popis" Style="max-inline-size: 300px;overflow-wrap: break-word;">@context.Description</MudTd>
        <MudTd DataLabel="Počet osob min.">@context.PersonsMin</MudTd>
        <MudTd DataLabel="Počet osob max.">@context.PersonsMax</MudTd>
        <MudTd DataLabel="Doba trvání min.">@context.DurationMin</MudTd>
        <MudTd DataLabel="Doba trvání max.">@context.DurationMax</MudTd>
        <MudTd DataLabel="Štítky" Style="max-inline-size: 300px;overflow-wrap: break-word;">@(GetTagList(context))</MudTd>
            <MudTd DataLabel="Vybavení" Style="max-inline-size: 300px;overflow-wrap: break-word;">@(GetEquipmentList(context))</MudTd>
            <MudTd DataLabel="">
                <MudChip Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Success" OnClick="()=>EditActivity(context.Id)">Upravit</MudChip>
            </MudTd>
        </RowTemplate>
    </MudTable>


    @code {
    [Parameter]
    public IEnumerable<ActivityDto> Activities { get; set; } = new List<ActivityDto>();

    [Parameter]
    public EventCallback<List<int>> SelectedActivitiesChanged { get; set; }

    private HashSet<int> SelectedActivityIds { get; set; } = new ();

    private bool _buttonEditClicked;

    private void EditActivity(int activityId)
    {
        _buttonEditClicked = true;
        NavigationManager.NavigateTo($"/editactivity/{activityId}");
    }

    private string GetTagList(ActivityDto context)
    {
        return string.Join(", ", context.ActivityTags.OrderBy(n => n.Name));
    }

    private string GetEquipmentList(ActivityDto context)
    {
        return string.Join(", ", context.ActivityEquipments.OrderBy(n => n.Name));
    }

    private void RowClicked(TableRowClickEventArgs<ActivityDto> obj)
    {
        if (!_buttonEditClicked)
        {
            ShowDetail(obj.Item);
        }

        _buttonEditClicked = false;
    }

    private void ShowDetail(ActivityDto activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters { ["Activity"] = activity };

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }


    private async Task OnItemSelectionChanged(int activity)
    {
        if (SelectedActivityIds.Contains(activity))
        {
            SelectedActivityIds.Remove(activity);
        }

        SelectedActivityIds.Add(activity);

        await SelectedActivitiesChanged.InvokeAsync(SelectedActivityIds.ToList());

    }

        private async Task OnItemSelectionChanged(HashSet<ActivityDto> activity)
        {
        await SelectedActivitiesChanged.InvokeAsync(activity.Select(a=>a.Id).ToList());
        }

    }
