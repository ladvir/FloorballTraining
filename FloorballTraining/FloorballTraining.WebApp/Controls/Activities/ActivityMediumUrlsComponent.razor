@using System.Web
@using System.Xml.Linq
@using FloorballTraining.WebApp.Validations
@using FluentValidation.Results
@using Microsoft.AspNetCore.Components
@using MudBlazor

@foreach (var error in _validationUrlResult.Errors) {
    <MudText>@error.ErrorMessage</MudText>
}

<MudTable T="ActivityMedia" Items="@Medium" Hover="true" Dense="true" 
          CanCancelEdit="true" @bind-SelectedItem="_selectedMedia" CommitEditTooltip="Potvrď změny" 
          OnCommitEditClick="Save" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" 
          RowEditCommit="RowEditCommit"
          IsEditRowSwitchingBlocked="false" >
    <ToolBarContent>
        <MudIconButton ButtonType="ButtonType.Button" OnClick="()=>Medium.Add(new ActivityMedia())" Icon="@Icons.Material.Filled.Add" />
    </ToolBarContent>

    <ColGroup>
        <col style="width:30%;" />
        <col style="width:30%;" />
        <col style="width:30%;" />
        <col />
    </ColGroup>

    <HeaderContent>
        <MudTh>Název</MudTh>
        <MudTh>Odkaz</MudTh>
        <MudTh>Náhled</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Název">@context.Name</MudTd>
        <MudTd DataLabel="Odkaz">@context.Path</MudTd>
        <MudTd DataLabel="Náhled"><a target="_blank" href="@context.Path">@(string.IsNullOrEmpty(context.Name) ? context.Path[..Math.Min(context.Path.Length, 30)] : context.Name)</a></MudTd>
        <MudTd><MudIconButton ButtonType="ButtonType.Button" OnClick="() => Delete(context)" Icon="@Icons.Material.Filled.Delete" /></MudTd>
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Název"><MudTextField @bind-Value="@context.Name"/></MudTd>
        <MudTd DataLabel="Odkaz"><MudTextField @bind-Value="@context.Path"/></MudTd>
        <MudTd DataLabel="Náhled"><a target="_blank" href="@context.Path">@(string.IsNullOrEmpty(context.Name) ? context.Path[..Math.Min(context.Path.Length, 30)] : context.Name)</a></MudTd>
        <MudTd></MudTd>
    </RowEditingTemplate>
</MudTable>


@code {
    [Parameter]
    public List<ActivityMedia> Medium { get; set; } = new();

    [Parameter]
    public EventCallback<List<ActivityMedia>?> MediumChanged { get; set; }

    private ValidationResult _validationUrlResult = new();

    ActivityMedia _selectedMedia = new();
    ActivityMedia _selectedMediaBackup = new();

    private async Task Delete(ActivityMedia media)
    {
        Medium.Remove(media);

        await MediumChanged.InvokeAsync(Medium);
    }


    private bool Validate()
    {
        var urlValidator = new UriValidator();

        //if (!_selectedMedia.Path.ToLower().StartsWith("http"))
        //{
        //    _selectedMedia.Path = string.Concat("https://" + _selectedMedia.Path);
        //}
        _validationUrlResult =  urlValidator.Validate(_selectedMedia.Path);

        return _validationUrlResult.IsValid;
    }

    private async Task Save()
    {
        
        if ( Validate())
        {
            if (_selectedMedia.Id == 0)
            {
                _selectedMedia = new ActivityMedia
                    {
                        MediaType = MediaType.URL,
                        Path = HttpUtility.UrlDecode(_selectedMedia.Path)
                    };
            }

            await Commit();
        }
    }

    private async Task Commit()
    {
        await MediumChanged.InvokeAsync(Medium);
        StateHasChanged();
    }

    private void BackupItem(object s)
    {
        _selectedMediaBackup = _selectedMedia.Clone();
    }

    private void ResetItemToOriginalValues(object obj)
    {
        _selectedMedia = _selectedMediaBackup.Clone();
    }

    private void RowEditCommit(object obj)
    {
        //ignore
    }

}





    

