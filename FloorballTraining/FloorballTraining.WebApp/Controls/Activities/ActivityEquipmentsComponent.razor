@using FloorballTraining.WebApp.Pages.Equipments
@inject IViewEquipmentByNameUseCase ViewEquipmentByNameUseCase
@inject IAddEquipmentUseCase AddEquipmentUseCase

@if (!ReadOnly)
{
    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2 ma-0">
        <MudTextField Label="Nové vybavení" @bind-Value="_newEquipment" />
        <MudChip Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="AddEquipment">Přidat vybavení</MudChip>
    </MudPaper>
}

<MudPaper Elevation="0" Class="d-inline-flex flex-wrap my-2 align-items-start">
    @foreach (var possibleValue in _equipments)
    {
        <MudCheckBox T="bool" ReadOnly="@ReadOnly" Color="Color.Success" Class="text-break" Dense="true" Checked="@_selectedValues.Exists(s => s.Id == possibleValue.Id)" CheckedChanged="@((isChecked) => CheckboxChanged(isChecked, possibleValue))"> @possibleValue.Name</MudCheckBox>
    }
</MudPaper>


@code {
    [Parameter]
    public List<Equipment?>? SelectedValues { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public EventCallback<List<Equipment>> SelectedValuesChanged { get; set; }

    private string _newEquipment = string.Empty;
    private List<Equipment> _equipments = new();

    private List<Equipment> _selectedValues = new();

    protected override async Task OnInitializedAsync()
    {
        if (SelectedValues != null)
        {
            foreach (var item in SelectedValues.Where(s => s != null))
            {
                _selectedValues.Add(item!);
            }
        }

        await Refresh();
    }

    private async Task Refresh()
    {
        _equipments = (await ViewEquipmentByNameUseCase.ExecuteAsync()).ToList();
        _newEquipment = string.Empty;
    }


    private async Task CheckboxChanged(bool isChecked, Equipment value)
    {
        if (isChecked)
        {
            _selectedValues.Add(value);
        }
        else
        {
            var i = _selectedValues.First(e => e.Id == value.Id);
            _selectedValues.Remove(i);
        }

        await SelectedValuesChanged.InvokeAsync(_selectedValues);
    }

    private async Task AddEquipment()
    {
        if(!string.IsNullOrEmpty(_newEquipment))
        {
            var equipment = new Equipment
            {
                Name = _newEquipment
            };
            await AddEquipmentUseCase.ExecuteAsync(equipment);
            
            await Refresh();

        }
    }

}





    

