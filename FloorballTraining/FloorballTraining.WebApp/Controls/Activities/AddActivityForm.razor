@using FloorballTraining.Services
@using FluentValidation
@using FloorballTraining.CoreBusiness.Validations
@using FloorballTraining.WebApp.Data
@using FloorballTraining.WebApp.Validations
@using FluentValidation.Results
@using Environment = FloorballTraining.CoreBusiness.Environment

@inject IAddActivityUseCase AddActivityUseCase
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IFileHandlingService FileHandlingService
@inject AppSettings AppSettings

<MudPaper Elevation="0" Class="d-inline-flex z-100 position-sticky top-0 align-center justify-end align-content-end gap-2" Width="100%">
    <MudText Typo="Typo.h4">Nová aktivita</MudText>
    <MudSpacer />
    <MudChip Icon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Color="Color.Success" OnClick="Submit">Uložit</MudChip>
    <MudChip Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Outlined" OnClick="Cancel" Color="Color.Error">Zrušit</MudChip>
</MudPaper>

<EditForm OnValidSubmit="Submit" EditContext="_editContext">
    <FluentValidationValidator />
    <ValidationSummary />
    <MudPaper Elevation="0" Class="d-flex flex-column" Width="100%">

        
        <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2 align-items-end mud-width-full mb-2">
            <MudTextField Style="width:22em;" Class="flex-grow-0" Label="Název" @bind-Value="_activity.Name" For="() => _activity.Name" />
                
            <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                <MudText>Počet osob: @(StringExtensions.GetRangeString(_activity.PersonsMin, _activity.PersonsMax))</MudText>
                <RangeSlider @bind-ValueHigh="@_activity.PersonsMax" @bind-ValueLow="@_activity.PersonsMin" MinValue="1" MaxValue="@AppSettings.MaximalPersons" />
            </MudPaper>
            
            <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                <MudText>Doba trvání: @Duration</MudText>
                <RangeSlider @bind-ValueHigh="@_activity.DurationMax" @bind-ValueLow="@_activity.DurationMin" MaxValue="30" MinValue="1" />
            </MudPaper>

                <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                <MudText>Intensita: @Intensities.Values.First(v => v.Value == _activity.Intensity).Description</MudText>
                <Slider @bind-Value="@_activity.Intensity" MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue"  />
            </MudPaper>

                <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                <MudText>Obtížnost: @Difficulties.Values.First(v => v.Value == _activity.Difficulty).Description</MudText>
                <Slider @bind-Value="@_activity.Difficulty" MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue" />
            </MudPaper>
        </MudPaper>

        @*Místo*@
        <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
            <MudTextField T="int" @bind-Value="_activity.PlaceLength"/>
            <MudTextField T="int" @bind-Value="_activity.PlaceWidth" />

            <MudSelect T="Environment" @bind-Value="_activity.Environment" Text="@_activity.Environment.ToString()" Style="width:22em;">
                <MudSelectItem Value="Environment.Anywhere">Kdekoliv</MudSelectItem>
                <MudSelectItem Value="Environment.Indoor">Uvnitř</MudSelectItem>
                <MudSelectItem Value="Environment.Outdoor">Venku</MudSelectItem>
            </MudSelect>
                
        </MudPaper>

        <MudTextField Label="Popis" @bind-Value="_activity.Description" For="() => _activity.Description" Lines="6" Variant="Variant.Outlined" Margin="Margin.Dense" Class="my-5" />

        @*Osoby*@
        <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="true">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.People" Class="mr-3" />
                        <MudText><strong>Věkové kategorie</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    
                    <AgeGroupsComponent SelectedValues="@SelectedAgeGroups" SelectedValuesChanged="SelectedAgeGroupsChanged" />

                </ChildContent>
            </MudExpansionPanel>
        </MudPaper>

        @*Vybaveni*@
        <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="@SelectedEquipments.Any()">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="fas fa-thin fa-clipboard-list" Class="mr-3"></MudIcon>
                        <MudText><strong>Vybavení</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <ActivityEquipmentsComponent SelectedValues="@SelectedEquipments" SelectedValuesChanged="SelectedEquipmentsChanged" />
                </ChildContent>
            </MudExpansionPanel>
        </MudPaper>

        @*Stitky*@
        <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="@SelectedTags.Any()">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="fas fa-thin fa-tag" Class="mr-3"></MudIcon>
                        <MudText><strong>Štítky</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <TagExpandListComponent SelectedTags="@SelectedTags" OnSelectedTagsChanged="SelectedTagsChanged" />
                </ChildContent>


            </MudExpansionPanel>


        </MudPaper>

        @*Obrazky a videa*@
        <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="@SelectedMedium.Any(m => m is {MediaType: MediaType.Image })">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.Image" Class="mr-3"></MudIcon>
                        <MudText><strong>Obrázky, videa</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>

                    <ActivityDrawingComponent OnDrawingChanged="AddNewDrawing" />

                    <MudStack Style="width: 100%">

                        @foreach (var error in _validationResult.Errors)
                        {
                            <MudText>@error.ErrorMessage</MudText>
                        }
                        <MudFileUpload T="IBrowserFile" For="() => _file" @onclick="()=> _validationResult =new ValidationResult()" OnFilesChanged="OnInputFileChanged" Hidden="false" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20 justify-center align-center flex-auto cursor-pointer" InputStyle="opacity:0"
                        @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Accept=".png,.jpg,.jpeg,.bmp,.tif,.gif">

                            <ButtonTemplate Context="_">
                                <MudPaper Height="100px" Outlined="true" Class="@(_dragClass + " d-flex justify-center align-center align-content-center cursor-pointer" )">
                                    <div>Přesuňte soubory sem nebo zvolte možnost <strong>Procházet</strong> a soubory vyberte.</div>
                                </MudPaper>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudStack>

                    <ActivityMediumComponent Medium="@SelectedMedium.Where(m=> m is { MediaType: MediaType.Image } or { MediaType: MediaType.Video }).ToList()"
                                             MediumChanged="RefreshMedium" StorageLocation="@(NavigationManager.BaseUri + Configuration.GetValue<string>("FileStorage")!)" />

                </ChildContent>
            </MudExpansionPanel>
        </MudPaper>

        @*Odkazy*@
        <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="@SelectedMedium.Any(m => m is {MediaType: MediaType.URL })">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.Link" Class="mr-3"></MudIcon>
                        <MudText><strong>Odkazy</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudPaper Elevation="0" Class="mb-4 py-2">
                        <ActivityMediumUrlsComponent Medium="@SelectedMedium.Where(m=>m is {MediaType: MediaType.URL }).ToList()" MediumChanged="e=>RefreshMedium(e, MediaType.URL)" />
                    </MudPaper>
                </ChildContent>
            </MudExpansionPanel>
        </MudPaper>

    </MudPaper>
</EditForm>


@code {
    [Parameter]
    public EventCallback OnFormClosed { get; set; }

    [Parameter]
    public EventCallback<Activity> OnActivityAdded { get; set; }

    private Activity _activity = new();

    private EditContext _editContext = null!;

    private MudFileUpload<IReadOnlyList<IBrowserFile>> _mudUpload = new();

    private string Persons => StringExtensions.GetRangeString(_activity.PersonsMin, _activity.PersonsMax);
    private string Duration => StringExtensions.GetRangeString(_activity.DurationMin, _activity.DurationMax);

    private List<ActivityMedia> SelectedMedium => _activity.ActivityMedium.ToList();
    private List<Equipment?> SelectedEquipments => _activity.ActivityEquipments.Select(ae => ae.Equipment).ToList();
    private List<Tag?> SelectedTags => _activity.ActivityTags.Select(ae => ae.Tag).ToList();
    private List<AgeGroup> SelectedAgeGroups => _activity.ActivityAgeGroups.Select(ag => ag.AgeGroup!).ToList();


    private string _dragClass = DefaultDragClass;

    private List<ActivityMedia> _newActivityMedium = new();
    private IBrowserFile? _file;
    private readonly List<IBrowserFile?> _files = new();
    private ValidationResult _validationResult = new();
    private static readonly string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10 ";
    private string _mediaUrl = string.Empty;

    protected override void OnInitialized()
    {
        Refresh();
    }

    protected override async Task OnParametersSetAsync()
    {
        await new Task(Refresh);
    }

    private void Refresh()
    {
        _activity = new Activity();

        _editContext = new EditContext(_activity);
        _newActivityMedium = new List<ActivityMedia>();

        _editContext.MarkAsUnmodified();
    }


    private async Task Submit()
    {
        if (!_editContext.Validate()) return;

        foreach (var media in _activity.ActivityMedium.Where(am => am.MediaType==MediaType.Image))
        {
            FileHandlingService.Move(media.Path, _activity.Name);
        }

        foreach (var media in _newActivityMedium)
        {
            _activity.AddMedia(media);
        }

        await AddActivityUseCase.ExecuteAsync(_activity);
        await OnActivityAdded.InvokeAsync(_activity);
    }

    private void Cancel()
    {
        FileHandlingService.DeleteActivityFolder(_activity.Name);
        OnFormClosed.InvokeAsync();
    }

    private void SelectedTagsChanged(Activity a)
    {
        StateHasChanged();
    }

    private void SelectedTagsChanged(List<Tag> tags)
    {
        _activity.ActivityTags = new List<ActivityTag>();
        foreach (var tag in tags)
        {
            _activity.AddTag(tag);
        }

        StateHasChanged();
    }

    private void SelectedEquipmentsChanged(IEnumerable<Equipment> equipments)
    {
        _activity.ActivityEquipments = new List<ActivityEquipment>();

        foreach (var equipment in equipments)
        {
            _activity.AddEquipment(equipment);
        }

        StateHasChanged();
    }


    private void SelectedAgeGroupsChanged(IEnumerable<AgeGroup> ageGroups)
    {
        _activity.ActivityAgeGroups = new List<ActivityAgeGroup>();

        foreach (var ageGroup in ageGroups)
        {
            _activity.AddAgeGroup(ageGroup);
        }        
        StateHasChanged();
    }

    private void RefreshMedium(IEnumerable<ActivityMedia>? medium)
    {
        if (medium == null) return;

        var removedStoredMedium = _activity.ActivityMedium.Where(am => medium.All(m => am.ActivityMediaId != m.ActivityMediaId)).ToList();

        foreach (var media in removedStoredMedium)
        {
            FileHandlingService.Delete(media.Path, _activity.Name);

            _activity.ActivityMedium.Remove(media);
        }

        var removedNewMedium = _newActivityMedium.Where(am => medium.All(m => am.ActivityMediaId != m.ActivityMediaId)).ToList();

        foreach (var media in removedNewMedium)
        {
            FileHandlingService.Delete(media.Path, _activity.Name);
        }

        _newActivityMedium = new List<ActivityMedia>();

        foreach (var media in medium)
        {
            media.Activity = _activity;
            media.ActivityId = _activity.ActivityId;
            _newActivityMedium.Add(media);
        }

        StateHasChanged();
    }


    private void RefreshMedium(IEnumerable<ActivityMedia>? medium, MediaType mediaType)
    {
        if (medium == null) return;


        _activity.ActivityMedium.RemoveAll(r => r.MediaType == mediaType);

        foreach (var media in medium)
        {
            media.MediaType = mediaType;
            _activity.AddMedia(media);
        }

        StateHasChanged();
    }

    private async Task LoadFile(IBrowserFile? file)
    {
        var media = new ActivityMedia
        {
            MediaType = MediaType.Image,
            Path = await FileHandlingService.CaptureFile(file, _activity.Name)
        };
        

        _activity.AddMedia(media);

        StateHasChanged();

        _editContext.NotifyFieldChanged(new FieldIdentifier(_activity, nameof(_activity.ActivityMedium)));
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _file = e.File;

        if (_file == null)
        {
            return;
        }

        var fileValidator = new FileForUploadValidator();
        _validationResult = await fileValidator.ValidateAsync(_file);

        if (_validationResult.IsValid)
        {
            _files.Add(_file);

        }
        _file = null;

        await Upload();
    }

    private async Task Clear()
    {
        _files.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private async Task Upload()
    {
        foreach (var file in _files)
        {
            await LoadFile(file);
        }

        await Clear();
    }

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }


    private void AddUrl(string url)
    {
        _activity.AddMedia(new ActivityMedia
            {
                MediaType = MediaType.URL,
                Path = url

            });

        _mediaUrl = string.Empty;
    }

    private void AddNewDrawing(DrawingResult drawing)
    {
        var media = new ActivityMedia
            {
                MediaType = MediaType.Image,
                Path = string.Empty,
                Data = drawing.Json,
                Preview = drawing.Image,
                Activity = _activity,
                ActivityId = _activity.ActivityId
            };

        _newActivityMedium.Add(media);

        _activity.AddMedia(media);

        StateHasChanged();
        
    }

}
