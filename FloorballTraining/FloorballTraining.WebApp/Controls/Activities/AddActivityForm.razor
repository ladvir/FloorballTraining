@inject IAddActivityUseCase AddActivityUseCase

<MudText Typo="Typo.h4">Nová aktivita</MudText>


<EditForm Model="@_activity" OnValidSubmit="Submit">
    <FluentValidationValidator />
    <ValidationSummary />
    <MudPaper Elevation="0" Class="d-flex flex-column">
        <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4 justify-space-between" Width="100%">
            <MudTextField Label="Název" @bind-Value="_activity.Name" For="() => _activity.Name" />

               

            <MudPaper Elevation="0" Class="d-inline-flex gap-4">
                <MudPaper Elevation="0">
                    <MudText>Počet osob: @Persons</MudText>
                    <RangeSlider @bind-ValueHigh="@_activity.PersonsMax" @bind-ValueLow="@_activity.PersonsMin" MinValue="1" MaxValue="50" />
                </MudPaper>

                <MudPaper Elevation="0">
                    <MudText>Doba trvání: @Duration</MudText>
                    <RangeSlider @bind-ValueHigh="@_activity.DurationMax" @bind-ValueLow="@_activity.DurationMin" MaxValue="180" MinValue="1" />
                </MudPaper>
            </MudPaper>

            <MudSpacer/>

        </MudPaper>

        <MudTextField Label="Popis" For="()=>_activity.Description" @bind-Value="_activity.Description" Lines="6" Variant="Variant.Outlined" Margin="Margin.Dense" Class="my-5" />

        <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="false">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.VideoLibrary" Class="mr-3"></MudIcon>
                        <MudText><strong>Obrázky, videa, odkazy</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                   @* <ActivityMediumComponent SelectedValues="@SelectedMedium" SelectedValuesChanged="SelectedMediumChanged" />*@
                </ChildContent>
            </MudExpansionPanel>
        </MudPaper>


        <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="false">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="fas fa-thin fa-clipboard-list" Class="mr-3"></MudIcon>
                        <MudText><strong>Vybavení</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <ActivityEquipmentsComponent SelectedValues="@SelectedEquipments" SelectedValuesChanged="SelectedEquipmentsChanged" />
                </ChildContent>
            </MudExpansionPanel>
        </MudPaper>



        <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="false">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="fas fa-thin fa-tag" Class="mr-3"></MudIcon>
                        <MudText><strong>Štítky</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <TagExpandListComponent SelectedTags="@SelectedTags" OnSelectedTagsChanged="SelectedTagsChanged" />
                </ChildContent>


            </MudExpansionPanel>
        </MudPaper>
    </MudPaper>

    @*Buttons*@
    <MudPaper Elevation="0" Class="d-inline-flex my-2">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Cancel">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onkeypress:preventDefault>OK</MudButton>
    </MudPaper>
</EditForm>


@code {
    private readonly Activity _activity = new();

    private string Persons => StringExtensions.GetRangeString(_activity.PersonsMin, _activity.PersonsMax);
    private string Duration => StringExtensions.GetRangeString(_activity.DurationMin, _activity.DurationMax);

    private List<Media?> SelectedMedium => _activity.ActivityMedium.Select(ae => ae.Media).ToList();

    private List<Equipment?> SelectedEquipments => _activity.ActivityEquipments.Select(ae => ae.Equipment).ToList();

    private List<Tag?> SelectedTags => _activity.ActivityTags.Select(ae => ae.Tag).ToList();


    [Parameter]
    public EventCallback OnFormClosed { get; set; }

    [Parameter]
    public EventCallback<Activity> OnActivityAdded { get; set; }


    private async Task Submit()
    {
        await AddActivityUseCase.ExecuteAsync(_activity);
        await OnActivityAdded.InvokeAsync(_activity);
    }

    private void Cancel()
    {
        OnFormClosed.InvokeAsync();
    }
    private void SelectedTagsChanged(Activity a)
    {
        StateHasChanged();
    }

    private void SelectedTagsChanged(List<Tag> tags)
    {
        _activity.ActivityTags = new List<ActivityTag>();
        foreach (var tag in tags)
        {
            _activity.AddTag(tag);
        }

        StateHasChanged();
    }


    private void SelectedEquipmentsChanged(IEnumerable<Equipment> equipments)
    {

        _activity.ActivityEquipments = new List<ActivityEquipment>();


        foreach (var equipment in equipments)
        {
            _activity.AddEquipment(equipment);
        }


        StateHasChanged();


    }

}
