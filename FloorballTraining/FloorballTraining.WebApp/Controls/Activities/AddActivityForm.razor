@using FloorballTraining.WebApp.Services
@using FluentValidation
@using FloorballTraining.CoreBusiness.Validations
@using FloorballTraining.WebApp.Validations
@using FluentValidation.Results

@inject IAddActivityUseCase AddActivityUseCase
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject IFileHandlingService FileHandlingService

<MudText Typo="Typo.h4">Nová aktivita</MudText>


<EditForm Model="@_activity" OnValidSubmit="Submit">
    <FluentValidationValidator />
    <ValidationSummary />
    <MudPaper Elevation="0" Class="d-flex flex-column">
        <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4 justify-space-between" Width="100%">
            <MudTextField Label="Název" @bind-Value="_activity.Name" For="() => _activity.Name" />

            <MudPaper Elevation="0" Class="d-inline-flex gap-4">
                <MudPaper Elevation="0">
                    <MudText>Počet osob: @Persons</MudText>
                    <RangeSlider @bind-ValueHigh="@_activity.PersonsMax" @bind-ValueLow="@_activity.PersonsMin" MinValue="1" MaxValue="50" />
                </MudPaper>

                <MudPaper Elevation="0">
                    <MudText>Doba trvání: @Duration</MudText>
                    <RangeSlider @bind-ValueHigh="@_activity.DurationMax" @bind-ValueLow="@_activity.DurationMin" MaxValue="30" MinValue="1" />
                </MudPaper>
            </MudPaper>

            <MudSpacer/>

        </MudPaper>

        <MudTextField Label="Popis" For="()=>_activity.Description" @bind-Value="_activity.Description" Lines="6" Variant="Variant.Outlined" Margin="Margin.Dense" Class="my-5" />

        <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="false">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.VideoLibrary" Class="mr-3"></MudIcon>
                        <MudText><strong>Obrázky, videa, odkazy</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudStack Style="width: 100%">
                             
                            @foreach (var error in _validationResult.Errors) {
                                 <MudText>@error.ErrorMessage</MudText>
                            }
                            <MudFileUpload T="IBrowserFile" For="() => _file" @onclick="()=> _validationResult =new ValidationResult()" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                                       @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Accept=".png,.jpg,.jpeg,.bmp,.tif,.gif" >
                                       
                            <ButtonTemplate Context="_">
                                <MudPaper Height="100px" Outlined="true" Class="_dragClass">
                                    <div>Přesuňte soubory sem nebo zvolte možnost <strong>Procházet</strong> a soubory vyberte.</div>
                                    
                                </MudPaper>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudStack>

                    <ActivityMediumComponent Medium="@SelectedMedium.Where(m=>m!.MediaType==MediaType.Image).ToList()" MediumDeleted="e=>RefreshMedium(e, MediaType.Image)" StorageLocation="@(NavigationManager.BaseUri + Configuration.GetValue<string>("FileStorage")!)" />


                        <MudInput T="string" @bind-Value="_mediaUrl">ass</MudInput>

                    <MudButton OnClick="()=>AddUrl(_mediaUrl)">Přidej</MudButton>

                    <ActivityMediumUrlsComponent Medium="@SelectedMedium.Where(m=>m!.MediaType==MediaType.URL).ToList()" MediumDeleted="e=>RefreshMedium(e, MediaType.URL)" />


                </ChildContent>
            </MudExpansionPanel>
        </MudPaper>

        <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="false">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="fas fa-thin fa-clipboard-list" Class="mr-3"></MudIcon>
                        <MudText><strong>Vybavení</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <ActivityEquipmentsComponent SelectedValues="@SelectedEquipments" SelectedValuesChanged="SelectedEquipmentsChanged" />
                </ChildContent>
            </MudExpansionPanel>
        </MudPaper>

        <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="false">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="fas fa-thin fa-tag" Class="mr-3"></MudIcon>
                        <MudText><strong>Štítky</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <TagExpandListComponent SelectedTags="@SelectedTags" OnSelectedTagsChanged="SelectedTagsChanged" />
                </ChildContent>
                </MudExpansionPanel>
        </MudPaper>
    </MudPaper>

    @*Buttons*@
    <MudPaper Elevation="0" Class="d-inline-flex my-2">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Cancel">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onkeypress:preventDefault>OK</MudButton>
    </MudPaper>
</EditForm>


@code {
    [Parameter]
    public EventCallback OnFormClosed { get; set; }

    [Parameter]
    public EventCallback<Activity> OnActivityAdded { get; set; }

    private readonly Activity _activity = new();

    private MudFileUpload<IReadOnlyList<IBrowserFile>> _mudUpload = new();

    private string Persons => StringExtensions.GetRangeString(_activity.PersonsMin, _activity.PersonsMax);
    private string Duration => StringExtensions.GetRangeString(_activity.DurationMin, _activity.DurationMax);

    private List<Media?> SelectedMedium => _activity.ActivityMedium.Select(ae => ae.Media).ToList();

    private List<Equipment?> SelectedEquipments => _activity.ActivityEquipments.Select(ae => ae.Equipment).ToList();

    private List<Tag?> SelectedTags => _activity.ActivityTags.Select(ae => ae.Tag).ToList();

    private static string _defaultDragClass = " relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10 justify-start align-content-start";
    private string _dragClass = _defaultDragClass;

    
    private IBrowserFile? _file;
    private ValidationResult _validationResult = new();


    private List<MediaFile> _mediaFiles = new();

    private string _mediaUrl = string.Empty;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _file = e.File;

        if (_file == null)
        {
            return;
        }

        var fileValidator = new FileForUploadValidator();
        _validationResult = await fileValidator.ValidateAsync(_file);

        if (_validationResult.IsValid) {

            _mediaFiles.Add(
                new MediaFile
                    {
                        BrowserFile = _file,
                        Name=_file.Name
                    }
            );
        }
        _file = null;

        await Upload();
    }

    private async Task Clear()
    {

        _mediaFiles.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private async Task Upload()
    {
        foreach (var mediaFile in _mediaFiles)
        {
            await LoadFile(mediaFile);
        }

        await Clear();

        StateHasChanged();
    }

    private void SetDragClass()
    {
        _dragClass = $"{_defaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = _defaultDragClass;
    }

    private async Task Submit()
    {
        foreach (var media in _activity.ActivityMedium.Where(am => am.Media != null).Select(am => am.Media))
        {
            FileHandlingService.Move(media!.Path, _activity.Name);
        }
        await AddActivityUseCase.ExecuteAsync(_activity);
        await OnActivityAdded.InvokeAsync(_activity);
    }

    private void Cancel()
    {
        FileHandlingService.DeleteActivityFolder(_activity.Name);
        OnFormClosed.InvokeAsync();
    }

    private void SelectedTagsChanged(Activity a)
    {
        StateHasChanged();
    }

    private void SelectedTagsChanged(List<Tag> tags)
    {
        _activity.ActivityTags = new List<ActivityTag>();
        foreach (var tag in tags)
        {
            _activity.AddTag(tag);
        }

        StateHasChanged();
    }

    private void SelectedEquipmentsChanged(IEnumerable<Equipment> equipments)
    {
        _activity.ActivityEquipments = new List<ActivityEquipment>();

        foreach (var equipment in equipments)
        {
            _activity.AddEquipment(equipment);
        }

        StateHasChanged();
    }


    private void RefreshMedium(IEnumerable<Media>? medium, MediaType mediaType)
    {
        if (medium == null) return;


        _activity.ActivityMedium.RemoveAll(r => r.Media!.MediaType == mediaType);

        foreach (var media in medium)
        {
            media.MediaType = mediaType;
            _activity.AddMedia(media);
        }

        StateHasChanged();
    }

    private async Task LoadFile(MediaFile mediafile)
    {
        _activity.AddMedia(new Media
        {
            MediaType = MediaType.Image,
            Name = mediafile.Name,
            Path = await FileHandlingService.CaptureFile(mediafile.BrowserFile, _activity.Name)

        });

       // StateHasChanged();
    }


    private void AddUrl(string url)
    {
        _activity.AddMedia(new Media
            {
                MediaType = MediaType.URL,
                Path = url

            });

        _mediaUrl = string.Empty;
    }

    public class MediaFile
    {
        public string FileName { get; set; } = string.Empty;
        public IBrowserFile? BrowserFile { get; set; }
        public string Name { get; set; } = string.Empty;
    }

}
