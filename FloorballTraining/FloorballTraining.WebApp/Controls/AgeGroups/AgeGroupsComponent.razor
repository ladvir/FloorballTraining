@using FloorballTraining.UseCases.AgeGroups
@using FloorballTraining.CoreBusiness.Dtos
@inject IViewAgeGroupsUseCase ViewAgeGroupsUseCase

<MudPaper Elevation="0" Class="d-inline-flex flex-wrap align-items-start">
    @foreach (var possibleValue in _ageGroups)
    {
        <MudCheckBox T="bool" Color="Color.Success" Class="mr-4 d-inline-flex flex-wrap" ReadOnly="@(ReadOnly || possibleValue.IsAnyAge() && IsChecked(possibleValue.Id))" Size="Size.Small" Style="vertical-align: middle;"
                     Dense="true" Checked="@IsChecked(possibleValue.Id)" CheckedChanged="@((isChecked) => CheckboxChanged(isChecked, possibleValue))">
            <MudText Typo="Typo.caption">@possibleValue.Description</MudText>

        </MudCheckBox>
    }
</MudPaper>


@code {
    [Parameter]
    public IEnumerable<AgeGroupDto>? SelectedValues { get; set; } 

    [Parameter]
    public EventCallback<List<AgeGroupDto>> SelectedValuesChanged { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    private IEnumerable<AgeGroupDto> _ageGroups = new List<AgeGroupDto>();

    private List<AgeGroupDto> _selectedValues = new();

    protected override async Task OnInitializedAsync()
    {
        if(SelectedValues!=null)
        {
            foreach (var item in SelectedValues)
            {
                _selectedValues.Add(item);
            }
        } 

        var ageGroups = await ViewAgeGroupsUseCase.ExecuteAsync(new AgeGroupSpecificationParameters());
        _ageGroups = ageGroups.Data.ToList();

        if (!_selectedValues.Any())
        {
            var firstAnyAge = _ageGroups.FirstOrDefault(ag => ag.IsAnyAge());

            if (firstAnyAge != null)
            {
                _selectedValues.Add(firstAnyAge);
                await SelectedValuesChanged.InvokeAsync(_selectedValues);
            }
        }
        

    }

    private bool IsChecked(long id)
    {
        return _selectedValues.Exists(s => s.Id == id);
    }

    private async Task CheckboxChanged(bool isChecked, AgeGroupDto value)
    {

        var cats = _ageGroups.Where(ag => !ag.IsAnyAge()).ToList();

        var isAnyAgeChecked = SelectedValues != null && SelectedValues.Any(sv => sv.IsAnyAge());

        if (isChecked)
        {
            if (isAnyAgeChecked)
            {
                _selectedValues.Clear();
            }
            var i = _ageGroups.First(s => s.Id == value.Id);
            _selectedValues.Add(i);

            var selectedAll = cats.All(s => _selectedValues.Exists(c => c == s));

            if (selectedAll || value.IsAnyAge())
            {
                _selectedValues.Clear();

                var anyAge = _ageGroups.First(ag => ag.IsAnyAge());
                _selectedValues.Add(anyAge);
            }

        }
        else
        {
            if (value.IsAnyAge())
            {
                _selectedValues.Clear();
            }
            else
            {
                var i = _selectedValues.First(s => s.Id == value.Id);
                _selectedValues.Remove(i);
            }
        }

        await SelectedValuesChanged.InvokeAsync(_selectedValues);
    }
}





    

