@using Microsoft.AspNetCore.Components
@using MudBlazor.Utilities
@using FloorballTraining.WebApp.Data
@using System.Text

@inject IJSRuntime JsRuntime

@inject Microsoft.Extensions.Options.IOptions<Microsoft.AspNetCore.SignalR.HubOptions> Options


<MudPaper Elevation="0" Class="ma-0 pa-0">
    <MudPaper Elevation="0" Class="d-inline-block gap-2">
        <MudIconButton Color="Color.Success" Title="Uložit" Size="Size.Large"  Variant="Variant.Outlined" Icon="@Icons.Material.Sharp.Save" OnClick="SaveAsJson" />
        <MudIconButton Color="Color.Success" Title="Uložit na disk" Size="Size.Large"  Icon="@Icons.Material.Sharp.Download" OnClick="Download" />
        <MudIconButton id="newdrawing" Color="Color.Secondary" Title="Nový" Size="Size.Large" Icon="@Icons.Material.Sharp.Create" OnClick="NewDrawing" />
    </MudPaper>

    @*Fields*@
    <MudPaper Elevation="0" Class="d-inline-flex align-content-start justify-content-start">
        @foreach (var field in Assets.Fields)
        {
            <MudButton OnClick="@(()=>SetField(field.Value))">
                <MudImage ObjectFit="ObjectFit.Fill" Width="64" Height="64" Src="@field.Value" Elevation="0" Class="rounded" />
            </MudButton>
        }
    </MudPaper>

    @*Drawings*@
    <MudPaper Elevation="0" Class="d-inline-flex align-content-start justify-content-start gap-4">
        @foreach (var drawing in Assets.Drawings)
        {
            <MudButton OnClick="@(()=>SetTool(drawing.Key))" Style="@(_tool==drawing.Key? "background-color:#ffb31f;": "")">
                <MudImage ObjectFit="ObjectFit.Fill" Width="64" Height="64" Src="@drawing.Value" Elevation="0" Class="rounded"  />
            </MudButton>
        }
    </MudPaper>

    @*Tools*@
    <MudPaper Elevation="0" Class="d-inline-flex align-content-start justify-content-start gap-4">
        <MudColorPicker id="colorpicker" Style=@($" width:140px;color: {_colorValue};") ColorPickerView="ColorPickerView.Palette" Label="Barva" @bind-value="@_colorValue" />
        <MudIconButton id="@Assets.ToolDelete" Icon="@Icons.Material.Sharp.Delete" Color="Color.Info" OnClick="@(DeleteSelectedShapes)">Smazat</MudIconButton>

    </MudPaper>
    <MudPaper id="@ContainerId" Class="ma-0 pa-0 d-block" Style="width: 100%; height: 80vh;"></MudPaper>
</MudPaper>

@code {
    [Parameter]
    public string DrawingAsJson { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<DrawingResult> OnDrawingChanged { get; set; }


    private const string ContainerId = "container";

    private string _tool = string.Empty;

    private MudColor _colorValue = null!;

    private IJSObjectReference? DrawingTool { get; set; } 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender || DrawingTool is null) {
            DrawingTool = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./DrawingTool.js");
            await DrawingTool.InvokeVoidAsync("init", ContainerId, null, null);
        }

            if (!string.IsNullOrEmpty(DrawingAsJson))
            {
                await DrawingTool.InvokeVoidAsync("loadDrawing", ContainerId, DrawingAsJson);
            }
    }

    private async Task SetTool(string toolId)
    {
        _tool = _tool == toolId ? string.Empty : toolId;

        await DrawingTool.InvokeVoidAsync("setTool", _tool);
    }

    private async Task Download()
    {
        await DrawingTool.InvokeVoidAsync("saveDrawing");
    }

    private async Task SaveAsJson()
    {
        var json = await DrawingTool.InvokeAsync<string>("saveAsJson");

        var fileLength = await DrawingTool.InvokeAsync<int>("exportImageAndGetBase64Length");

        var a = Options.Value;
        var maximumSingnalRMessageSize = (long) (a.MaximumReceiveMessageSize is null or > long.MaxValue ? long.MaxValue : a.MaximumReceiveMessageSize);

        var chunkLength = maximumSingnalRMessageSize / sizeof(char);

        var sb = new StringBuilder();
        for (long startIndex = 0, endIndex = chunkLength; startIndex <= fileLength; startIndex += chunkLength, endIndex += chunkLength) {
            if (endIndex > fileLength + 1)
                endIndex = fileLength + 1;
            var chunk = await DrawingTool.InvokeAsync<string>("getChunk", startIndex, endIndex);
            sb.Append(chunk);
        }
        
        var drawing = new DrawingResult
            {
                Image = sb.ToString(),
                Json = json
            };

        await OnDrawingChanged.InvokeAsync(drawing);
    }
    
    private async Task NewDrawing()
    {
        await DrawingTool.InvokeVoidAsync("newDrawing");
    }

    private async Task SetField(string field)
    {
        await DrawingTool.InvokeVoidAsync("setField", field);
    }

    private async Task DeleteSelectedShapes()
    {
        await DrawingTool.InvokeVoidAsync("deleteSelectedShapes");
    }

    private async Task LoadJson()
    {
        await DrawingTool.InvokeVoidAsync("loadDrawing", ContainerId, DrawingAsJson);
    }

    

}
