@using Microsoft.AspNetCore.Components
@using MudBlazor.Utilities

@inject IJSRuntime JsRuntime

<MudPaper Elevation="0" Class="" Width="100%">
    @*Fields*@
    <MudStack AlignItems="AlignItems.Start" Justify="Justify.FlexStart" Class="" Row="true">
        @foreach (var field in Assets.Fields)
        {
            <MudButton OnClick="@(()=>SetField(field.Value))">
                    <MudImage ObjectFit="ObjectFit.Fill" Width="64" Height="64" Src="@field.Value" Elevation="0" Class="rounded" />
            </MudButton>
        }
    </MudStack>

    

    <MudStack AlignItems="AlignItems.Start" Justify="Justify.FlexStart" Class="">
    <MudPaper Elevation="2" Class="d-inline-flex flex-wrap mb-2 gap-4 border-2 border-light align-content-center align-center" >
        <MudPaper Elevation="0" Class="d-inline-block gap-2">
            <MudIconButton Color="Color.Success" Title="Uložit" Icon="@Icons.Material.Sharp.Save" OnClick="SaveDrawing" />
            <MudIconButton id="newdrawing" Color="Color.Secondary" Title="Nový" Icon="@Icons.Material.Sharp.Create" OnClick="NewDrawing" />
        </MudPaper>
        @*Drawings*@
        <MudStack AlignItems="AlignItems.Start" Justify="Justify.FlexStart" Class="" Row="true">
            @foreach (var drawing in Assets.Drawings)
            {
                <MudButton OnClick="@(()=>SetTool(drawing.Key))">
                    <MudImage ObjectFit="ObjectFit.Fill" Width="64" Height="64" Src="@drawing.Value" Elevation="0" Class="rounded" />
                </MudButton>
            }
        </MudStack>
        


        <MudColorPicker id="colorpicker" Style="@($"width:140px;color:{_colorValue};")" ColorPickerView="ColorPickerView.Palette" Label="Barva" @bind-value="@_colorValue" />
       
        <MudPaper Elevation="0" Class="d-inline-block gap-2">
            <MudIconButton id="@Assets.ToolDelete" CheckedIcon="@Icons.Material.Sharp.Delete" Icon="@Icons.Material.Sharp.Delete" Color="Color.Info" OnClick="@(DeleteSelectedShapes)">Smazat</MudIconButton>
        </MudPaper>
    </MudPaper>


    
    </MudStack>
    <div style="width:100%;max-height:80vh;" id="container"></div>
</MudPaper>

@code {
    

    private string _tool = string.Empty;

    private MudColor _colorValue =null!;

    private string ColorPickerStyle => $"width:140px;color: {_colorValue};";

    private IJSObjectReference Konva { get; set; } = null!;


    private string _buttonStyle = "background-color:white;";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Konva = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./DrawingTool.js");
            await Konva.InvokeVoidAsync("init", "container"); // "container" je ID divu pro umístění plátna Konva.js
        }
    }
}


@code {

    private async Task SetTool(string toolId)
    {
        _tool = _tool == toolId ? string.Empty : toolId;
        await Konva.InvokeVoidAsync("setTool", _tool);
    }

    private async Task SaveDrawing()
    {
        await Konva.InvokeVoidAsync("saveDrawing");
    }

    private async Task NewDrawing()
    {
        await Konva.InvokeVoidAsync("newDrawing");
    }

    private async Task SetField(string field)
    {
        await Konva.InvokeVoidAsync("setField", field);
    }

    private async Task DeleteSelectedShapes()
    {
        await Konva.InvokeVoidAsync("deleteSelectedShapes");
    }

}
