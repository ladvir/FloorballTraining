<MudPaper Elevation="0" Class="d-inline-flex flex-wrap my-2 align-items-start">
    @foreach (var possibleValue in _ageGroups)
    {
        <MudCheckBox T="bool" Color="Color.Success" Class="mr-4 d-inline-flex flex-wrap" ReadOnly="@ReadOnly" Size="Size.Small" Style="vertical-align: middle;" Dense="true" Checked="@SelectedValues.Contains(possibleValue)" CheckedChanged="@((isChecked) => CheckboxChanged(isChecked, possibleValue))"> @possibleValue.GetDescription()</MudCheckBox>
    }
</MudPaper>

@code {
    [Parameter]
    public List<AgeGroup> SelectedValues { get; set; } = new();

    [Parameter]
    public EventCallback<List<AgeGroup>> SelectedValuesChanged { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    private List<AgeGroup> _ageGroups = Enum.GetValues<AgeGroup>().ToList();



    private async Task CheckboxChanged(bool isChecked, AgeGroup value)
    {

        var cats = _ageGroups.Where(ag => ag != AgeGroup.Kdokoliv).ToList();

        var isKdokolivChecked = SelectedValues.Contains(AgeGroup.Kdokoliv);

        if (isChecked)
        {
            if (isKdokolivChecked) {
                SelectedValues.Clear();
            }

            SelectedValues.Add(value);


            var selectedAll = cats.All(s => SelectedValues.Exists(c => c == s)); 

            if (selectedAll || value == AgeGroup.Kdokoliv)
            {
                SelectedValues.Clear();
                SelectedValues.Add(AgeGroup.Kdokoliv);
            }

        }
        else
        {
            if (value == AgeGroup.Kdokoliv)
            {
                SelectedValues.Clear();
            }
            else
            {
                SelectedValues.Remove(value);
            }
        }

        await SelectedValuesChanged.InvokeAsync(SelectedValues);
    }
}





    

