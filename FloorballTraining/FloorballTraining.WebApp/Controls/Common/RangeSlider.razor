<div id="rc-@_id">
    @(
        new MarkupString($@"<style>
    #rc-{_id} {{
    position: relative;
    min-width: {MinWidth};
    }}

    #rc-{_id} > input[type='range'] {{
    padding: 0;
    margin: 0;
    display: inline-block;
    vertical-align: top;
    width: 100%;

    }}


    #rc-{_id} > input[name='low-range'] {{
    position: absolute;


    }}

    #rc-{_id} > input[name='high-range'] {{
    position: relative; 
    }}


    #rc-{_id} > input[name='low-range']::-webkit-slider-thumb {{
    position: relative;
    z-index: 2;
    }}

    #rc-{_id} > input[name='low-range']::-moz-range-thumb {{
    transform: scale(1); /* FF doesn't apply position it seems */
    z-index: 1;
    }}
    
    </style>"))
    <input name="low-range" type="range" min="@MinValue" max="@MaxValue" @bind="@ValueLow" @bind:event="oninput"  />
    <input name="high-range" type="range" min="@MinValue" max="@MaxValue" @bind="@ValueHigh" @bind:event="oninput"  />
</div>
@code
{


    int _valueLow = 0;
    int _valueHigh = 100;
    bool _firstTimeChanged = false;
    [Parameter] public string MinWidth { get; set; } = "200px";
    [Parameter] public int MinValue { get; set; } = 0;
    [Parameter] public int MaxValue { get; set; } = 100;

    [Parameter]
    public Color Color { get; set; } = Color.Primary;

    [Parameter]
    public int ValueLow
    {
        get => Math.Min(_valueLow, _valueHigh);
        set
        {
            if (_valueLow.Equals(value))
                return;
            _valueLow = value;
            if (_valueLow >= _valueHigh)
            {
                _valueLow = _valueHigh;
                _valueHigh = value;
                ValueHighChanged.InvokeAsync(_valueHigh);
            }
            ValueLowChanged.InvokeAsync(_valueLow);
            if (_firstTimeChanged) Changed.InvokeAsync();
        }
    }
    [Parameter]
    public int ValueHigh
    {
        get => Math.Max(_valueLow, _valueHigh);
        set
        {


            if (_valueHigh.Equals(value))
                return;
            _valueHigh = value;
            if (_valueLow >= _valueHigh)
            {
                _valueHigh = _valueLow;
                _valueLow = value;
                ValueLowChanged.InvokeAsync(_valueLow);
            }
            ValueHighChanged.InvokeAsync(_valueHigh);
                if (_firstTimeChanged) Changed.InvokeAsync();
        }
    }
    [Parameter] public EventCallback<int> ValueLowChanged { get; set; }
    [Parameter] public EventCallback<int> ValueHighChanged { get; set; }

    [Parameter] public EventCallback Changed { get; set; }
    readonly string _id = Guid.NewGuid().ToString().Replace("-", "")[15..];

    protected override void OnParametersSet()
    {
        _firstTimeChanged = true;
        
    }
}