@using FloorballTraining.CoreBusiness.Dtos
@using FloorballTraining.CoreBusiness.Specifications
@inject IViewTagsWithSpecificationUseCase ViewTagsUseCase
<MudPaper Elevation="0" Class="d-flex flex-wrap gap-2 mx-0 my-1 mud-width-full">

    @foreach (var parent in Parents.OrderBy(o => o.Name))
    {
        var childrenTags = AllTags.Where(t => t.ParentTagName != null && t.ParentTagName == parent.Name).OrderBy(o => o.Name).ToList();

        if (!childrenTags.Any()) continue;

        <MudPaper Elevation="0" Square="true" MinWidth="10vw;" Class="px-2 border-1 rounded-3 border-dark">
            <MudPaper Elevation="0">
                <MudText Typo="Typo.caption"><strong>@parent.Name</strong></MudText>
            </MudPaper>

            <MudPaper Elevation="0" Dense="true" Class="d-inline-flex flex-wrap">
                @foreach (var child in childrenTags)
                {
                    bool isSelected = false ;

                    if (SelectedTags != null)
                    {
                        isSelected = SelectedTags.Select(t => t.Id).Contains(child.Id);
                    }

                    _colorStyle = $"background-color: {(isSelected ? child.Color : Color.Transparent)} ; border:2px solid {Color.Dark}; ";

                    <MudChip OnClick="@(_=> { OnTagClick(child); })" Color="Color.Transparent" Style="@_colorStyle" Size="Size.Small">@child.Name</MudChip>
                }
            </MudPaper>
        </MudPaper>
    }
</MudPaper>

@code {
    [Parameter]
    public List<TagDto> SelectedTags { get; set; } = new();

    [Parameter]
    public bool TrainingGoalsOnly { get; set; } 

    [Parameter]
    public EventCallback<List<TagDto>> OnSelectedTagsChanged { get; set; }

    private List<TagDto> AllTags { get; set; } = new();

    private IEnumerable<TagDto> Parents => AllTags.Where(t => t.ParentTagId==null || (!TrainingGoalsOnly || t.IsTrainingGoal));
    private string _colorStyle = string.Empty;

    private string _newTagName = string.Empty;

    private TagDto _selectedParentForNewTag = new();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();

        _selectedParentForNewTag = Parents.First();
    }

    private async Task Refresh()
    {
        var data = await ViewTagsUseCase.ViewPaginatedAsync(new TagSpecificationParameters ());

        AllTags = data.Data.ToList();
        _newTagName = string.Empty;
    }

    private void OnTagClick(TagDto tag)
    {
        if (SelectedTags.Contains(tag))
        {
            SelectedTags.Remove(tag);
            StateHasChanged();
        }
        else
        {
            SelectedTags.Add(tag);
        }

        OnSelectedTagsChanged.InvokeAsync(SelectedTags);
    }
}


