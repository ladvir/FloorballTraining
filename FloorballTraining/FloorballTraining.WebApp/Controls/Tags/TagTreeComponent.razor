@* @using FloorballTraining.CoreBusiness.Dtos
@inject IViewTagByNameUseCase ViewTagByNameUseCase

<MudPaper Elevation="0">
    <MudList Clickable="@true" Dense="@true" >
        <MudListSubheader DisableGutters="true">
            <SearchComponent OnSearchItem="OnSearchItem"/>
        </MudListSubheader>
        
        @foreach (var parent in AllTags.Where(t=>t.ParentTag==null).OrderBy(o=>o.Name))
        {
            <CascadingValue Value="this">
                <TagTreeItemComponent Tag="@parent" SelectedTags="@SelectedTags" AllTags="@AllTags"/>
            </CascadingValue>
        }

    </MudList>
</MudPaper>

@code {
    [Parameter]
    public List<TagWithParentAndTrainingGoalDto> SelectedTags { get; set; } = new ();

    [Parameter]
    public List<TagWithParentAndTrainingGoalDto> AllTags { get; set; } = new ();


    [Parameter]
    public EventCallback<List<TagWithParentAndTrainingGoalDto>> OnSelectedTagsChanged { get; set; }


    private string _searchString = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        await Search();
    }

    private async Task Search()
    {
        AllTags = (await ViewTagByNameUseCase.ExecuteAsync(_searchString)).ToList();
    }

    private async Task OnSearchItem(string searchString)
    {
        _searchString = searchString;

        await Search();
    }

    private void AddTag()
    {
        //NavigationManager.NavigateTo("/addtag");
    }


    public void Refresh(List<TagWithParentAndTrainingGoalDto> selectedTags)
    {
        SelectedTags = selectedTags;
        OnSelectedTagsChanged.InvokeAsync(SelectedTags);
        StateHasChanged();
    }

}
 *@