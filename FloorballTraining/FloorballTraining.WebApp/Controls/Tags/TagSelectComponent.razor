@using FloorballTraining.CoreBusiness.Dtos
@inject IViewTagByNameUseCase ViewTagByNameUseCase


    <MudChipSet MultiSelection="false" Mandatory="true" Class="d-inline-flex flex-wrap gap-1 ">

        @foreach (var parent in Parents.OrderBy(o => o.Name))
        {
            var childrenTags = AllTags.Where(t => t.ParentTag != null && t.ParentTag == parent.Name).OrderBy(o => o.Name).ToList();

            if (!childrenTags.Any()) continue;

            <MudPaper Elevation="0" Square="true" MinWidth="10vw;" Class="pa-2">
                @if(ShowParentName) {
                    <MudPaper Elevation="0">
                        <MudText Typo="Typo.h6">@parent.Name</MudText>
                    </MudPaper>
                }

                <MudPaper Elevation="0" Dense="true" Class="d-inline-flex flex-wrap gap-1">
                    @foreach (var child in childrenTags)
                    {
                        _colorStyle = $"background-color: {(SelectedTag?.Id == child.Id ? child.Color : Color.Transparent)} ; border:2px solid {Color.Dark}; ";
                         <MudChip OnClick="@(_=>OnTagClick(child))" Color="Color.Transparent" Style="@_colorStyle" Class="text-wrap" Size="Size.Small">@child.Name</MudChip>
                    }
                </MudPaper>
            </MudPaper>
        }
    </MudChipSet>


@code {
    [Parameter]
    public TagDto? SelectedTag { get; set; }

    [Parameter]
    public bool TrainingGoalsOnly { get; set; }

    [Parameter]
    public bool ShowParentName { get; set; } = true;

    [Parameter]
    public EventCallback<TagDto> OnSelectedTagChanged { get; set; }

    private List<TagDto> AllTags { get; set; } = new();

    private IEnumerable<TagDto> Parents => AllTags.Where(t => string.IsNullOrEmpty(t.ParentTag));
    private string _colorStyle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        AllTags = (await ViewTagByNameUseCase.ExecuteAsync(null,TrainingGoalsOnly)).ToList();
    }

    private void OnTagClick(TagDto tag)
    {
        OnSelectedTagChanged.InvokeAsync(tag);
    }
}


