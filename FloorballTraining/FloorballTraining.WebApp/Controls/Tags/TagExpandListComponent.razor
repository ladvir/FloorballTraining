@using FloorballTraining.CoreBusiness.Dtos
@using FloorballTraining.CoreBusiness.Specifications
@inject IViewTagsUseCase ViewTagsUseCase
@inject IAddTagUseCase AddTagUseCase
@inject IGetTagByIdUseCase GetTagByIdUseCase

    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2 my-2 ">
        <MudTextField Label="Nový štítek" @bind-Value="_newTagName" MaxLength="50" />
        <MudSelect T="TagDto" @bind-Value="_selectedParentForNewTag" MultiSelection="false" FullWidth="true">
            @foreach (var parent in Parents)
            {
                <MudSelectItem Value="@parent">@parent.Name</MudSelectItem>
            }
        </MudSelect>
        <MudChip Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="AddNewTag">Přidat štítek</MudChip>
    </MudPaper>


<MudPaper Elevation="0" Class="d-flex flex-wrap gap-2 mx-0 my-1" >
    
    @foreach (var parent in Parents.OrderBy(o => o.Name))
    {
        var childrenTags = AllTags.Where(t => !string.IsNullOrEmpty(t.ParentTag) && t.ParentTag == parent.Name).OrderBy(o => o.Name).ToList();
        
        <MudPaper Elevation="1" Square="true" MinWidth="10vw;"  Class="pa-1">
            <MudPaper Elevation="0">
                <MudText Typo="Typo.h6">@parent.Name</MudText>
            </MudPaper>
           
                <MudPaper Elevation="0" Dense="true" Class="d-inline-flex flex-wrap gap-1" >
                @foreach (var child in childrenTags)
                {
                    var isSelected = SelectedTags.Exists(x=>x.Id==child.Id);

                    _colorStyle = $"background-color: {(isSelected ? child.Color : Color.Transparent)} ; border:2px solid {Color.Dark}; ";

                    <MudChip OnClick="@(_=>OnTagClick(child))" Color="Color.Transparent" Style="@_colorStyle">@child.Name</MudChip>
                }
            </MudPaper>
        </MudPaper>
        }
</MudPaper>

@code {
    [Parameter]
    public List<TagDto> SelectedTags { get; set; } = new();

    [Parameter]
    public EventCallback<List<TagDto>> OnSelectedTagsChanged { get; set; }

    private List<TagDto> AllTags { get; set; } = new();

    private IEnumerable<TagDto> Parents => AllTags.Where(t => string.IsNullOrEmpty(t.ParentTag));
    private string _colorStyle = string.Empty;

    private string _newTagName = string.Empty;
    
    private TagDto _selectedParentForNewTag = new();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();

        _selectedParentForNewTag = Parents.First();
    }

    private async Task Refresh()
    {
        var data = await ViewTagsUseCase.ExecuteAsync(new TagSpecificationParameters ());

        AllTags = data.Data.ToList();
        _newTagName = string.Empty;
    }

    private void OnTagClick(TagDto tag)
    {
        if (SelectedTags.Exists(x => x.Id == tag.Id))
        {
            var i = SelectedTags.First(x => x.Id == tag.Id);
            SelectedTags.Remove(i);
            StateHasChanged();
        }
        else
        {
            SelectedTags.Add(tag);
        }

        OnSelectedTagsChanged.InvokeAsync(SelectedTags);
    }

    private async Task AddNewTag()
    {
        if (!string.IsNullOrEmpty(_newTagName))
        {
            var parentTag = await GetTagByIdUseCase.ExecuteAsync(_selectedParentForNewTag.Id);
            var newTag = new Tag
                {
                    ParentTag = parentTag,
                    Name = _newTagName,
                    Color = _selectedParentForNewTag.Color,
                    IsTrainingGoal = _selectedParentForNewTag.IsTrainingGoal && string.IsNullOrEmpty(_selectedParentForNewTag.ParentTag)
            };

            await AddTagUseCase.ExecuteAsync(newTag);

            await Refresh();
        }
    }

}


