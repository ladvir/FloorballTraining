@using FloorballTraining.WebApp.Pages.Activities
@using FloorballTraining.WebApp.Data
@inject IDialogService DialogService
@inject AppSettings AppSettings
<MudPaper Class="d-flex flex-wrap gap-2 ma-2" Elevation="0">

    @foreach (var trainingGroup in TrainingGroups)
    {
        var duration = trainingGroup.TrainingGroupActivities.Sum(tg => tg.Duration);
        <MudPaper Elevation="0" Class="d-flex flex-wrap flex-grow-1 shrink-1 gap-1 ">

            <MudField Label="@($"Skupina - {trainingGroup.TrainingGroupId}")" Variant="Variant.Outlined">
                <MudPaper Elevation="0" Class="d-block">

                    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap align-bottom align-content-end">
                        <MudTextField Label="Název" @bind-Value="trainingGroup.Name" Style="min-width: 15rem;max-width: 80%;" MaxLength="@AppSettings.MaximalLengthTrainingGroupName" />
                        <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-1 align-content-end align-bottom">
                            <MudText Class="text-nowrap" Style="">Počet osob:@(StringExtensions.GetRangeString(trainingGroup.PersonsMin, trainingGroup.PersonsMax))</MudText>
                            <MudPaper Elevation="0" Style="min-width: 10em;">
                                    <RangeSlider MinValue="1" MaxValue="@Training.PersonsMax" @bind-ValueLow="@trainingGroup.PersonsMin" @bind-ValueHigh="@trainingGroup.PersonsMax" MinWidth="150px;" />
                            </MudPaper>
                            <MudChip Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => AddActivity(trainingGroup, trainingGroup.PersonsMax)">Vybrat aktivity</MudChip>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => TrainingGroups.Remove(trainingGroup)" />
                        </MudPaper>
                    </MudPaper>

                    @* Aktivity *@
                    <MudPaper Elevation="0" Class="my-2" >
                        <MudText>Doba trvání: @duration</MudText>
                        <MudTable Items="@trainingGroup.TrainingGroupActivities" Hover="false" Dense="true" Class="border-0" RowClass="ma-0 pa-0">
                            <RowTemplate>
                                <MudTd DataLabel="Název"><MudLink OnClick="@(() => ShowActivityDetail(context.Activity!))">@context.Activity!.Name</MudLink></MudTd>
                                <MudTd DataLabel="Doba trvání" Style="max-width:150px;"><Slider MinValue="1" MaxValue="@(context.Activity?.DurationMax ?? Training.Duration)" Value="@context.Duration" ValueChanged="@((e)=>OnActivityDurationChanged(context, e))" /></MudTd>
                                <MudTd DataLabel="Odebrat"><MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" OnClick="() => RemoveActivity(trainingGroup, context)" /></MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </MudPaper>
            </MudField>
        </MudPaper>
    }

</MudPaper>

@code {
    [Parameter]
    public List<TrainingGroup> TrainingGroups { get; set; } = new();

    [Parameter]
    public Training Training { get; set; } = null!;

    [Parameter]
    public EventCallback OnActivityAdded { get; set; }

    [Parameter]
    public EventCallback OnActivityRemoved { get; set; }

    [Parameter]
    public EventCallback OnDurationChanged { get; set; }

    private async Task AddActivity(TrainingGroup trainingGroup, int personsMax)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false
            };

        var SearchCriteria = new SearchCriteria
            {
                DurationMax = Training.Duration,
                PersonsMin = Training.PersonsMin,
                PersonsMax = personsMax,
                

            };

        if (Training.TrainingGoal != null)
        {
            SearchCriteria.Tags.Add(Training.TrainingGoal);
        }
        
        if (!Training.TrainingAgeGroups.Any())
        {
            SearchCriteria.AgeGroups.Add(AgeGroup.Kdokoliv);
        }else
        {
            SearchCriteria.AgeGroups.AddRange(Training.TrainingAgeGroups.Select(tag=>tag.AgeGroup));
        }


        var parameters = new DialogParameters { ["SearchCriteria"] = SearchCriteria };

        var dialog = await DialogService.ShowAsync<ActivityListModal>("Výběr aktivit", parameters, options);

        var result = await dialog.Result;

        if (result == DialogResult.Cancel())
        {
            return;
        }

        if (result.Data == null) return;

        var activities = (List<Activity>)result.Data;

        foreach (var activity in activities)
        {


            trainingGroup.TrainingGroupActivities.Add(new TrainingGroupActivity
                {
                    Activity = activity,
                    ActivityId = activity.ActivityId,
                    TrainingGroup = trainingGroup,
                    TrainingGroupId = trainingGroup.TrainingGroupId,
                    Duration = activity.DurationMax

                });
        }

        await OnActivityAdded.InvokeAsync();
    }

    private void ShowActivityDetail(Activity activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters { ["Activity"] = activity };

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }

    private void RemoveActivity(TrainingGroup trainingGroup, TrainingGroupActivity activity)
    {
        trainingGroup.TrainingGroupActivities.Remove(activity);
        OnActivityRemoved.InvokeAsync();
    }

    private void OnActivityDurationChanged(TrainingGroupActivity activity, int value)
    {
        activity.Duration = value;
        OnDurationChanged.InvokeAsync();
    }

}
