@using FloorballTraining.WebApp.Pages.Activities
@inject IDialogService DialogService
<MudPaper Class="d-inline-flex flex-grow-1 gap-2  " Elevation="0" Width="100%">

    @foreach (var trainingGroup in TrainingGroups)
    {
        var duration = trainingGroup.TrainingGroupActivities.Sum(tg => tg.Duration);
        <MudPaper Elevation="0" Class="flex-shrink-1 flex-grow-1 my-4">

            <MudField Label="@($"Skupina - {trainingGroup.TrainingGroupId}")" Class="ma-2" Variant="Variant.Outlined">

                <MudToolBar Dense="true" Class="ma-0 pa-0">
                    <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Color="Color.Success" OnClick="() => AddActivity(trainingGroup)" DisableElevation="true" Variant="Variant.Filled" Class="my-2">Přidat aktivity</MudButton>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Sharp.Delete" OnClick="() => TrainingGroups.Remove(trainingGroup)" />
                </MudToolBar>

                <MudTextField Label="Název" @bind-Value="trainingGroup.Name" FullWidth="true" />

                <MudPaper Elevation="0">
                    <MudText>Doba trvání: @duration</MudText>
                </MudPaper>

                <MudPaper Class="" Elevation="0">
                    @foreach (var activity in trainingGroup.TrainingGroupActivities)
                    {
                        var maxDuration = @activity.Activity?.DurationMax ?? 30;
                        <MudPaper Elevation="0" MinWidth="20vh" Width="100%">
                            <MudPaper Class="d-inline-flex gap-2 py-0 px-2" >
                                <MudText Typo="Typo.h6">@activity.Activity?.Name</MudText>

                                <MudPaper Class="d-inline-flex gap-1 px-2" Elevation="0">
                                    <Slider MinValue="1" MaxValue="@maxDuration" @bind-Value="@activity.Duration" />
                                    <MudIconButton Icon="@Icons.Material.Outlined.Info" Color="Color.Default" OnClick="@(() => ShowActivityDetail(activity.Activity))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" OnClick="() => RemoveActivity(trainingGroup, activity)" />
                                </MudPaper>
                            </MudPaper>
                        </MudPaper>
                    }
                </MudPaper>
            </MudField>
        </MudPaper>
    }

</MudPaper>




@code {
    [Parameter]
    public List<TrainingGroup> TrainingGroups { get; set; } = new List<TrainingGroup>();

    [Parameter]
    public EventCallback OnActivityAdded { get; set; }

    [Parameter]
    public EventCallback OnActivityRemoved { get; set; }

    private async Task AddActivity(TrainingGroup trainingGroup)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = true,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false
            };

        var dialog = await DialogService.ShowAsync<ActivityListModal>("Výběr aktivit", new DialogParameters(), options);

        var result = await dialog.Result;

        if (result == DialogResult.Cancel())
        {
            return;
        }


        if (result.Data == null) return;

        var activities = (List<Activity>)result.Data;

        foreach (var activity in activities)
        {


            trainingGroup.TrainingGroupActivities.Add(new TrainingGroupActivity
                {
                    Activity = activity,
                    ActivityId = activity.ActivityId,
                    TrainingGroup = trainingGroup,
                    TrainingGroupId = trainingGroup.TrainingGroupId,
                    Duration = activity.DurationMax

                });
        }

        await OnActivityAdded.InvokeAsync();
    }

    private void ShowActivityDetail(Activity? activityActivity)
    {
        throw new NotImplementedException();
    }

    private void RemoveActivity(TrainingGroup trainingGroup, TrainingGroupActivity activity)
    {
        trainingGroup.TrainingGroupActivities.Remove(activity);
        OnActivityRemoved.InvokeAsync();
    }

}
