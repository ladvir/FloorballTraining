@using FloorballTraining.WebApp.Pages.Activities
@using FloorballTraining.CoreBusiness.Dtos
@using FloorballTraining.CoreBusiness.Specifications
@using FloorballTraining.UseCases.Activities.Interfaces
@inject IDialogService DialogService
@inject AppSettings AppSettings
@inject IViewAgeGroupsUseCase ViewAgeGroupsUseCase
@inject IViewActivitiesUseCase ViewActivitiesUseCase

<MudPaper Class="d-flex flex-wrap gap-2 ma-2 align-items-center" Elevation="0" Style="">

    @for(var i=0; i<TrainingGroups.Count;i++)
    {
        var trainingGroup = TrainingGroups[i];

        var index = i+1;

        <MudPaper Elevation="0" Style="max-width: 35em;" Class="ma-0 pa-0 align-self-start">

            <MudField Label="@($"Skupina - {index}")" Variant="Variant.Outlined" Class="d-flex pa-0 ma-0 " Style="">
                <MudPaper Elevation="0" Class="d-flex pa-0 ma-0 flex-wrap align-items-start align-self-start" Style="">
                    <MudPaper Elevation="0" Class="d-inline-flex align-center pa-0 ma-0 mud-width-full align-items-center justify-space-between">
                        <MudPaper Class="" Elevation="0">
                            @if (trainingGroup.Activity == null)
                            {
                                <MudPaper Elevation="0" Class="">
                                    <MudChip Icon="@Icons.Material.Filled.Add" Class="ma-0" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => AddActivity(trainingGroup, trainingGroup.PersonsMax)">Vybrat aktivitu</MudChip>
                                </MudPaper>
                            }
                            else
                            {
                                <MudPaper Elevation="0" Class="">
                                    <MudLink Class="ma-0 pa-0" Typo="Typo.h6" OnClick="@(() => ShowActivityDetail(trainingGroup.Activity!))" Style="@(HasTrainingGoal(trainingGroup.Activity!) ? "font-weight: bold;" : "")">@(GetActivityName(trainingGroup.Activity!))</MudLink>
                                </MudPaper>
                            }

                        </MudPaper>
                        <MudPaper Class="ma-0 pa-0 align-end" Elevation="0">
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Class="ma-0 pa-0 align-end" Dense="true" Style="">
                            <MudMenuItem Icon="@Icons.Material.Filled.Remove" IconSize="Size.Small" OnClick="() => TrainingGroups.Remove(trainingGroup)">Smazat skupinu</MudMenuItem>

                            @if (trainingGroup.Activity!=null)
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconSize="Size.Small" OnClick="() => RemoveActivity(trainingGroup, trainingGroup.Activity)">Smazat aktivitu</MudMenuItem>
                            }
                        </MudMenu>
                        </MudPaper>
                    </MudPaper>

                    <MudPaper Elevation="0" Class="d-inline-flex align-baseline gap-2">
                        <MudText>Počet osob: od </MudText>
                        
                            <MudNumericField T="int" Variant="Variant.Text" Class="ma-0" Style="width:4em;" Min="1" Max="@Math.Min(trainingGroup.PersonsMax, Training.PersonsMax)" @bind-Value="@trainingGroup.PersonsMin" />
                            <MudText> do </MudText>
                            <MudNumericField T="int" Variant="Variant.Text" Class="ma-0" Style="width:4em;" Max="@Training.PersonsMax" Min="@Math.Max(1, trainingGroup.PersonsMin)" @bind-Value="@trainingGroup.PersonsMax" />
                        

                        <MudChip Color="Color.Success" Variant="Variant.Outlined" Size="Size.Small" OnClick="() => SelectAllPersons(trainingGroup)" Style="width:5em;" Class="pa-0">Všichni</MudChip>

                        <ValidationMessage For="() => trainingGroup.PersonsMin" />
                        <ValidationMessage For="() => trainingGroup.PersonsMax" />
                    </MudPaper>
                    
                    @if (trainingGroup.Activity != null)
                    {
                        <MudPaper Class="mt-4 mb-0" Elevation="0">
                            <button type="button" class="btn btn-sm btn-link ma-0 pa-0" onclick="@(() => SetNameForActivity(trainingGroup.Activity?.Name))">Použít název také pro název tréninkové části</button>
                        </MudPaper>
                    }

                </MudPaper>
            </MudField>
        </MudPaper>
    }
    
<MudPaper Elevation="0" Style="max-width: 40em;"Class="pa-0 align-items-center justify-items-center">
    
    <MudChip Class="ml-4" Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => AddTrainingGroup()">Nová skupina</MudChip>
    </MudPaper>
</MudPaper>

@code {
    [Parameter]
    public List<TrainingGroupDto> TrainingGroups { get; set; } = new();

    [Parameter]
    public TrainingDto Training { get; set; } = null!;

    [Parameter]
    public EventCallback OnActivityAdded { get; set; }

    [Parameter]
    public EventCallback OnActivityRemoved { get; set; }

    [Parameter]
    public EventCallback OnDurationChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnTrainingPartNameSetByActivity { get; set; }

    private List<ActivityDto>? _activities;

    private IEnumerable<AgeGroupDto> _ageGroups = null!;

    protected override async Task OnInitializedAsync()
    {
        var ageGroups = await ViewAgeGroupsUseCase.ExecuteAsync(new AgeGroupSpecificationParameters());
        if (ageGroups.Data != null) _ageGroups = ageGroups.Data.ToList();

        await GetActivities();
    }

    private async Task GetActivities() 
    {
        var activity = TrainingGroups.Select(g=>g.Activity).FirstOrDefault();

        if (activity == null) return;
        var searchCriteria = new SearchCriteria()
            {
                 Ids = new List<int>(activity.Id)
            };

        await SearchByCriteria(searchCriteria);

    }

    private async Task SearchByCriteria(SearchCriteria searchCriteria)
    {
        var parameters = new ActivitySpecificationParameters()
        {
            Id = searchCriteria.Ids.Any() ? searchCriteria.Ids.First(): null,
            Name = searchCriteria.Text,
            Description = searchCriteria.Text,
            PageSize = 60,
                
            Tag = string.Join(";", searchCriteria.Tags.Select(t=>t!.Id))
        };

        var activities = await ViewActivitiesUseCase.ExecuteAsync(parameters);
        if (activities.Data != null) _activities = activities.Data.ToList();
    }

    private async Task AddActivity(TrainingGroupDto trainingGroup, int personsMax)
    {
        var activity = await SelectActivitiesFromDialog(personsMax);

        if (activity != null)
        {
            trainingGroup.Activity = activity;
            
            _activities ??= new List<ActivityDto>();

            if (!_activities.Contains(activity))
            {
                _activities.Add(activity);
            }



            await OnActivityAdded.InvokeAsync();
        }
    }

    private async Task<ActivityDto?> SelectActivitiesFromDialog(int personsMax)
    {
        var searchCriteria = SetSearchCriteria(personsMax);
        var options = new DialogOptions
        {
            NoHeader = false,
            CloseOnEscapeKey = false,
            CloseButton = true,
            DisableBackdropClick = true,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.ExtraLarge,
            
            FullWidth = true,
            FullScreen = false
                
        };


        var parameters = new DialogParameters { ["SearchCriteria"] = searchCriteria };

        var dialog = await DialogService.ShowAsync<ActivityListModal>("Výběr aktivit", parameters, options);

        var result = await dialog.Result;

        if (result == DialogResult.Cancel())
        {
            return null;
        }

        if (result.Data == null) return null;

        var activities = (ActivityDto?)result.Data;
        return activities;
    }

    private SearchCriteria SetSearchCriteria(int personsMax)
    {
        var searchCriteria = new SearchCriteria
            {
                DurationMax = Training.Duration,
                PersonsMin = 1,
                PersonsMax = personsMax,
                Tags = Training.TrainingGoal1 is { Id: > 0 } ? new List<TagDto?> { Training.TrainingGoal1 } : new List<TagDto?>()
            };

        if (!Training.TrainingAgeGroups!.Any())
        {
            var anyAge = _ageGroups.First(ag => ag.IsAnyAge());
            searchCriteria.AgeGroups.Add(anyAge);
        }
        else
        {   
            searchCriteria.AgeGroups.AddRange(Training.TrainingAgeGroups!);
        }

        return searchCriteria;
    }

    private void ShowActivityDetail(ActivityDto activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false
            };

        var parameters = new DialogParameters { ["Activity"] = activity };

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }

    private async Task RemoveActivity(TrainingGroupDto trainingGroup, ActivityDto activity)
    {
        trainingGroup.Activity=null;
        await OnActivityRemoved.InvokeAsync();
    }



    private bool HasTrainingGoal(ActivityDto? activity)
    {
        return activity?.ActivityTags.Exists(at => at.Id == Training.TrainingGoal1?.Id)??false;
    }

    private string GetActivityName(ActivityDto? activity)
    {
        return activity?.Name??string.Empty;
    }

    private void SelectAllPersons(TrainingGroupDto trainingGroup)
    {
        trainingGroup.PersonsMin = Training.PersonsMin;
        trainingGroup.PersonsMax = Training.PersonsMax;
    }

    private async Task SetNameForActivity(string? activityName)
    {
        await OnTrainingPartNameSetByActivity.InvokeAsync(activityName);
    }

    private void AddTrainingGroup()
    {
        TrainingGroups.Add(new TrainingGroupDto
        {
            PersonsMax = Training.PersonsMax,
            PersonsMin = Training.PersonsMin

        });
        
    }

}
