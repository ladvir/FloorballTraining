@using FloorballTraining.WebApp.Pages.Activities
@using FloorballTraining.WebApp.Data
@inject IDialogService DialogService
@inject AppSettings AppSettings
<MudPaper Class="d-inline-flex flex-wrap gap-2" Elevation="0" >

    @foreach (var trainingGroup in TrainingGroups)
    {
        var duration = trainingGroup.TrainingGroupActivities.Sum(tg => tg.Duration);
        <MudPaper Elevation="0" Class="d-flex flex-wrap shrink-1 my-2">

            <MudField Label="@($"Skupina - {trainingGroup.TrainingGroupId}")" Class="ma-2" Variant="Variant.Outlined">
                <MudTextField Label="Název" @bind-Value="trainingGroup.Name" Style="width: 150px;max-width: 80%;" MaxLength="@AppSettings.MaximalLengthTrainingGroupName"/>

                
                    <MudPaper Elevation="0" Class="d-inline-flex gap-2">
                        <MudText Class="text-nowrap" Style="">Počet osob:@(StringExtensions.GetRangeString(trainingGroup.PersonsMin, trainingGroup.PersonsMax))</MudText>
                        <MudPaper Elevation="0" Style="min-width: 10em;">
                            <RangeSlider MinValue="1" MaxValue="@PersonsMax" @bind-ValueLow="@trainingGroup.PersonsMin" @bind-ValueHigh="@trainingGroup.PersonsMax"  MinWidth="150px;"/>
                        </MudPaper>
                    </MudPaper>
                

                <MudPaper Elevation="0" Class="ma-0 pa-0">
                    <MudChip Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => AddActivity(trainingGroup, trainingGroup.PersonsMax)">Vybrat aktivity</MudChip>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => TrainingGroups.Remove(trainingGroup)" />
                </MudPaper>

                <MudPaper Elevation="0">
                    <MudText>Doba trvání: @duration</MudText>
                </MudPaper>

                <MudPaper Elevation="0">
                    @foreach (var activity in trainingGroup.TrainingGroupActivities)
                    {
                        var maxDuration = activity.Activity?.DurationMax ?? DurationMax;
                        <MudPaper Elevation="0" MinWidth="20vh" Width="100%">
                            <MudPaper Class="d-inline-flex flex-wrap gap-2 py-0 px-2 align-center align-content-center justify-content-start">
                                <MudLink OnClick="@(() => ShowActivityDetail(activity.Activity!))">@activity.Activity?.Name</MudLink>
                                <Slider MinValue="1" MaxValue="@maxDuration" Value="@activity.Duration" ValueChanged="@((e)=>OnActivityDurationChanged(activity, e))" />
                                 <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" OnClick="() => RemoveActivity(trainingGroup, activity)" />
                                
                            </MudPaper>
                        </MudPaper>
                    }
                </MudPaper>
            </MudField>
        </MudPaper>
    }

</MudPaper>

@code {
    [Parameter]
    public List<TrainingGroup> TrainingGroups { get; set; } = new();

    [Parameter]
    public int DurationMax { get; set; }

    [Parameter]
    public int PersonsMin { get; set; }

    [Parameter]
    public int PersonsMax { get; set; }

    [Parameter]
    public Tag? TrainingGoal { get; set; }

    [Parameter]
    public EventCallback OnActivityAdded { get; set; }

    [Parameter]
    public EventCallback OnActivityRemoved { get; set; }

    [Parameter]
    public EventCallback OnDurationChanged { get; set; }

    private async Task AddActivity(TrainingGroup trainingGroup, int personsMax)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false
            };

        var activitySearchCriteria = new ActivitySearchCriteria
            {
                DurationMax = DurationMax,
                PersonsMin = PersonsMin,
                PersonsMax = personsMax
            };

        if (TrainingGoal!=null)
        {
            activitySearchCriteria.Tags.Add(TrainingGoal);
        }

        var parameters = new DialogParameters { ["ActivitySearchCriteria"] = activitySearchCriteria };

        var dialog = await DialogService.ShowAsync<ActivityListModal>("Výběr aktivit", parameters, options);

        var result = await dialog.Result;

        if (result == DialogResult.Cancel())
        {
            return;
        }

        if (result.Data == null) return;

        var activities = (List<Activity>)result.Data;

        foreach (var activity in activities)
        {


            trainingGroup.TrainingGroupActivities.Add(new TrainingGroupActivity
                {
                    Activity = activity,
                    ActivityId = activity.ActivityId,
                    TrainingGroup = trainingGroup,
                    TrainingGroupId = trainingGroup.TrainingGroupId,
                    Duration = activity.DurationMax

                });
        }

        await OnActivityAdded.InvokeAsync();
    }

    private void ShowActivityDetail(Activity activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false,

            };
        var parameters = new DialogParameters { ["Activity"] = activity };

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }

    private void RemoveActivity(TrainingGroup trainingGroup, TrainingGroupActivity activity)
    {
        trainingGroup.TrainingGroupActivities.Remove(activity);
        OnActivityRemoved.InvokeAsync();
    }

    private void OnActivityDurationChanged(TrainingGroupActivity activity, int value)
    {
        activity.Duration = value;
        OnDurationChanged.InvokeAsync();
    }

}
