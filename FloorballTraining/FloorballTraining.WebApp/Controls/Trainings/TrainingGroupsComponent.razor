@using FloorballTraining.WebApp.Pages.Activities
@inject IDialogService DialogService
@inject AppSettings AppSettings
@inject IViewAgeGroupByNameUseCase ViewAgeGroupByNameUseCase
@inject IViewActivityByCriteriaUseCase ViewActivityByCriteriaUseCase

<MudPaper Class="d-flex flex-wrap gap-2 ma-2" Elevation="0">

    @for(var i=1; i<TrainingGroups.Count;i++)
    {
        var trainingGroup = TrainingGroups[i];

        var index = i;
        <MudPaper Elevation="0" Class="d-flex flex-wrap flex-grow-0 shrink-1 gap-1 ">

            <MudField Label="@($"Skupina - {index}")" Variant="Variant.Outlined">
                <MudPaper Elevation="0" Class="d-block">

                    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap align-items-end align-bottom">
                       <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-1 align-items-center">
                            <MudText Class="text-nowrap" Style="">Počet osob:@(StringExtensions.GetRangeString(trainingGroup.PersonsMin, trainingGroup.PersonsMax))</MudText>
                                <MudPaper Elevation="0" Style="min-width: 10em;">
                                    <RangeSlider MinValue="@Training.PersonsMin" MaxValue="@Training.PersonsMax" @bind-ValueLow="@trainingGroup.PersonsMin" @bind-ValueHigh="@trainingGroup.PersonsMax" MinWidth="150px;" />
                                </MudPaper>
                                <MudChip Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => AddActivity(trainingGroup, trainingGroup.PersonsMax)">Vybrat aktivity</MudChip>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => TrainingGroups.Remove(trainingGroup)" />
                            </MudPaper>
                        </MudPaper>

                        @* Aktivity *@
                        <MudPaper Elevation="0" Class="my-0">
                            <MudTable Elevation="0" Items="@trainingGroup.TrainingGroupActivities" Hover="false" Dense="true" >
                                <RowTemplate>
                                    <MudTd DataLabel="Název" Class="px-1 pa-0 ma-0" HideSmall="true"><MudLink Class="ma-0 pa-0" OnClick="@(() => ShowActivityDetail(context.Activity!))"
                                                 Style="@(HasTrainingGoal(context)? "font-weight: bold;":"")">@(GetActivityName(context))</MudLink>
                            </MudTd>
                                


                                <MudTd DataLabel="Odebrat"><MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Default" OnClick="() => RemoveActivity(trainingGroup, context)" /></MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </MudPaper>
            </MudField>
        </MudPaper>
    }

</MudPaper>

@code {
    [Parameter]
    public List<TrainingGroup> TrainingGroups { get; set; } = new();

    [Parameter]
    public Training Training { get; set; } = null!;

    [Parameter]
    public EventCallback OnActivityAdded { get; set; }

    [Parameter]
    public EventCallback OnActivityRemoved { get; set; }

    [Parameter]
    public EventCallback OnDurationChanged { get; set; }

    private List<Activity>? _activities;

    private IEnumerable<AgeGroup> _ageGroups = null!;

    protected override async Task OnInitializedAsync()
    {
        _ageGroups = await ViewAgeGroupByNameUseCase.ExecuteAsync();

        await GetActivities();
    }

    private async Task GetActivities() 
    {
        var activityIds = TrainingGroups.SelectMany(g=>g.TrainingGroupActivities).Select(tga=>tga.ActivityId).Distinct().ToList();

        var searchCriteria = new SearchCriteria()
            {
                 Ids = activityIds
            };

        await SearchByCriteria(searchCriteria);

    }

    private async Task SearchByCriteria(SearchCriteria searchCriteria)
    {
        var result = await ViewActivityByCriteriaUseCase.ExecuteAsync(searchCriteria);
        _activities = result.ToList();
    }

    private async Task AddActivity(TrainingGroup trainingGroup, int personsMax)
    {
        var activities = await SelectActivitesFromDialog(personsMax);

        if (activities != null && activities.Any())
        {
            trainingGroup.AddTrainingGroupActivities(activities);

            _activities ??= new List<Activity>();

            foreach (var activity in activities)
            {
                if(!_activities.Contains(activity)) 
                {
                    _activities.Add(activity);
                }
            }


            await OnActivityAdded.InvokeAsync();
        }
    }

    private async Task<List<Activity>?> SelectActivitesFromDialog(int personsMax)
    {
        var searchCriteria = SetSearchCriteria(personsMax);
        var options = new DialogOptions
        {
            NoHeader = false,
            CloseOnEscapeKey = false,
            CloseButton = true,
            DisableBackdropClick = true,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            FullScreen = false
        };


        var parameters = new DialogParameters { ["SearchCriteria"] = searchCriteria };

        var dialog = await DialogService.ShowAsync<ActivityListModal>("Výběr aktivit", parameters, options);

        var result = await dialog.Result;

        if (result == DialogResult.Cancel())
        {
            return null;
        }

        if (result.Data == null) return null;

        var activities = (List<Activity>)result.Data;
        return activities;
    }

    private SearchCriteria SetSearchCriteria(int personsMax)
    {
        var searchCriteria = new SearchCriteria
            {
                DurationMax = Training.Duration,
                PersonsMin = Training.PersonsMin,
                PersonsMax = personsMax,
                Tags = Training.TrainingGoal is { TagId: > 0 } ? new List<Tag> { Training.TrainingGoal } : new List<Tag>()
            };

        if (!Training.TrainingAgeGroups.Any())
        {
            var kdokoliv = _ageGroups.First(ag => ag.IsKdokoliv());
            searchCriteria.AgeGroups.Add(kdokoliv);
        }
        else
        {
            searchCriteria.AgeGroups.AddRange(Training.TrainingAgeGroups.Select(tag => tag.AgeGroup!));
        }

        return searchCriteria;
    }

    private void ShowActivityDetail(Activity activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false
            };

        var parameters = new DialogParameters { ["Activity"] = activity };

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }

    private void RemoveActivity(TrainingGroup trainingGroup, TrainingGroupActivity activity)
    {
        trainingGroup.TrainingGroupActivities.Remove(activity);
        OnActivityRemoved.InvokeAsync();
    }

    

    private bool HasTrainingGoal(Activity? activity)
    {
        return activity?.ActivityTags.Exists(at => at.Tag?.TagId == Training.TrainingGoal?.TagId)??false;
    }
    private bool HasTrainingGoal(TrainingGroupActivity trainingGroupActivity)
    {
        var activity = GetActivity(trainingGroupActivity);
        return HasTrainingGoal(activity);
    }

    private Activity? GetActivity(TrainingGroupActivity trainingGroupActivity)
    {
        return _activities?.FirstOrDefault(a => a.ActivityId == trainingGroupActivity.ActivityId);
    }

    private string GetActivityName(TrainingGroupActivity trainingGroupActivity)
    {
        var activity = GetActivity(trainingGroupActivity);

        return activity?.Name??string.Empty;
    }

}
