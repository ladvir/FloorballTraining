@using FloorballTraining.WebApp.Pages.Activities
@inject IDialogService DialogService
@inject AppSettings AppSettings
@inject IViewAgeGroupByNameUseCase ViewAgeGroupByNameUseCase
@inject IViewActivityByCriteriaUseCase ViewActivityByCriteriaUseCase

<MudPaper Class="d-flex flex-wrap gap-2 ma-2" Elevation="0">

    @for(var i=0; i<TrainingGroups.Count;i++)
    {
        var trainingGroup = TrainingGroups[i];

        var index = i+1;


        <MudPaper Elevation="0" Class="d-flex flex-wrap flex-grow-0 shrink-1 gap-1 pa-0">

            <MudField Label="@($"Skupina - {index}")" Variant="Variant.Outlined">
                <MudPaper Elevation="0" Class="d-block pa-0 ma-0">

                    <MudPaper Elevation="0" Class="d-inline-flex align-center pa-0 ma-0 mud-width-full justify-space-between align-items-center">

                        @* Aktivity -   *@

                        <MudPaper Class="" Elevation="0">
                            
                            @if (!trainingGroup.TrainingGroupActivities.Any())
                            {
                                <MudPaper Elevation="0" Class="" >
                                    <MudChip Icon="@Icons.Material.Filled.Add" Class="ma-0" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => AddActivity(trainingGroup, trainingGroup.PersonsMax)">Vybrat aktivitu</MudChip>
                                </MudPaper>
                            }
                            else
                            {
                                <MudPaper Elevation="0" Class="">
                                    @foreach (var activity in trainingGroup.TrainingGroupActivities)
                                    {
                                        <MudLink Class="ma-0 pa-0" Typo="Typo.h6" OnClick="@(() => ShowActivityDetail(activity.Activity!))"
                                                 Style="@(HasTrainingGoal(activity) ? "font-weight: bold;" : "")">@(GetActivityName(activity))</MudLink>
                                    }
                                </MudPaper>
                            }
                        
                        </MudPaper>

                        <MudSpacer />

                        <MudPaper Class="ma-0 pa-0 align-end" Elevation="0">
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Class="ma-0 pa-0 align-end" Dense="true" Style="">
                            <MudMenuItem Icon="@Icons.Material.Filled.Remove" IconSize="Size.Small" OnClick="() => TrainingGroups.Remove(trainingGroup)">Smazat skupinu</MudMenuItem>

                            @if (trainingGroup.TrainingGroupActivities.Any())
                            {
                                <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconSize="Size.Small" OnClick="() => RemoveActivity(trainingGroup, trainingGroup.TrainingGroupActivities.First())">Smazat aktivitu</MudMenuItem>
                            }
                        </MudMenu>
                        </MudPaper>
                    </MudPaper>

                    <MudPaper Elevation="0" Class="d-flex flex-column ">

                        <MudPaper Elevation="0" Class="d-flex flex-column mt-2 align-center align-items-center">
                            <MudText Class="align-self-start">Počet osob: @StringExtensions.GetRangeString(trainingGroup.PersonsMin, trainingGroup.PersonsMax)</MudText>
                                <ValidationMessage For="() => trainingGroup.PersonsMin"/>
                                <ValidationMessage For="() => trainingGroup.PersonsMax"/>


                                

                                <MudPaper Elevation="0" Class="d-inline-flex flex-none align-center gap-2 align-items-center justify-space-between">
                                    <MudText Typo="Typo.body2">Min.</MudText>
                                    <MudNumericField Class="" Style="width:4em;" Min="1" Max="@Math.Min(trainingGroup.PersonsMax, Training.PersonsMax)" @bind-Value="@trainingGroup.PersonsMin" Variant="Variant.Outlined" />
                                <MudText Typo="Typo.body2">Max.</MudText>
                                    <MudNumericField Class="0" Style="width:4em;" Max="@Training.PersonsMax" Min="@Math.Max(1, trainingGroup.PersonsMin)" @bind-Value="@trainingGroup.PersonsMax" Variant="Variant.Outlined"/>
                                </MudPaper>

                                <MudPaper Elevation="0" Style="min-width: 10em;" Class="mt-2 pt-2">
                                    <RangeSlider MinValue="1" MaxValue="@Training.PersonsMax" @bind-ValueLow="@trainingGroup.PersonsMin" @bind-ValueHigh="@trainingGroup.PersonsMax" MinWidth="150px;"/>
                                </MudPaper>

                            <MudChip Color="Color.Success" Variant="Variant.Outlined" Size="Size.Small" OnClick="() => SelectAllPersons(trainingGroup)" Style="width:5em;" Class="pa-0">Všichni</MudChip>

                        </MudPaper>

                           

                           
                        </MudPaper>
                       
                        
                </MudPaper>
            </MudField>
        </MudPaper>
    }
</MudPaper>

@code {
    [Parameter]
    public List<TrainingGroup> TrainingGroups { get; set; } = new();

    [Parameter]
    public Training Training { get; set; } = null!;

    [Parameter]
    public EventCallback OnActivityAdded { get; set; }

    [Parameter]
    public EventCallback OnActivityRemoved { get; set; }

    [Parameter]
    public EventCallback OnDurationChanged { get; set; }

    private List<Activity>? _activities;

    private IEnumerable<AgeGroup> _ageGroups = null!;

    protected override async Task OnInitializedAsync()
    {
        _ageGroups = await ViewAgeGroupByNameUseCase.ExecuteAsync();

        await GetActivities();
    }

    private async Task GetActivities() 
    {
        var activityIds = TrainingGroups.SelectMany(g=>g.TrainingGroupActivities).Select(tga=>tga.ActivityId).Distinct().ToList();

        var searchCriteria = new SearchCriteria()
            {
                 Ids = activityIds
            };

        await SearchByCriteria(searchCriteria);

    }

    private async Task SearchByCriteria(SearchCriteria searchCriteria)
    {
        var result = await ViewActivityByCriteriaUseCase.ExecuteAsync(searchCriteria);
        _activities = result.ToList();
    }

    private async Task AddActivity(TrainingGroup trainingGroup, int personsMax)
    {
        var activities = await SelectActivitiesFromDialog(personsMax);

        if (activities != null && activities.Any())
        {
            trainingGroup.AddTrainingGroupActivities(activities);

            _activities ??= new List<Activity>();

            foreach (var activity in activities)
            {
                if(!_activities.Contains(activity)) 
                {
                    _activities.Add(activity);
                }
            }


            await OnActivityAdded.InvokeAsync();
        }
    }

    private async Task<List<Activity>?> SelectActivitiesFromDialog(int personsMax)
    {
        var searchCriteria = SetSearchCriteria(personsMax);
        var options = new DialogOptions
        {
            NoHeader = false,
            CloseOnEscapeKey = false,
            CloseButton = true,
            DisableBackdropClick = true,
            Position = DialogPosition.Center,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            FullScreen = false
        };


        var parameters = new DialogParameters { ["SearchCriteria"] = searchCriteria };

        var dialog = await DialogService.ShowAsync<ActivityListModal>("Výběr aktivit", parameters, options);

        var result = await dialog.Result;

        if (result == DialogResult.Cancel())
        {
            return null;
        }

        if (result.Data == null) return null;

        var activities = (List<Activity>)result.Data;
        return activities;
    }

    private SearchCriteria SetSearchCriteria(int personsMax)
    {
        var searchCriteria = new SearchCriteria
            {
                DurationMax = Training.Duration,
                PersonsMin = 1,
                PersonsMax = personsMax,
                Tags = Training.TrainingGoal is { TagId: > 0 } ? new List<Tag> { Training.TrainingGoal } : new List<Tag>()
            };

        if (!Training.TrainingAgeGroups.Any())
        {
            var kdokoliv = _ageGroups.First(ag => ag.IsKdokoliv());
            searchCriteria.AgeGroups.Add(kdokoliv);
        }
        else
        {
            searchCriteria.AgeGroups.AddRange(Training.TrainingAgeGroups.Select(tag => tag.AgeGroup!));
        }

        return searchCriteria;
    }

    private void ShowActivityDetail(Activity activity)
    {
        var options = new DialogOptions
            {
                NoHeader = false,
                CloseOnEscapeKey = false,
                CloseButton = true,
                DisableBackdropClick = true,
                Position = DialogPosition.Center,
                MaxWidth = MaxWidth.ExtraLarge,
                FullWidth = true,
                FullScreen = false
            };

        var parameters = new DialogParameters { ["Activity"] = activity };

        DialogService.Show<ActivityDetailReadOnly>(string.Empty, parameters, options);

    }

    private void RemoveActivity(TrainingGroup trainingGroup, TrainingGroupActivity activity)
    {
        trainingGroup.TrainingGroupActivities.Remove(activity);
        OnActivityRemoved.InvokeAsync();
    }

    private bool HasTrainingGoal(Activity? activity)
    {
        return activity?.ActivityTags.Exists(at => at.Tag?.TagId == Training.TrainingGoal?.TagId)??false;
    }
    private bool HasTrainingGoal(TrainingGroupActivity trainingGroupActivity)
    {
        var activity = GetActivity(trainingGroupActivity);
        return HasTrainingGoal(activity);
    }

    private Activity? GetActivity(TrainingGroupActivity trainingGroupActivity)
    {
        return _activities?.FirstOrDefault(a => a.ActivityId == trainingGroupActivity.ActivityId);
    }

    private string GetActivityName(TrainingGroupActivity trainingGroupActivity)
    {
        var activity = GetActivity(trainingGroupActivity);

        return activity?.Name??string.Empty;
    }

    private void SelectAllPersons(TrainingGroup trainingGroup)
    {
        trainingGroup.PersonsMin = Training.PersonsMin;
        trainingGroup.PersonsMax = Training.PersonsMax;
    }

}
