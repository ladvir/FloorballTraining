@inject CoreBusiness.Validations.TrainingPartValidator TrainingPartValidator

@*TrainingParts*@
@foreach (var trainingPart in TrainingParts.OrderBy(tp => tp.Order))
{
    <MudPaper Elevation="0" Outlined="true" Class="my-4 border-1 border-secondary">
        <MudPaper Elevation="0" Class="d-inline-flex z-100 position-sticky top-0 align-center justify-end align-content-end gap-2"  Width="100%">
            <MudPaper Elevation="0" Class="d-flex flex-column ma-0 pa-0" Style="Width: 20px;">
                <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowUp" Color="Color.Inherit" Size="Size.Small"OnClick="() => ChangeOrder(trainingPart, -1)" />
                <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowDown" Color="Color.Inherit" Size="Size.Small" OnClick="() => ChangeOrder(trainingPart, 1)" />
            </MudPaper>
            <MudTextField Label="Název" @bind-Value="trainingPart.Name" Class="ml-2" />
            
            <MudPaper Elevation="0" Class="d-inline-flex gap-2">
                <MudText>Doba trvání: @trainingPart.Duration</MudText>
                <MudSlider T="int" @bind-Value="@trainingPart.Duration" Min="1" Max="DurationMax" Size="Size.Medium" Style="Width: inherit;" />
            </MudPaper>
            <MudSpacer />
            <MudChip Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => TrainingParts.Remove(trainingPart)"></MudChip>
            
        </MudPaper>
        
        <MudPaper Elevation="0" Class="pa-2">

            <MudTextField Label="Popis" @bind-Value="trainingPart.Description" Variant="Variant.Outlined" FullWidth="true" />

            <MudChip Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => AddTrainingGroup(trainingPart)">Nová skupina</MudChip>
            
        </MudPaper>

        @*TrainingGroups*@
        <TrainingGroupsComponent TrainingGroups="@trainingPart.TrainingGroups" DurationMax="@DurationMax" PersonsMin ="@PersonsMin" PersonsMax="@PersonsMax" TrainingGoal="@TrainingGoal" OnActivityAdded="OnActivityAdded" OnActivityRemoved="OnActivityAdded" OnDurationChanged="OnActivityAdded" />

    </MudPaper>
}

@code {
    [Parameter]
    public List<TrainingPart> TrainingParts { get; set; } = new List<TrainingPart>();

    [Parameter]
    public int DurationMax { get; set; }

    [Parameter]
    public int PersonsMin { get; set; }

    [Parameter]
    public int PersonsMax { get; set; }

    [Parameter]
    public Tag? TrainingGoal { get; set; }
    
    [Parameter]
    public EventCallback OnActivitiesChanged { get; set; }

    public void ChangeOrder(TrainingPart trainingPart, int direction)
    {

        var originalOrder = trainingPart.Order;

        var trainingPartForSwap = direction > 0 
            ? TrainingParts.Where(tp => tp.Order > originalOrder).OrderByDirection(SortDirection.Ascending, t => t.Order).FirstOrDefault() 
            : TrainingParts.Where(tp => tp.Order < originalOrder).OrderByDirection(SortDirection.Descending, t => t.Order).FirstOrDefault();


        if (trainingPartForSwap == null) return;


        trainingPart.Order = trainingPartForSwap.Order;

        trainingPartForSwap.Order = originalOrder;
    }


    private void AddTrainingGroup(TrainingPart trainingPart)
    {
        trainingPart.TrainingGroups.Add(new TrainingGroup
        {
            Name = $"{trainingPart.TrainingGroups.Count + 1}",
            PersonsMax = PersonsMax
        });
    }

    private async Task OnActivityAdded()
    {
        await Validate();
        await OnActivitiesChanged.InvokeAsync();
    }

    private async Task Validate()
    {
        foreach (var trainingPart in TrainingParts)
        {

            await TrainingPartValidator.ValidateAsync(trainingPart);
        }
    }

}
