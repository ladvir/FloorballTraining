@inject CoreBusiness.Validations.TrainingPartValidator TrainingPartValidator
@inject AppSettings AppSettings

@*TrainingParts*@
@foreach (var trainingPart in Training.TrainingParts.OrderBy(tp => tp.Order))
{
    <MudPaper Elevation="0" Outlined="true" Class="my-2 border-1 border-secondary ">
        <MudPaper Elevation="0" Class="d-inline-flex flex-wrap align-center gap-2  align-items-end  mud-width-full position-relative" >
            
            <MudPaper Elevation="0" Class="d-flex flex-column ma-0 pa-0" Style="Width: 20px;">
                <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowUp" Color="Color.Inherit" Size="Size.Small"OnClick="() => ChangeOrder(trainingPart, -1)" />
                <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowDown" Color="Color.Inherit" Size="Size.Small" OnClick="() => ChangeOrder(trainingPart, 1)" />
            </MudPaper>
            <MudTextField Label="Název" @bind-Value="trainingPart.Name" Class="d-flex ml-2 flex-grow-0" Style="width:22em;" MaxLength="@AppSettings.MaximalLengthTrainingPartName" />
            <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                <MudText>Doba trvání: @Training.Duration</MudText>
                <Slider @bind-Value="@Training.Duration" MinValue="1" MaxValue="@Training.Duration" />
            </MudPaper>
            <MudChip Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => Training.TrainingParts.Remove(trainingPart)" Class="ml-4 object-right-top" Style="position:absolute;right:0;top:0;" />
            
        </MudPaper>
        
        <MudPaper Elevation="0" Class="pa-2">
            <MudTextField Label="Popis" @bind-Value="trainingPart.Description" Variant="Variant.Outlined" FullWidth="true" MaxLength="@AppSettings.MaximalLengthTrainingPartDescription" Class="mb-2"/>
        </MudPaper>

        @*TrainingGroups*@
        <MudChip Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="() => AddTrainingGroup(trainingPart)">Nová skupina</MudChip>
        <TrainingGroupsComponent TrainingGroups="@trainingPart.TrainingGroups" Training="@Training"  OnActivityAdded="OnActivityAdded" OnActivityRemoved="OnActivityAdded" OnDurationChanged="OnActivityAdded" />

    </MudPaper>
}

@code {
    [Parameter]
    public Training Training { get; set; } = null!;

    [Parameter]
    public EventCallback OnActivitiesChanged { get; set; }

    public void ChangeOrder(TrainingPart trainingPart, int direction)
    {
        var originalOrder = trainingPart.Order;

        var trainingPartForSwap = direction > 0 
            ? Training.TrainingParts.Where(tp => tp.Order > originalOrder).OrderByDirection(SortDirection.Ascending, t => t.Order).FirstOrDefault()
            : Training.TrainingParts.Where(tp => tp.Order < originalOrder).OrderByDirection(SortDirection.Descending, t => t.Order).FirstOrDefault();


        if (trainingPartForSwap == null) return;

        trainingPart.Order = trainingPartForSwap.Order;

        trainingPartForSwap.Order = originalOrder;
    }

    private void AddTrainingGroup(TrainingPart trainingPart)
    {
        trainingPart.TrainingGroups.Add(new TrainingGroup
        {
            Name = $"{trainingPart.TrainingGroups.Count + 1}",
            PersonsMax = Training.PersonsMax
        });
    }

    private async Task OnActivityAdded()
    {
        await Validate();
        await OnActivitiesChanged.InvokeAsync();
    }

    private async Task Validate()
    {
        foreach (var trainingPart in Training.TrainingParts)
        {

            await TrainingPartValidator.ValidateAsync(trainingPart);
        }
    }
}
