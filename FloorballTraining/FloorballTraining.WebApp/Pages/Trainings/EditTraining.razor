@page "/edittraining/{TrainingId:int}"
@using FloorballTraining.CoreBusiness.Validations
@inject IEditTrainingUseCase EditTrainingUseCase
@inject IViewTrainingByIdUseCase ViewTrainingByIdUseCase
@inject NavigationManager NavigationManager

@inject AppSettings AppSettings

<MudPaper Elevation="0" Class="d-inline-flex gap-2">
    <MudText Typo="Typo.h4">Trénink</MudText>
    <MudSpacer />
    <ExportToPdfTrainingComponent Training="_training" Disabled="@_editContext.IsModified()" />
</MudPaper>

<EditForm Model="@_training" OnValidSubmit="Submit">
    <FluentValidationValidator />
    <ValidationSummary />
    <MudPaper Elevation="0">
        @*Field*@
        <MudPaper Elevation="0" Class="d-inline-flex gap-4 flex-wrap flex-grow-1 align-bottom align-content-end mud-width-full">

            <MudTextField Label="Název" @bind-Value="_training.Name" Class="flex-grow-0 flex-shrink-1" Style="min-width:20em;" MaxLength="AppSettings.MaximalLengthTrainingName" />

            <MudPaper Elevation="0" Class="d-inline-flex flex-wrap lign-center align-content-end">
                <MudText Class="text-nowrap" Style="width:9em;">Počet osob: @(StringExtensions.GetRangeString(_training.PersonsMin, _training.PersonsMax))</MudText>
                    <RangeSlider @bind-ValueHigh="@_training.PersonsMax" @bind-ValueLow="@_training.PersonsMin" MinValue="1" MaxValue="@_personsMax" />
                </MudPaper>
                <MudPaper Elevation="0" Class="d-inline-flex flex-wrap align-center align-content-end">
                    <MudText Class="text-nowrap" Style="width:9em;">Doba trvání: @_training.Duration</MudText>

                    <Slider @bind-Value="@_training.Duration" MinValue="1" MaxValue="@(Math.Max(_maximalDuration, _training.GetActivitiesDuration()))" />
                </MudPaper>

                <MudPaper Elevation="0" Class="d-inline-flex flex-wrap align-center align-content-end">
                    <MudText Style="width:8em;">Intensita: @Intensities.Values.First(v => v.Value == _training.Intesity).Description</MudText>
                    <Slider @bind-Value="@_training.Intesity" MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue" />
                </MudPaper>

                <MudPaper Elevation="0" Class="d-inline-flex flex-wrap align-center align-content-end">
                    <MudText Style="width:8em;">Obtížnost: @Difficulties.Values.First(v => v.Value == _training.Difficulty).Description</MudText>
                    <Slider @bind-Value="@_training.Difficulty" MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue" />
                </MudPaper>

            <MudTextField Label="Komentář před zahájením" @bind-Value="_training.CommentBefore" Lines="6" Variant="Variant.Outlined" Margin="Margin.Dense" Class="my-5" />
            <MudTextField Label="Komentář po ukončení" @bind-Value="_training.CommentAfter" Lines="6" Variant="Variant.Outlined" Margin="Margin.Dense" Class="my-5" />


            <MudExpansionPanels MultiExpansion="true" Dense="true">

                <MudExpansionPanel IsInitiallyExpanded="true" Text="Tréninkové části" Class="my-4" Style="font-size: 2em; font-weight: bold;">
                    <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" OnClick="AddTrainingPart" DisableElevation="true" IconSize="Size.Large" Variant="Variant.Outlined" FullWidth="true" Class="my-1" />

                    @*TrainingParts*@
                    <TrainingPartsComponent TrainingParts="_training.TrainingParts"></TrainingPartsComponent>

                </MudExpansionPanel>
                <MudExpansionPanel IsInitiallyExpanded="true" Text="Vybavení" Class="my-4" Style="font-size: 2em; font-weight: bold;"></MudExpansionPanel>
            </MudExpansionPanels>

        </MudPaper>

    </MudPaper>

    @*Buttons*@
    <MudPaper Elevation="0" Class="d-inline-flex my-2">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Cancel">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onkeypress:preventDefault>OK</MudButton>
    </MudPaper>
</EditForm>


@code {
    [Parameter]
    public int TrainingId { get; set; }

    private TrainingValidator _trainingValidator = new();

    private Training _training = new();

    private Training _backupTraining = new();

    private EditContext _editContext = null!;

    protected override async Task OnParametersSetAsync()
    {
        _backupTraining  = await ViewTrainingByIdUseCase.ExecuteAsync(TrainingId);

        _training = _backupTraining.Clone();
        _training.TrainingParts.AddRange(_backupTraining.TrainingParts);
    }


    private int _personsMax;
    private int _maximalDuration;


    protected override void OnInitialized()
    {

        _personsMax = AppSettings.MaximalPersons;
        _maximalDuration = AppSettings.MaxTrainingDuration;
        _training.PersonsMax = _personsMax;
        _training.PersonsMin = 1;
        _training.Duration = _maximalDuration;

        _trainingValidator = new TrainingValidator(
            _maximalDuration,
            AppSettings.MaximalLengthTrainingName,
            AppSettings.MaximalLengthTrainingDescription,
            _personsMax,
            AppSettings.MaxTrainingPartDuration,
            AppSettings.MaximalLengthTrainingPartName,
            AppSettings.MaximalLengthTrainingPartDescription,
            AppSettings.MinimalDurationTrainingGoalPercent
            );

        _editContext = new EditContext(_training);
    }

    private async Task Submit()
    {
        await EditTrainingUseCase.ExecuteAsync(_training);
        NavigationManager.NavigateTo("/trainings");
    }

    private void Cancel()
    {
        _training = _backupTraining;
        NavigationManager.NavigateTo("/trainings");
    }

    private void AddTrainingPart()
    {
        _training.TrainingParts.Add(new TrainingPart
        {
            Name = $"{_training.TrainingParts.Count + 1}",
            Order = _training.TrainingParts.Count + 1
        });
    }
}
