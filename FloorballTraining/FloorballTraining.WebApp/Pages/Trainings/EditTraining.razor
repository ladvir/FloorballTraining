@page "/edittraining/{TrainingId:int}"
@using FloorballTraining.CoreBusiness.Validations
@inject IEditTrainingUseCase EditTrainingUseCase
@inject IViewTrainingByIdUseCase ViewTrainingByIdUseCase
@inject IViewPlaceByNameUseCase ViewPlaceByNameUseCase
@inject NavigationManager NavigationManager


@inject AppSettings AppSettings

@if (_training== null)
{
    <MudPaper Class="align-center justify-center mud-width-full" Elevation="0">
        <MudProgressCircular Color="Color.Warning" Size="Size.Large" Indeterminate="true" />
    </MudPaper>
}
else
{


    <MudPaper Elevation="0" Class="d-inline-flex z-100 position-sticky top-0 align-center justify-end align-content-end gap-2 mud-width-full">
        <MudText Typo="Typo.h4">Trénink</MudText>
        <MudSpacer />
        <ExportToPdfTrainingComponent Training="_training"/>
        <MudChip Disabled="@(!_editContext.IsModified())" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Color="Color.Success" OnClick="Submit">Uložit</MudChip>
        <MudChip Disabled="@(!_editContext.IsModified())" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Outlined" OnClick="Cancel" Color="Color.Warning">Obnovit</MudChip>
    </MudPaper>


    <MudPaper Elevation="0" Width="100%">
    <EditForm Model="@_training" OnValidSubmit="Submit">
        <FluentValidationValidator Validator="_trainingValidator" />
        <ValidationSummary />
        <MudPaper Elevation="0">

            <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2 align-items-end mud-width-full mb-2">

                <MudTextField Label="Název" @bind-Value="_training.Name" Class="flex-grow-0 " Style="min-width:20em;" MaxLength="AppSettings.MaximalLengthTrainingName" />

                <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                    <MudText>Počet osob: @(StringExtensions.GetRangeString(_training.PersonsMin, _training.PersonsMax))</MudText>
                        <RangeSlider @bind-ValueHigh="@_training.PersonsMax" @bind-ValueLow="@_training.PersonsMin" MinValue="1" MaxValue="@_personsMax" />
                    </MudPaper>
                    <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                        <MudText>Doba trvání: @_training.Duration</MudText>

                            <Slider @bind-Value="@_training!.Duration" MinValue="1" MaxValue="@(Math.Max(_training?.GetActivitiesDuration()??0, _maximalDuration))" />
                    </MudPaper>

                    <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                        <MudText>Intensita: @Intensities.Values.First(v => v.Value == _training.Intesity).Description</MudText>
                        <Slider @bind-Value="@_training.Intesity" MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue" />
                    </MudPaper>

                    <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                        <MudText>Obtížnost: @Difficulties.Values.First(v => v.Value == _training.Difficulty).Description</MudText>
                        <Slider @bind-Value="@_training.Difficulty" MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue" />
                    </MudPaper>
                </MudPaper>

                <MudPaper Elevation="0" Class="d-inline-flex gap-4 flex-wrap my-2 mud-width-full">
                    <MudTextField Label="Popis" @bind-Value="_training.Description" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField Label="Komentář před zahájením" @bind-Value="_training.CommentBefore" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <MudTextField Label="Komentář po ukončení" @bind-Value="_training.CommentAfter" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense" />
                </MudPaper>
                
            <MudPaper Elevation="0" Class="my-2 pa-0 d-flex-wrap" Style="width:22em;">
                <MudText Class="ma-0">Místo</MudText>
                <MudSelect T="Place?" Variant="Variant.Outlined" Dense="true" @bind-Value="_training.Place" Style="width:5em;" Class="d-flex-none mb-4 pa-0">

                    @foreach (var place in _places)
                    {
                        <MudSelectItem Value="@place">
                            <MudText>@place.ToString()</MudText>
                        </MudSelectItem>
                    }

                </MudSelect>

            </MudPaper>


            <MudPaper Elevation="0" Class="my-2 mud-width-full">
                    <MudText Typo="Typo.h5">Věkové kategorie</MudText>
                    <AgeGroupsComponent SelectedValues="@_training.TrainingAgeGroups.Select(tag=>tag.AgeGroup)" SelectedValuesChanged="RefreshAgeGroups" />
                </MudPaper>

            <MudPaper Elevation="0" Class="my-2 mud-width-full">
                <MudText Typo="Typo.h5">Zaměření tréninku</MudText>
                <TagSelectComponent TrainingGoalsOnly="true" ShowParentName="false" SelectedTag="@_training.TrainingGoal" OnSelectedTagChanged="TrainingGoalChanged" />
            </MudPaper>
            
            
            @*Equipments*@
            <MudPaper Elevation="0" Class="my-2 mud-width-full">
                <MudText Typo="Typo.h5">Vybavení a pomůcky</MudText>
                <MudChipSet >
                    @foreach (var equipment in _equipmentList)
                    {
                        <MudChip Text="@equipment" Size="Size.Small"/>
                    }
                </MudChipSet>
            </MudPaper>

            @*TrainingParts*@
                <MudPaper Elevation="0" Class="my-2 mud-width-full">
                    <MudText Typo="Typo.h5">Tréninkové části</MudText>


                    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap my-2 align-items-center mud-width-full">
                        <MudChip Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="AddTrainingPart">Nová tréninková část</MudChip>
                        <MudText Style="max-width: 22em;" Class="d-flex flex-wrap ml-4 mr-2">Naplánováno celkem</MudText>
                        <ProgressComponent Value="@_training.GetActivitiesDuration()" TargetValue="@_training.Duration" Ratio="@(_training.Duration == 0 ? 0 : Math.Round(100 * (_training.GetActivitiesDuration() / (decimal)_training.Duration)))" />
                        <MudText Style="max-width: 22em;" Class="d-flex flex-wrap ml-4 mr-2">Naplánováno zaměření</MudText>
                        <ProgressComponent Value="@_training.GetTrainingGoalActivitiesDuration()" TargetValue="@((int)Math.Floor((decimal)(AppSettings.MinimalDurationTrainingGoalPercent / 100 * _training.Duration)))"
                                           Ratio="@(_training.Duration == 0 ? 0 : Math.Round(100 * (_training.GetTrainingGoalActivitiesDuration() / (decimal)_training.Duration)))" />

                    </MudPaper>
                </MudPaper>
                    <TrainingPartsComponent Training="_training" OnTrainingPartChanged="OnTrainingPartChanged" />
                
        </MudPaper>
    </EditForm>

</MudPaper>
}
@code {
    [Parameter]
    public int TrainingId { get; set; }

    private TrainingValidator? _trainingValidator ;

    private List<Place> _places = new();

    private Training? _training;

    private List<string?> _equipmentList = new();

    private EditContext _editContext = null!;




    private int _personsMax;
    private int _maximalDuration;


    protected override async Task OnInitializedAsync()
    {
        _training = await ViewTrainingByIdUseCase.ExecuteAsync(TrainingId) ?? new Training();
        _editContext = new EditContext(_training);

        _places = await ViewPlaceByNameUseCase.ExecuteAsync();

        _personsMax = AppSettings.MaximalPersons;
        _maximalDuration = AppSettings.MaxTrainingDuration;
        _trainingValidator = new TrainingValidator(
            _maximalDuration,
            AppSettings.MaximalLengthTrainingName,
            AppSettings.MaximalLengthTrainingDescription,
            _personsMax,
            AppSettings.MaxTrainingPartDuration,
            AppSettings.MaximalLengthTrainingPartName,
            AppSettings.MaximalLengthTrainingPartDescription,
            AppSettings.MinimalDurationTrainingGoalPercent
            );

        _editContext.NotifyValidationStateChanged();
        _editContext.Validate();
    }

    private async Task Submit()
    {
        await EditTrainingUseCase.ExecuteAsync(_training!);
        NavigationManager.NavigateTo("/edittraining/" + _training!.TrainingId);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/trainings");
    }

    private void AddTrainingPart()
    {
        _training!.AddTrainingPart();

        _editContext.NotifyValidationStateChanged();
        _editContext.NotifyFieldChanged(new FieldIdentifier(_training, nameof(_training.TrainingParts)));

    }

    private void OnTrainingPartChanged()
    {
        _editContext.NotifyValidationStateChanged();
        _editContext.NotifyFieldChanged(new FieldIdentifier(_training!, nameof(_training.TrainingParts)));
        _equipmentList = _training?.GetEquipment() ?? new List<string?>();
    }

    private void RefreshAgeGroups(List<AgeGroup> ageGroups)
    {
        _training!.TrainingAgeGroups = new List<TrainingAgeGroup>();
        foreach (var ageGroup in ageGroups)
        {
            _training.AddAgeGroup(ageGroup);
        }
        _editContext.NotifyValidationStateChanged();
        _editContext.NotifyFieldChanged(new FieldIdentifier(_training!, nameof(_training.TrainingAgeGroups)));
    }

    private void TrainingGoalChanged(Tag tag)
    {
        _training!.TrainingGoal = tag;
        _editContext.NotifyValidationStateChanged();
        _editContext.NotifyFieldChanged(new FieldIdentifier(_training, nameof(_training.TrainingGoal)));

    }

    

}
