@page "/addtraining"
@using FloorballTraining.CoreBusiness.Validations
@inject AppSettings AppSettings
@inject IAddTrainingUseCase AddTrainingUseCase
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4">Nový trénink</MudText>


<EditForm Model="@_training" OnValidSubmit="Submit">
    <FluentValidationValidator Validator="_trainingValidator"/>
    <ValidationSummary  />
    <MudPaper Elevation="0" >
        
        <MudPaper Elevation="0" Class="d-inline-flex gap-4 flex-wrap flex-grow-1 align-center" Width="100%">
            <MudTextField Label="Název" @bind-Value="_training.Name" Style="width:20vw;" Class="flex-grow-0" />
            <MudPaper Elevation="0" Class="d-inline-flex gap-2 align-center" >
                <MudText>Počet osob: </MudText>
                <MudText Class="text-center" Style="width:20px;">@_training.PersonsMin</MudText>
                <MudText>-</MudText>
                <MudText Class="text-center" Style="width:20px;">@_training.PersonsMax</MudText>
                <RangeSlider @bind-ValueHigh="@_training.PersonsMax" @bind-ValueLow="@_training.PersonsMin" MinValue="1" MaxValue="@_personsMax" />
            </MudPaper>
            <MudPaper Elevation="0" Class="d-inline-flex gap-2 align-center">
                <MudText Class="text-nowrap" Style="">Doba trvání: </MudText>
                <MudText Class="text-center" Style="width:30px;">@_training.Duration</MudText>
                <MudPaper Elevation="0" Style="width:200px;">
                    <Slider @bind-Value="@_training.Duration"  MinValue="1" MaxValue="@(Math.Max(_maximalDuration, _training.GetActivitiesDuration()))" />
                </MudPaper>

                <MudText Class="ml-4">Naplánováno aktivit: </MudText>
                @*POZOR - Progressbar prebira nstaveni predchoziho prvku a proto je v samostatnem MudPaper*@
                <MudPaper Elevation="0" Style="width:100px;" Class="d-inline-flex gap-2 align-center">
                    <ProgressComponent Value="@_training.GetActivitiesDuration()" TargetValue="@_training.Duration" Ratio="@(_training.Duration == 0 ? 0 : Math.Round(100 * (_training.GetActivitiesDuration() / (decimal)_training.Duration)))" />
                </MudPaper>
            </MudPaper>
        </MudPaper>
            
        <MudPaper Elevation="0" Class="d-inline-flex gap-4 flex-wrap my-4" Width="100%">
            
                <MudTextField Label="Popis" @bind-Value="_training.Description" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense"  />
                <MudTextField Label="Komentář před zahájením" @bind-Value="_training.CommentBefore" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense" />
                <MudTextField Label="Komentář po ukončení" @bind-Value="_training.CommentAfter" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense" />
                </MudPaper>
            
        <MudExpansionPanels MultiExpansion="true" Dense="true">

                <MudPaper>
                    <MudPaper Elevation="0" Class="d-inline-flex gap-2" Width="100%">
                        <MudText Typo="Typo.h5">Tréninkové části</MudText>
                        <MudButton StartIcon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success" OnClick="AddTrainingPart" IconSize="Size.Medium" Variant="Variant.Outlined" />
                    </MudPaper>
                    
                    <MudExpansionPanel IsInitiallyExpanded="true">
                        @*TrainingParts*@
                        <TrainingPartsComponent TrainingParts="_training.TrainingParts" OnActivitiesChanged="OnActivitiesChanged"></TrainingPartsComponent>
                    </MudExpansionPanel>

                </MudPaper>
                
                <MudExpansionPanel IsInitiallyExpanded="true" Text="Vybavení" Class="my-4" Style="font-size: 2em; font-weight: bold;">
                    <MudList>
                        @foreach (var equipment in _equipmentList)
                        {
                            <MudListItem>@equipment</MudListItem>
                        }
                    </MudList>
                </MudExpansionPanel>

            </MudExpansionPanels>

    </MudPaper>
    
    @*Buttons*@
    <MudPaper Elevation="0" Class="d-inline-flex my-2">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Cancel">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onkeypress:preventDefault>OK</MudButton>
    </MudPaper>
</EditForm>


@code {
    private readonly Training _training = new();
    private List<string?> _equipmentList = new();
    private TrainingValidator _trainingValidator = new();

    private int _personsMax;
    private int _maximalDuration;


    protected override void OnParametersSet()
    {
    }

    protected override void OnInitialized()
    {
        
        _personsMax = AppSettings.MaximalPersons;
        _maximalDuration = AppSettings.MaxTrainingDuration;
        _training.PersonsMax = _personsMax;
        _training.PersonsMin = 1;

        _trainingValidator = new TrainingValidator(
            _maximalDuration, 
            AppSettings.MaximalLengthTrainingName, 
            AppSettings.MaximalLengthTrainingDescription, 
            _personsMax, 
            AppSettings.MaxTrainingPartDuration, 
            AppSettings.MaximalLengthTrainingPartName, 
            AppSettings.MaximalLengthTrainingPartDescription
            );
    }

    private async Task Submit()
    {
        await AddTrainingUseCase.ExecuteAsync(_training);
        NavigationManager.NavigateTo("/trainings");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/trainings");
    }

    private void AddTrainingPart()
    {
        _training.TrainingParts.Add(new TrainingPart
        {
                Name = $"{_training.TrainingParts.Count + 1}",
                Order = _training.TrainingParts.Count + 1
        });
    }

    private void OnActivitiesChanged()
    {
        _equipmentList = _training.GetEquipment();
    }

}
