@page "/addtraining"
@using FloorballTraining.CoreBusiness.Validations
@using FloorballTraining.CoreBusiness.Specifications


@inject AppSettings AppSettings
@inject IAddTrainingUseCase AddTrainingUseCase
@inject NavigationManager NavigationManager
@inject IViewPlacesUseCase ViewPlacesUseCase

@inject ISnackbar SnackBar

<MudPaper Elevation="0" Class="d-inline-flex z-100 position-sticky top-0 align-center justify-end align-content-end gap-2 mud-width-full">
    <MudText Typo="Typo.h4">Nový trénink</MudText>
    <MudSpacer />
    @*Buttons*@
    <ExportToPdfTrainingComponent Training="_training" Disabled="@_editContext.IsModified()" />

   
    
    <MudChip Icon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Color="Color.Success" OnClick="Submit">Uložit</MudChip>
    <MudChip  Icon="@Icons.Material.Filled.Cancel" Variant="Variant.Outlined" OnClick="Cancel" Color="Color.Warning">Zrušit</MudChip>
</MudPaper>

<MudPaper Elevation="0" Width="100%">
    <EditForm OnValidSubmit="Submit" EditContext="_editContext">
        <FluentValidationValidator Validator="_trainingValidator" />
        @* <ValidationSummary /> *@
        
        
        <ValidationMessage For="()=>_training" />
        

        <MudPaper Elevation="0">

            <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2 align-items-end mud-width-full mb-2">
                <MudPaper Elevation="0" Class="d-flex-column">
                <MudTextField Label="Název" @bind-Value="_training.Name" Class="flex-grow-0 " Style="min-width:20em;" MaxLength="AppSettings.MaximalLengthTrainingName"  />
                <ValidationMessage For="()=>_training.Name" />
                </MudPaper>

                <MudPaper Elevation="0" Style="width:22em;" Class="mr-2 pa-0">
                    <MudText>Počet osob: @(StringExtensions.GetRangeString(_training.PersonsMin, _training.PersonsMax))</MudText>
                    <RangeSlider @bind-ValueHigh="@_training.PersonsMax" @bind-ValueLow="@_training.PersonsMin" MinValue="1" MaxValue="@_personsMax" />
                    <ValidationMessage For="()=>_training.PersonsMin"/>
                    <ValidationMessage For="()=>_training.PersonsMax" />
                    </MudPaper>
                    <MudPaper Elevation="0" Style="width:22em;" Class="mr-2 pa-0">
                        <MudText>Doba trvání: @_training.Duration</MudText>

                        <Slider @bind-Value="@_training.Duration" MinValue="1" MaxValue="@(Math.Max(_maximalDuration, _training.TrainingParts?.Sum(t => t.Duration) ?? 0))" />

                        <ValidationMessage For="()=>_training.Duration" />
                    </MudPaper>

                    <MudPaper Elevation="0" Style="width:22em;" Class="mr-2 pa-0">
                        <MudText>Intensita: @Intensities.Values.First(v => v.Value == _training.Intensity).Description</MudText>
                        <Slider @bind-Value="@_training.Intensity" MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue" />
                        <ValidationMessage For="()=>_training.Intensity" />
                    </MudPaper>

                    <MudPaper Elevation="0" Style="width:22em;" Class="mr-2 pa-0">
                        <MudText>Obtížnost: @Difficulties.Values.First(v => v.Value == _training.Difficulty).Description</MudText>
                        <Slider @bind-Value="@_training.Difficulty" MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue" />
                        <ValidationMessage For="()=>_training.Difficulty" />
                    </MudPaper>
                </MudPaper>

            <MudPaper Elevation="0" Class="d-inline-flex gap-4 flex-wrap my-2 mud-width-full">
                <MudTextField Label="Popis" @bind-Value="_training.Description" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <ValidationMessage For="()=>_training.Description" />
                <MudTextField Label="Komentář před zahájením" @bind-Value="_training.CommentBefore" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <ValidationMessage For="()=>_training.CommentBefore" />
                <MudTextField Label="Komentář po ukončení" @bind-Value="_training.CommentAfter" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    <ValidationMessage For="()=>_training.CommentAfter" />
            </MudPaper>
            
                <MudPaper Elevation="0" Class="my-2 pa-0 d-flex-wrap" >
                
                    <MudSelect Label="Místo" Variant="Variant.Outlined" Dense="true" @bind-Value="_training.Place" Style="width:5em;" Class="d-flex-none mb-4 pa-0" >
                        @foreach (var place in _places)
                        {
                            <MudSelectItem Value="@place"><MudText>@place.ToString()</MudText></MudSelectItem>
                        }
                    </MudSelect>

                <ValidationMessage For="()=>_training.Place" />

                </MudPaper>

            <MudPaper Elevation="0" Class="my-2 mud-width-full">
                <MudText Typo="Typo.h5">Věkové kategorie</MudText>
                <AgeGroupsComponent SelectedValues="@_training.TrainingAgeGroups" SelectedValuesChanged="RefreshAgeGroups" />
                
                
                <ValidationMessage For="()=>_training.TrainingAgeGroups" />
            </MudPaper>

            <MudPaper Elevation="0" Class="my-2 mud-width-full">
                <MudText Typo="Typo.h5">Zaměření tréninku</MudText>
                <TagSelectTrainingGoalComponent SelectedTag="@_training.TrainingGoal" OnSelectedTagChanged="(e)=>_training.TrainingGoal=e" />
                <ValidationMessage For="()=>_training.TrainingGoal" />
            </MudPaper>
            
            @*Equipments*@
            <MudPaper Elevation="0" Class="d-inline-flex gap-2 my-2 mud-width-full">
                <MudText Typo="Typo.h5">Vybavení a pomůcky</MudText>
                <MudList>
                    @foreach (var equipment in _equipmentList)
                    {
                        <MudListItem>@equipment</MudListItem>
                    }
                </MudList>
            </MudPaper>

            @*TrainingParts*@
            <MudPaper Elevation="0" Class="my-2 mud-width-full">
                <MudText Typo="Typo.h5">Tréninkové části</MudText>


                <MudPaper Elevation="0" Class="d-inline-flex flex-wrap my-2 align-items-center mud-width-full">
                    <MudChip Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="AddTrainingPart" Class="mr-8">Nová tréninková část</MudChip>
                    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap shrink-1 my-2 align-items-center mud-width-full" Style="">
                        <MudText Style="max-width: 22em;" Class="d-flex flex-wrap mr-2">Naplánováno celkem</MudText>
                        <ProgressComponent Value="@_training.GetActivitiesDuration()" TargetValue="@_training.Duration" Ratio="@(_training.Duration == 0 ? 0 : Math.Round(100 * (_training.GetActivitiesDuration() / (decimal)_training.Duration)))" />
                    </MudPaper>
                    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap my-2 align-items-center mud-width-full">
                        <MudText Style="max-width: 22em;" Class="d-flex flex-wrap mr-2">Naplánováno zaměření</MudText>
                        <ProgressComponent Value="@_training.GetTrainingGoalActivitiesDuration()" TargetValue="@((int)Math.Floor((decimal)(AppSettings.MinimalDurationTrainingGoalPercent / 100 * _training.Duration)))"
                                       Ratio="@(_training.Duration == 0 ? 0 : Math.Round(100 * (_training.GetTrainingGoalActivitiesDuration() / (decimal)_training.Duration)))" />
                    </MudPaper>
                </MudPaper>
                
                <ValidationMessage For="()=>_training.TrainingParts" />
                
                <TrainingPartsComponent Training="_training" OnTrainingPartChanged="OnTrainingPartChanged" />
                <MudChip Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Success" OnClick="AddTrainingPart" Class="mr-8">Nová tréninková část</MudChip>

            </MudPaper>
            
        </MudPaper>
    </EditForm>
</MudPaper>

@code {
    private readonly TrainingDto _training = new();
    private List<string> _equipmentList = new();
    private List<PlaceDto> _places = new();
    private TrainingValidator? _trainingValidator ;
    private EditContext _editContext = null!;

    private int _personsMax;
    private int _maximalDuration;


    protected override void OnParametersSet()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(_training);

        PlaceSpecificationParameters parameters =new();
        
            var places = await ViewPlacesUseCase.ExecuteAsync(parameters);

            if (!places.Data.Any())
            {
                _places = new List<PlaceDto>();
            }

        _places = places.Data.ToList();

        

        _personsMax = AppSettings.MaximalPersons;
        _maximalDuration = AppSettings.MaxTrainingDuration;
        _training.PersonsMax = _personsMax;
        _training.PersonsMin = 1;
        _training.Duration = _maximalDuration;
        
        _trainingValidator = new TrainingValidator(
            _maximalDuration,
            AppSettings.MaximalLengthTrainingName,
            AppSettings.MaximalLengthTrainingDescription,
            _personsMax,
            AppSettings.MaxTrainingPartDuration,
            AppSettings.MaximalLengthTrainingPartName,
            AppSettings.MaximalLengthTrainingPartDescription,
            AppSettings.MinimalDurationTrainingGoalPercent
            );

        _editContext.NotifyValidationStateChanged();
    }

    private async Task Submit()
    {
        if (!_editContext.Validate())
        {
            ShowErrorMessage(_editContext.GetValidationMessages());
            return;
        }


        

        await AddTrainingUseCase.ExecuteAsync(_training);

        _editContext.MarkAsUnmodified();

        NavigationManager.NavigateTo("/trainings");
    }

    private void ShowErrorMessage(IEnumerable<string> messages)
    {
        var config = (SnackbarOptions options) =>
        {
            //options.DuplicatesBehavior = SnackbarDuplicatesBehavior.Prevent;
        };

        foreach (var message in messages)
        {
            SnackBar.Add(message, severity: Severity.Error, configure: config);
        }
        
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/trainings");
    }

    private void AddTrainingPart()
    {
        _training.AddTrainingPart();
        _editContext.NotifyValidationStateChanged();
        _editContext.NotifyFieldChanged(new FieldIdentifier(_training, nameof(_training.TrainingParts)));
    }

    private void OnTrainingPartChanged()
    {
        _equipmentList = _training.GetEquipment();
        _editContext.NotifyValidationStateChanged();
        _editContext.NotifyFieldChanged(new FieldIdentifier(_training, nameof(_training.TrainingParts)));
    }

    private void RefreshAgeGroups(List<AgeGroupDto> ageGroupDtos)
    {
        _training.TrainingAgeGroups = new List<AgeGroupDto>();
        foreach (var ageGroupDto in ageGroupDtos)
        {
            _training.AddAgeGroup(ageGroupDto);
        }
        _editContext.NotifyValidationStateChanged();
        _editContext.NotifyFieldChanged(new FieldIdentifier(_training, nameof(_training.TrainingAgeGroups)));
    }

    

}
