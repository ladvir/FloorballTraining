@page "/edittag/{tagId:int}"
@using FloorballTraining.CoreBusiness.Specifications
@inject IEditTagUseCase EditTagUseCase
@inject IDeleteTagUseCase DeleteTagUseCase

@inject IViewTagsWithSpecificationUseCase ViewTagsUseCase
@inject IViewTagByIdUseCase ViewTagByIdUseCase

@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4">Štítek</MudText>


@if (_tag == null)
{
    <MudPaper Elevation="0">Štítek nenalezen</MudPaper>
}
else
{
    <EditForm Model="@_tag" OnValidSubmit="Submit">
        <DataAnnotationsValidator/>
        <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4">
            <MudTextField Label="Název" @bind-Value="_tag.Name" For="() => _tag.Name" Style="width:22em;"/>

            <MudSelect T="int?" @bind-Value="_tag.ParentTagId" Text="@_tag.ParentTagName" SelectedValuesChanged="CheckChanged" Style="width:22em;">
               
                <MudSelectItem T="int?" Value="null">*****</MudSelectItem>
                @if (_parentTags != null)
                {
                    @foreach (var parent in _parentTags)
                    {
                        <MudSelectItem T="int?" Value="@parent.Id">@parent.Name</MudSelectItem>
                    }
                }

            </MudSelect>
            <MudColorPicker @bind-Text="_tag.Color" ColorPickerView="ColorPickerView.Palette"/>

            <MudSpacer/>
            <MudChip Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" OnClick="() => _isDialogForDeletionVisible = true">Odstranit</MudChip>

        </MudPaper>
        <br/>
        @*Buttons*@
        <MudPaper Elevation="0" Class="d-inline-flex my-2">
            <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onkeypress:preventDefault>OK</MudButton>
        </MudPaper>
    </EditForm>
}

<MudDialog @bind-ref="_deleteConfirmationDialog" @bind-IsVisible="_isDialogForDeletionVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3" />Smazání štítku</MudText>
    </TitleContent>
    <DialogContent>
        <p>Opravdu chcete <strong>smazat</strong> štítek <strong>@_tag!.Name</strong>?</p>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _isDialogForDeletionVisible = false" Class="px-10">Ne</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DeleteTag" Class="px-10">Ano</MudButton>
    </DialogActions>
</MudDialog>


@code {

    [Parameter]
    public int TagId { get; set; }

    private TagDto? _tag;

    private IReadOnlyList<TagDto>? _parentTags;

    private TagDto? _trainingGoalParentTag;

    private MudDialog? _deleteConfirmationDialog;
    private bool _isDialogForDeletionVisible;

    private readonly DialogOptions _dialogOptions = new()
    {
        NoHeader = false,
        CloseOnEscapeKey = true,
        CloseButton = true,
        DisableBackdropClick = true,
        MaxWidth = MaxWidth.Small,
        Position = DialogPosition.Center,
        FullScreen = false
    };

    protected override async Task OnParametersSetAsync()
    {
        _tag = await ViewTagByIdUseCase.ExecuteAsync(TagId);
        _parentTags = await ViewTagsUseCase.ViewAsync(new TagSpecificationParameters() { ParentTagId = null });
    }

    protected override void OnInitialized()
    {
        _trainingGoalParentTag = _parentTags?.FirstOrDefault(pt => pt.IsTrainingGoal);
    }

    private async Task Submit()
    {
        await EditTagUseCase.ExecuteAsync(_tag!);
        NavigationManager.NavigateTo("/tags");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/tags");
    }

    private void CheckChanged(IEnumerable<int?> selectedParents)
    {
        var enumerable = selectedParents.ToList();

        var parentTag = _parentTags?.FirstOrDefault(t => t.Id == enumerable.First());

        if (enumerable.Any())
        {
            _tag!.ParentTagId = enumerable.First();
            _tag.ParentTagName = _parentTags?.FirstOrDefault(t => t.Id == _tag.ParentTagId)?.ParentTagName;
        }
        else
        {
            _tag!.ParentTagId = null;
            _tag.ParentTagName = null;
        }

        _tag.IsTrainingGoal = _tag.ParentTagId!=null && _tag.ParentTagId == _trainingGoalParentTag?.Id;
    }

    private async Task DeleteTag()
    {
        _isDialogForDeletionVisible = false;

        if (_tag != null)
        {
            await DeleteTagUseCase.ExecuteAsync(_tag.Id);
        }

        NavigationManager.NavigateTo("/tags");
    }

}
