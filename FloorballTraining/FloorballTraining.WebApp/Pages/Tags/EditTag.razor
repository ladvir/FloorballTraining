@page "/edittag/{tagId:int}"
@inject IEditTagUseCase EditTagUseCase
@inject IDeleteTagUseCase DeleteTagUseCase

@inject IViewTagByParentTagIdUseCase ViewTagByParentTagIdUseCase
@inject IGetTagByIdUseCase GetTagByIdUseCase

@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4">Štítek</MudText>

<EditForm Model="@_tag" OnValidSubmit="Submit">
    <DataAnnotationsValidator/>
    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4">
        <MudTextField Label="Název" @bind-Value="_tag.Name" For="() => _tag.Name" Style="width:22em;" />

        <MudSelect T="int?" @bind-Value="_tag.ParentTagId" Text="@_tag.ParentTag?.Name" SelectedValuesChanged="CheckChanged"  Style="width:22em;">
            @foreach (var parent in _parentTags)
            {
                <MudSelectItem T="int?" Value="parent.Id" >@parent.Name</MudSelectItem>
            }
        </MudSelect>
        <MudColorPicker @bind-Text="_tag.Color" ColorPickerView="ColorPickerView.Palette" />

        <MudSpacer/>
        <MudChip Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" OnClick="()=> _isDialogForDeletionVisible = true">Odstranit</MudChip>
        
    </MudPaper>
    <br/>
    @*Buttons*@
    <MudPaper Elevation="0" Class="d-inline-flex my-2">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Cancel">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onkeypress:preventDefault>OK</MudButton>
    </MudPaper>
</EditForm>

<MudDialog @bind-ref="_deleteConfirmationDialog" @bind-IsVisible="_isDialogForDeletionVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3" />Smazání štítku</MudText>
    </TitleContent>
    <DialogContent>
        <p>Opravdu chcete <strong>smazat</strong> štítek <strong>@_tag.Name</strong>?</p>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _isDialogForDeletionVisible = false" Class="px-10">Ne</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DeleteTag" Class="px-10">Ano</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [Parameter]
    public int TagId { get; set; }

    private Tag _tag = new();

    private readonly List<Tag> _parentTags = new();

    private Tag? _trainingGoalParentTag = new();

    private MudDialog? _deleteConfirmationDialog;
    private bool _isDialogForDeletionVisible;
    private readonly DialogOptions _dialogOptions = new()
        {
            NoHeader = false,
            CloseOnEscapeKey = true,
            CloseButton = true,
            DisableBackdropClick = true,
            MaxWidth = MaxWidth.Small,
            Position = DialogPosition.Center,
            FullScreen = false
        };

    protected override async Task OnParametersSetAsync()
    {
        _tag = await GetTagByIdUseCase.ExecuteAsync(TagId);
        _parentTags.AddRange(await ViewTagByParentTagIdUseCase.ExecuteAsync(null));
    }

    protected override  void OnInitialized()
    {
        _trainingGoalParentTag = _parentTags.FirstOrDefault(pt => pt.IsTrainingGoal);
    }

    private async Task Submit()
    {
        await EditTagUseCase.ExecuteAsync(_tag);
        NavigationManager.NavigateTo("/tags");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/tags");
    }

  

    private void CheckChanged(IEnumerable<int?> selectedParents)
    {
        var enumerable = selectedParents.ToList();
        if (enumerable.Any())
        {
            _tag.ParentTagId = enumerable.First();
            _tag.ParentTag = _parentTags.First(t => t.Id == _tag.ParentTagId);
        }else
        {
            _tag.ParentTagId = null;
            _tag.ParentTag = null;
        }

        _tag.IsTrainingGoal = _tag.ParentTag != null && _tag.ParentTag.Id == _trainingGoalParentTag?.Id;
    }

    private async Task DeleteTag()
    {
        _isDialogForDeletionVisible = false;

        await DeleteTagUseCase.ExecuteAsync(_tag);

        NavigationManager.NavigateTo("/tags");
    }

}
