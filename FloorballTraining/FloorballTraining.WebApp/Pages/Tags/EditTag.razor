@page "/edittag/{tagId:int}"
@using System.ComponentModel
@inject IEditTagUseCase EditTagUseCase
@inject IViewTagByParentTagIdUseCase ViewTagByParentTagIdUseCase
@inject IViewTagByIdUseCase ViewTagByIdUseCase

@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4">Štítek</MudText>

<EditForm Model="@_tag" OnValidSubmit="Submit">
    <DataAnnotationsValidator/>
    <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4">
        <MudTextField Label="Název" @bind-Value="_tag.Name" For="() => _tag.Name" Style="width:22em;" />

        <MudText>@_parentTagName </MudText>
        

        <MudSelect T="int?" @bind-Value="_tag.ParentTagId" Text="@_tag.ParentTag?.Name" SelectedValuesChanged="CheckChanged"  Style="width:22em;">
            @foreach (var parent in _parentTags)
            {
                <MudSelectItem T="int?" Value="parent.TagId" >@parent.Name</MudSelectItem>
            }
        </MudSelect>
        <MudColorPicker @bind-Text="_tag.Color" ColorPickerView="ColorPickerView.Palette" />
    </MudPaper>
    <br/>
    @*Buttons*@
    <MudPaper Elevation="0" Class="d-inline-flex my-2">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Cancel">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onkeypress:preventDefault>OK</MudButton>
    </MudPaper>
</EditForm>


@code {
    [Parameter]
    public int TagId { get; set; }

    private string _parentTagName = string.Empty;

    private Tag _tag = new();

    private readonly List<Tag> _parentTags = new();

    private Tag? _trainingGoalParentTag = new();

    protected override async Task OnParametersSetAsync()
    {
        _tag = await ViewTagByIdUseCase.ExecuteAsync(TagId);
        _parentTagName = _tag.ParentTag?.Name ?? string.Empty;
        _parentTags.AddRange(await ViewTagByParentTagIdUseCase.ExecuteAsync(null));
    }

    protected override  void OnInitialized()
    {
        _trainingGoalParentTag = _parentTags.FirstOrDefault(pt => pt.IsTrainingGoal);
    }

    private async Task Submit()
    {
        await EditTagUseCase.ExecuteAsync(_tag);
        NavigationManager.NavigateTo("/tags");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/tags");
    }

    public void CheckChanged2()
    {
        _tag.IsTrainingGoal = _tag.ParentTag != null && _tag.ParentTag.TagId == _trainingGoalParentTag?.TagId;
        _parentTagName = _tag.ParentTag?.Name??string.Empty;


    }

    private void CheckChanged(IEnumerable<int?> selectedParents)
    {
        if (selectedParents.Any())
        {
            _tag.ParentTagId = selectedParents.First();
            _tag.ParentTag = _parentTags.First(t => t.TagId == _tag.ParentTagId);
        }else
        {
            _tag.ParentTagId = null;
            _tag.ParentTag = null;
        }
    }

}
