@page "/editactivity/{ActivityId:int}"
@using FloorballTraining.WebApp.Services
@using FloorballTraining.WebApp.Validations
@using FluentValidation.Results
@inject IEditActivityUseCase EditActivityUseCase
@inject IViewActivityByIdUseCase ViewActivityByIdUseCase
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IFileHandlingService FileHandlingService

<MudText Typo="Typo.h4">Aktivita</MudText>


<EditForm Model="@_activity" OnValidSubmit="Submit">
    <FluentValidationValidator/>
    <ValidationSummary />
    <MudPaper Elevation="0" Class="d-flex flex-column">
        <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-4 justify-space-between" Width="100%">
            <MudTextField Label="Název" @bind-Value="_activity.Name" For="() => _activity.Name" />
            <MudPaper Elevation="0" Class="d-inline-flex gap-4">
                <MudPaper Elevation="0">
                    <MudText>Počet osob: @Persons</MudText>
                    <RangeSlider @bind-ValueHigh="@_activity.PersonsMax" @bind-ValueLow="@_activity.PersonsMin" MinValue="1" MaxValue="50" />
                </MudPaper>

                <MudPaper Elevation="0">
                    <MudText>Doba trvání: @Duration</MudText>
                    <RangeSlider @bind-ValueHigh="@_activity.DurationMax" @bind-ValueLow="@_activity.DurationMin" MaxValue="30" MinValue="1" />
                </MudPaper>
            </MudPaper>

            <MudSpacer/>

        </MudPaper>
            <MudTextField Label="Popis" @bind-Value="_activity.Description" For="() => _activity.Description" Lines="6" Variant="Variant.Outlined" Margin="Margin.Dense" Class="my-5" />


        <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="@SelectedMedium.Any()">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.VideoLibrary" Class="mr-3"></MudIcon>
                        <MudText><strong>Obrázky, videa, odkazy</strong></MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudStack Style="width: 100%">
                             
                        @foreach (var error in _validationResult.Errors) {
                            <MudText>@error.ErrorMessage</MudText>
                        }
                        <MudFileUpload T="IBrowserFile" For="() => _file" @onclick="()=> _validationResult =new ValidationResult()" OnFilesChanged="OnInputFileChanged" Hidden="false" Class="flex-1" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20" InputStyle="opacity:0"
                                       @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Accept=".png,.jpg,.jpeg,.bmp,.tif,.gif" >
                                       
                            <ButtonTemplate Context="_">
                                <MudPaper Height="100px" Outlined="true" Class="@_dragClass">
                                    <div>Přesuňte soubory sem nebo zvolte možnost <strong>Procházet</strong> a soubory vyberte.</div>
                                </MudPaper>
                            </ButtonTemplate>
                        </MudFileUpload>
                    </MudStack>


                    <ActivityMediumComponent Medium="@SelectedMedium.Where(m=>m!.MediaType==MediaType.Image).ToList()" MediumDeleted="MediumDeleted" StorageLocation="@(NavigationManager.BaseUri + Configuration.GetValue<string>("FileStorage")!)" />
                </ChildContent>
            </MudExpansionPanel>
        </MudPaper>


            <MudPaper Elevation="1" Class="my-2">
                <MudExpansionPanel Dense="true" IsInitiallyExpanded="@SelectedEquipments.Any()">
                    <TitleContent>
                        <div class="d-flex">
                        <MudIcon Icon="fas fa-thin fa-clipboard-list" Class="mr-3"></MudIcon>
                        <MudText><strong>Vybavení</strong></MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                    <ActivityEquipmentsComponent SelectedValues="@SelectedEquipments" SelectedValuesChanged="SelectedEquipmentsChanged" />
                    </ChildContent>
                </MudExpansionPanel>
            </MudPaper>

        

            <MudPaper Elevation="1" Class="my-2">
            <MudExpansionPanel Dense="true" IsInitiallyExpanded="@SelectedTags.Any()">
                    <TitleContent>
                        <div class="d-flex">
                            <MudIcon Icon="fas fa-thin fa-tag" Class="mr-3"></MudIcon>
                        <MudText><strong>Štítky</strong></MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                    <TagExpandListComponent SelectedTags="@SelectedTags" OnSelectedTagsChanged="SelectedTagsChanged" />
                    </ChildContent>

                    
                </MudExpansionPanel>
            </MudPaper>
        </MudPaper>
    
    @*Buttons*@
    <MudPaper Elevation="0" Class="d-inline-flex my-2">
        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="Cancel">Cancel</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" @onkeypress:preventDefault>OK</MudButton>
    </MudPaper>
</EditForm>


@code {
    [Parameter]
    public int ActivityId { get; set; } 

    private Activity _activity = new();


    private List<Media?> SelectedMedium => _activity.ActivityMedium.Select(ae => ae.Media).Union(_newMedium.Select(nm=>nm.Media)).ToList();

    private List<Equipment?> SelectedEquipments => _activity.ActivityEquipments.Select(ae => ae.Equipment).ToList();

    private List<Tag?> SelectedTags => _activity.ActivityTags.Select(ae => ae.Tag).ToList();

    private string Persons => StringExtensions.GetRangeString(_activity.PersonsMin, _activity.PersonsMax);
    private string Duration => StringExtensions.GetRangeString(_activity.DurationMin, _activity.DurationMax);

    private static readonly string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;

    private readonly List<IBrowserFile?> _files = new();
    private IBrowserFile? _file;
    private ValidationResult _validationResult = new();


    private List<ActivityMedia> _newMedium = new();

    private string _originalActivityName = string.Empty;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _file = e.File;

        if (_file == null)
        {
            return;
        }

        var fileValidator = new FileForUploadValidator();
        _validationResult = await fileValidator.ValidateAsync(_file);

        if (_validationResult.IsValid) {
            _files.Add(_file);

        }
        _file = null;

        await Upload();
    }

    private async Task Clear()
    {
        _files.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private async Task Upload()
    {
        foreach (var file in _files)
        {
            await LoadFile(file);
        }

        await Clear();
    }

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }

    private async Task Submit()
    {

        foreach (var media in _activity.ActivityMedium.Where(am => am.Media != null).Select(am => am.Media))
        {
            FileHandlingService.Move(media!.Path, _activity.Name);
        }
        
        if(_activity.Name!=_originalActivityName)
        {
            foreach (var media in _activity.ActivityMedium.Select(am => am.Media))
            {
                var fileName = Path.GetFileName(media!.Path);
                media.Path = Path.Combine(_activity.Name, fileName);

                FileHandlingService.Move(media.Path, _activity.Name);
            } 

            foreach (var media in _newMedium)
            {
                FileHandlingService.Move(media.Media!.Path, _activity.Name);

                var fileName = Path.GetFileName(media.Media!.Path);
                media.Media.Path = Path.Combine(_activity.Name, fileName);
                
                _activity.AddMedia(media.Media!);
            }

            FileHandlingService.DeleteActivityFolder(_originalActivityName);
        }else
        {
            foreach (var media in _newMedium)
            {
                _activity.AddMedia(media.Media!);
            }
        }

        await EditActivityUseCase.ExecuteAsync(_activity);
        NavigationManager.NavigateTo("/activities");

    }


    protected override async Task OnParametersSetAsync()
    {
        _activity = await ViewActivityByIdUseCase.ExecuteAsync(ActivityId);
        _originalActivityName = _activity.Name;
    }

    private void Cancel()
    {
        foreach (var media in _newMedium)
        {
            FileHandlingService.Delete(media.Media!.Path, _activity.Name);
        }

        NavigationManager.NavigateTo("/activities");
    }

    private void SelectedTagsChanged(List<Tag> tags)
    {
        _activity.ActivityTags = new List<ActivityTag>();
        foreach (var tag in tags)
        {
            _activity.AddTag(tag);
        }

        StateHasChanged();
    }

    private void SelectedEquipmentsChanged(IEnumerable<Equipment> equipments)
    {
        _activity.ActivityEquipments = new List<ActivityEquipment>();

        foreach (var equipment in equipments)
        {
            _activity.AddEquipment(equipment);
        }

        StateHasChanged();
    }

    private void MediumDeleted(IEnumerable<Media>? medium)
    {
        if (medium == null) return;

        var removedStoredMedium = _activity.ActivityMedium.Where(am => !medium.Contains(am.Media)).ToList();

        foreach (var media in removedStoredMedium)
        {
            FileHandlingService.Delete(media.Media!.Path, _activity.Name);

            _activity.ActivityMedium.Remove(media);
        }

        var removedNewMedium = _newMedium.Where(am => !medium.Contains(am.Media));
        
        foreach (var media in removedNewMedium)
        {
            FileHandlingService.Delete(media.Media!.Path, _activity.Name);
        }

        _newMedium = new List<ActivityMedia>();

        foreach (var media in medium)
        {
            _newMedium.Add(new ActivityMedia
            {
                Media = media,
                Activity = _activity,
                ActivityId = _activity.ActivityId,
                MediaId = media.MediaId
            });
        }

        StateHasChanged();
    }

    private async Task LoadFile(IBrowserFile? file)
    {
        var media = new Media
            {
                MediaType = MediaType.Image,
                Path = await FileHandlingService.CaptureFile(file, _activity.Name)
            };
        
        _newMedium.Add(new ActivityMedia
        {
            Media = media,
            Activity = _activity,
            ActivityId = _activity.ActivityId,
            MediaId = media.MediaId
        });

        StateHasChanged();
    }


    
}
