@page "/editactivity/{ActivityId:int}"
@using FloorballTraining.Services
@using FloorballTraining.WebApp.Data
@using FloorballTraining.WebApp.Validations
@using FluentValidation.Results
@using Environment = FloorballTraining.CoreBusiness.Environment
@inject IEditActivityUseCase EditActivityUseCase
@inject IViewActivityByIdUseCase ViewActivityByIdUseCase
@inject IViewActivityNextByIdUseCase ViewActivityNextByIdUseCase
@inject IViewActivityPrevByIdUseCase ViewActivityPrevByIdUseCase
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IFileHandlingService FileHandlingService
@inject ICloneActivityUseCase CloneActivityUseCase
@inject IDeleteActivityUseCase DeleteActivityUseCase

@inject AppSettings AppSettings

@inject ISnackbar SnackBar


@if (_activity== null)
{
    <MudPaper Class="align-center justify-center mud-width-full" Elevation="0">
        <MudProgressCircular Color="Color.Warning" Size="Size.Large" Indeterminate="true" />
    </MudPaper>
}
else
{

<MudPaper Elevation="0" Class="d-inline-flex z-100 position-sticky top-0 align-center justify-end align-content-end gap-2"  Width="100%">
    <MudText Typo="Typo.h4">Aktivita</MudText>
    <MudSpacer/>
    <ExportToPdfActivityComponent Activity="_activity" Disabled="@(_editContext != null && _editContext.IsModified())"/>
    
    
        <SendActivityViaEmailComponent ActivityIds="new List<int>(){_activity.ActivityId}" />
    <MudChip Disabled="@(_editContext != null && !_editContext.IsModified())" Icon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Color="Color.Success" OnClick="Submit">Uložit</MudChip>

    <MudChip Disabled="@(_editContext != null && !_editContext.IsModified())" Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Outlined" OnClick="Cancel" Color="Color.Warning">Obnovit</MudChip>

    <MudChip Icon="@Icons.Material.Filled.NavigateBefore" Variant="Variant.Outlined"  Disabled="@(!_previousActivity.HasValue)" Color="Color.Success" OnClick="()=>NavigateTo(_previousActivity)" />
    <MudChip Icon="@Icons.Material.Filled.NavigateNext" Variant="Variant.Outlined" Disabled="@(!_nextActivity.HasValue)" Color="Color.Success" OnClick="()=>NavigateTo(_nextActivity)" />
    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Variant="Variant.Outlined" Dense="true" DisableElevation="true">
        <MudMenuItem Icon="@Icons.Material.Filled.CopyAll" OnClick="CloneActivity">Kopírovat</MudMenuItem>
        <MudMenuItem Icon="@Icons.Material.Filled.Delete" OnClick="()=> _isDialogForActivityDeletionVisible = true" >Odstranit</MudMenuItem>
    </MudMenu>
</MudPaper>

<MudPaper Elevation="0" Width="100%">
    <EditForm OnValidSubmit="Submit" EditContext="_editContext" >
        <FluentValidationValidator/>
        <ValidationSummary />
        <MudPaper Elevation="0" Class="d-flex flex-column mud-width-full ">

            <MudPaper Elevation="0" Class="d-inline-flex flex-wrap gap-2 align-items-end mud-width-full mb-2">
                <MudTextField Style="width:22em;" Class="flex-grow-0" Label="Název" @bind-Value="_activity.Name" For="() => _activity.Name" />
                
                <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                    <MudText>Počet osob: @Persons</MudText>
                    <RangeSlider @bind-ValueHigh="@_activity.PersonsMax" @bind-ValueLow="@_activity.PersonsMin" MinValue="1" MaxValue="@AppSettings.MaximalPersons" />
                </MudPaper>
            
                <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                    <MudText>Doba trvání: @Duration</MudText>
                    <RangeSlider @bind-ValueHigh="@_activity.DurationMax" @bind-ValueLow="@_activity.DurationMin" MaxValue="30" MinValue="1" />
                </MudPaper>

                <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                    <MudText>Intensita: @Intensities.Values.First(v => v.Value == _activity.Intensity).Description</MudText>
                    <Slider @bind-Value="@_activity.Intensity" MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue"  />
                </MudPaper>

                <MudPaper Elevation="0" Style="width:15em;" Class="mr-2 pa-0">
                    <MudText>Obtížnost: @Difficulties.Values.First(v => v.Value == _activity.Difficulty).Description</MudText>
                    <Slider @bind-Value="@_activity.Difficulty" MinValue="@Intensities.MinValue" MaxValue="@Intensities.MaxValue" />
                </MudPaper>
            </MudPaper>
            
            @*Poopis*@
            <MudTextField Label="Popis" @bind-Value="_activity.Description" For="() => _activity.Description" Lines="6" Variant="Variant.Outlined" Margin="Margin.Dense" Class="my-5" />

            @*Místo*@
            <MudPaper Elevation="1" Class="my-2">
                <MudExpansionPanel Dense="true" IsInitiallyExpanded="true">
            
                    <TitleContent>
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Place" Class="mr-3" />
                            <MudText><strong>Místo</strong></MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>

                            <ActivityPlaceComponent Environment="@_activity.Environment" Length="@_activity.PlaceLength" Width="@_activity.PlaceWidth" ActivityPlaceChanged="(v)=>PlaceChanged(v.environment, v.length, v.width)" />
                    </ChildContent>
                </MudExpansionPanel>
            </MudPaper>

           @*Osoby*@
            <MudPaper Elevation="1" Class="my-2">
                <MudExpansionPanel Dense="true" IsInitiallyExpanded="true">
                    <TitleContent>
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.People" Class="mr-3"/>
                            <MudText><strong>Osoby</strong></MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>

                        <AgeGroupsComponent SelectedValues="@_activity!.ActivityAgeGroups.Select(a=>a.AgeGroup)" SelectedValuesChanged="SelectedAgeGroupsChanged" />
                        
                    </ChildContent>
                </MudExpansionPanel>
            </MudPaper>
            
            
            
            @*Vybaveni*@
            <MudPaper Elevation="1" Class="my-2">
                    <MudExpansionPanel Dense="true" IsInitiallyExpanded="@_activity!.ActivityEquipments.Select(a=>a.Equipment).Any()">
                    <TitleContent>
                        <div class="d-flex">
                        <MudIcon Icon="fas fa-thin fa-clipboard-list" Class="mr-3"></MudIcon>
                        <MudText><strong>Vybavení</strong></MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                            <ActivityEquipmentsComponent SelectedValues="@_activity!.ActivityEquipments.Select(a=>a.Equipment).ToList()" SelectedValuesChanged="SelectedEquipmentsChanged" />
                    </ChildContent>
                </MudExpansionPanel>
            </MudPaper>
            
            @*Stitky*@
            <MudPaper Elevation="1" Class="my-2">
                    <MudExpansionPanel Dense="true" IsInitiallyExpanded="@_activity!.ActivityTags.Any()">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="fas fa-thin fa-tag" Class="mr-3"></MudIcon>
                    <MudText><strong>Štítky</strong></MudText>
                    </div>
                </TitleContent>
                        <ChildContent>
                            <TagExpandListComponent SelectedTags="@_activity!.ActivityTags.Select(a=>a.Tag).ToList()" OnSelectedTagsChanged="SelectedTagsChanged" />
                        </ChildContent>

            </MudExpansionPanel>


            </MudPaper>

            @*Obrazky a videa*@
            <MudPaper Elevation="1" Class="my-2">
                    <MudExpansionPanel Dense="true" IsInitiallyExpanded="@_activity!.ActivityMedium.Any(m => m.MediaType==MediaType.Image)">
                        <TitleContent>
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.Image" Class="mr-3"/>
                                <MudText><strong>Obrázky, videa</strong></MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>

                            <ActivityDrawingComponent OnDrawingChanged="AddNewDrawing"/>

                            <MudStack Style="width: 100%">

                                @foreach (var error in _validationResult.Errors)
                                {
                                    <MudText>@error.ErrorMessage</MudText>
                                }
                                <MudFileUpload T="IBrowserFile" For="() => _file" @onclick="()=> _validationResult =new ValidationResult()" OnFilesChanged="OnInputFileChanged" Hidden="false" InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20 justify-center align-center flex-auto cursor-pointer" InputStyle="opacity:0"
                                @ondragenter="@SetDragClass" @ondragleave="@ClearDragClass" @ondragend="@ClearDragClass" Accept=".png,.jpg,.jpeg,.bmp,.tif,.gif">

                                    <ButtonTemplate Context="_">
                                        <MudPaper Height="100px" Outlined="true" Class="@(_dragClass + " d-flex justify-center align-center align-content-center cursor-pointer" )">
                                            <div>Přesuňte soubory sem nebo zvolte možnost <strong>Procházet</strong> a soubory vyberte.</div>
                                        </MudPaper>
                                    </ButtonTemplate>
                                </MudFileUpload>
                            </MudStack>

                             <ActivityMediumComponent Medium="@(_activity!.ActivityMedium.Where(m=> m.MediaType==MediaType.Image || m.MediaType ==MediaType.Video).ToList()
                                                            .Union(_newActivityMedium.Where(m=> m.MediaType==MediaType.Image || m.MediaType ==MediaType.Video)).ToList())"
                                MediumChanged="RefreshMedium" StorageLocation="@(NavigationManager.BaseUri + Configuration.GetValue<string>("FileStorage")!)" /> 

                        </ChildContent>
                    </MudExpansionPanel>
                </MudPaper>

            @*Odkazy*@
            <MudPaper Elevation="1" Class="my-2">
                    <MudExpansionPanel Dense="true" IsInitiallyExpanded="@_activity!.ActivityMedium.Union(_newActivityMedium).Any(m => m.MediaType==MediaType.URL )">
                        <TitleContent>
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.Link" Class="mr-3"></MudIcon>
                                <MudText><strong>Odkazy</strong></MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <MudPaper Elevation="0" Class="mb-4 py-2">
                                <ActivityMediumUrlsComponent Medium="@_activity!.ActivityMedium.Union(_newActivityMedium).Where(m=>m.MediaType==MediaType.URL).ToList()" MediumChanged="e=>RefreshMedium(e, MediaType.URL)" />
                            </MudPaper>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudPaper>

        </MudPaper>
        </EditForm>
</MudPaper>

<MudDialog @bind-ref="_activityDeleteConfirmationDialog" @bind-IsVisible="_isDialogForActivityDeletionVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6"><MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3" />Smazání aktivity</MudText>
    </TitleContent>
    <DialogContent>
        <p>Opravdu chcete <strong>smazat</strong> aktivitu <strong>@_activity.Name</strong>?</p>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => _isDialogForActivityDeletionVisible = false" Class="px-10">Ne</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DeleteActivity" Class="px-10">Ano</MudButton>
    </DialogActions>
</MudDialog>

}


@code {
    [Parameter]
    public int ActivityId { get; set; } 

    private Activity? _activity ;

    private EditContext? _editContext;

    private int? _previousActivity;
    private int? _nextActivity;

    private string Persons => StringExtensions.GetRangeString(_activity!.PersonsMin, _activity.PersonsMax);
    private string Duration => StringExtensions.GetRangeString(_activity!.DurationMin, _activity.DurationMax);
    private static readonly string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10 ";
    private string _dragClass = DefaultDragClass;

    private readonly List<IBrowserFile?> _files = new();
    private IBrowserFile? _file;
    private ValidationResult _validationResult = new();

    private List<ActivityMedia> _newActivityMedium = new();
    private string _originalActivityName = string.Empty;
    private readonly DialogOptions _dialogOptions = new() { 
        NoHeader = false,CloseOnEscapeKey = true,CloseButton = true,DisableBackdropClick = true, MaxWidth = MaxWidth.Small,
        Position = DialogPosition.Center, FullScreen = false };

    private bool _isDialogForActivityDeletionVisible;
    private MudDialog? _activityDeleteConfirmationDialog ;

    protected override async Task OnInitializedAsync()
    {
        _activity = await ViewActivityByIdUseCase.ExecuteAsync(ActivityId);


        _editContext = new EditContext(_activity);
        

        _nextActivity = await ViewActivityNextByIdUseCase.ExecuteAsync(ActivityId);
        _previousActivity = await ViewActivityPrevByIdUseCase.ExecuteAsync(ActivityId);

        
        _originalActivityName = _activity.Name;

        _newActivityMedium = new List<ActivityMedia>();

    //_editContext!.MarkAsUnmodified();
    }

    private async Task Refresh()
    {
        _activity = await ViewActivityByIdUseCase.ExecuteAsync(ActivityId);

        _editContext = new EditContext(_activity);

        _nextActivity = await ViewActivityNextByIdUseCase.ExecuteAsync(ActivityId);
        _previousActivity = await ViewActivityPrevByIdUseCase.ExecuteAsync(ActivityId);
    }
    
    private async Task Submit()
    {

        if(!_editContext!.Validate()) return;

        foreach (var media in _activity!.ActivityMedium.Where(am => am.MediaType== MediaType.Image ))
        {
            FileHandlingService.Move(media.Path, _activity.Name);
        }

        if (_activity.Name != _originalActivityName)
        {
            foreach (var media in _activity.ActivityMedium.Where(am => am.MediaType==  MediaType.Image ))
            {
                var fileName = Path.GetFileName(media.Path);
                media.Path = Path.Combine(_activity.Name, fileName);

                FileHandlingService.Move(media.Path, _activity.Name);
            }

            foreach (var media in _newActivityMedium.Where(am => am.MediaType==MediaType.Image ))
            {
                FileHandlingService.Move(media.Path, _activity.Name);

                var fileName = Path.GetFileName(media.Path);
                media.Path = Path.Combine(_activity.Name, fileName);

                _activity.AddMedia(media);
            }

            FileHandlingService.DeleteActivityFolder(_originalActivityName);
        }
        else
        {
            foreach (var media in _newActivityMedium)
            {
                _activity.AddMedia(media);
            }
        }

        await EditActivityUseCase.ExecuteAsync(_activity);

        _editContext!.MarkAsUnmodified();

        //NavigationManager.NavigateTo("/activities");

    }

    

    private async Task Cancel()
    {
        foreach (var media in _newActivityMedium)
        {
            FileHandlingService.Delete(media.Path, _activity!.Name);
        }

        await Refresh();
    }

    private void SelectedTagsChanged(List<Tag> tags)
    {
        _activity!.ActivityTags = new List<ActivityTag>();
        foreach (var tag in tags)
        {
            _activity.AddTag(tag);
        }

        _editContext!.NotifyFieldChanged(new FieldIdentifier(_activity, nameof(_activity.ActivityTags)));
        StateHasChanged();
    }

    private void SelectedEquipmentsChanged(IEnumerable<Equipment> equipments)
    {
        _activity!.ActivityEquipments = new List<ActivityEquipment>();

        foreach (var equipment in equipments)
        {
            _activity.AddEquipment(equipment);
        }
        _editContext!.NotifyFieldChanged(new FieldIdentifier(_activity, nameof(_activity.ActivityEquipments)));
        StateHasChanged();
    }

    private void SelectedAgeGroupsChanged(IEnumerable<AgeGroup> ageGroups)
    {
        _activity!.ActivityAgeGroups = new List<ActivityAgeGroup>();

        foreach (var ageGroup in ageGroups)
        {
            _activity.AddAgeGroup(ageGroup);
        }
        _editContext!.NotifyFieldChanged(new FieldIdentifier(_activity, nameof(_activity.ActivityAgeGroups)));
        StateHasChanged();
    }

    private void RefreshMedium(IEnumerable<ActivityMedia>? medium)
    {
        if (medium == null) return;

        var removedStoredMedium = _activity!.ActivityMedium.Where(am => !medium.Contains(am)).ToList();

        foreach (var media in removedStoredMedium)
        {
            FileHandlingService.Delete(media.Path, _activity.Name);

            _activity.ActivityMedium.Remove(media);
        }

        var removedNewMedium = _newActivityMedium.Where(am => !medium.Contains(am));

        foreach (var media in removedNewMedium)
        {
            FileHandlingService.Delete(media.Path, _activity.Name);
        }

        _newActivityMedium = new List<ActivityMedia>();

        foreach (var media in medium)
        {
            _newActivityMedium.Add(media);
        }

        _editContext!.NotifyFieldChanged(new FieldIdentifier(_activity, nameof(_activity.ActivityMedium)));

        StateHasChanged();
    }

    private async Task LoadFile(IBrowserFile? file)
    {
        var media = new ActivityMedia
            {
                MediaType = MediaType.Image,
                Path = await FileHandlingService.CaptureFile(file, _activity!.Name)
            };

       _activity.AddMedia(media);

        StateHasChanged();

        _editContext!.NotifyFieldChanged(new FieldIdentifier(_activity, nameof(_activity.ActivityMedium)));
    }

    private void RefreshMedium(IEnumerable<ActivityMedia>? medium, MediaType mediaType)
    {
        if (medium == null) return;

        _activity!.ActivityMedium.RemoveAll(r => r.MediaType == mediaType);

        _newActivityMedium = new List<ActivityMedia>();

        foreach (var media in medium)
        {
            media.MediaType = mediaType;

            _activity.AddMedia(media);
        }

        _editContext!.NotifyFieldChanged(new FieldIdentifier(_activity, nameof(_activity.ActivityMedium)));
        StateHasChanged();

    }

    private async Task CloneActivity()
    {
        var clone = await CloneActivityUseCase.ExecuteAsync(_activity!);
        FileHandlingService.CopyActivityDirectory(_activity!.Name, clone.Name);
        NavigationManager.NavigateTo($"/editactivity/{clone.ActivityId}");
    }

    private async Task DeleteActivity()
    {
        _isDialogForActivityDeletionVisible = false;

        FileHandlingService.DeleteActivityFolder(_activity!.Name);
        await DeleteActivityUseCase.ExecuteAsync(_activity);

        NavigateTo(_previousActivity ?? _nextActivity);
    }
    
    private void NavigateTo(int? activityId)
    {
        NavigationManager.NavigateTo(activityId.HasValue ? $"/editactivity/{activityId}" : "/activities", true);
    }
    
   
    private void AddNewDrawing(DrawingResult drawing)
    {
        _newActivityMedium.Add(new ActivityMedia
        {
            MediaType = MediaType.Image,
            Path = string.Empty,
            Data = drawing.Json,
            Preview = drawing.Image,
            Activity = _activity,
            ActivityId = _activity!.ActivityId
        });

        _editContext!.NotifyFieldChanged(new FieldIdentifier(_activity, nameof(_activity.ActivityMedium)));
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        _file = e.File;

        if (_file == null)
        {
            return;
        }

        var fileValidator = new FileForUploadValidator();
        _validationResult = await fileValidator.ValidateAsync(_file);

        if (_validationResult.IsValid)
        {
            _files.Add(_file);

        }
        _file = null;

        await Upload();
    }

    private async Task Clear()
    {
        _files.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private async Task Upload()
    {
        foreach (var file in _files)
        {
            await LoadFile(file);
        }

        await Clear();
    }

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }

    private void PlaceChanged(Environment environment,  int length, int width)
    {
        _activity!.Environment = environment;
        _activity.PlaceLength = length;
        _activity.PlaceWidth = width;
    }
}
