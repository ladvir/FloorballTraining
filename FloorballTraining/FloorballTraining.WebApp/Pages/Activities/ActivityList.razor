@page "/activities"
@inject AppSettings AppSettings
@inject IViewActivityByCriteriaUseCase ViewActivityByCriteriaUseCase

<MudText Typo="Typo.h4">Aktivity</MudText>
<SearchActivityComponent SearchCriteria="@_searchCriteria" DurationMax="AppSettings.MaxActivityDuration" PersonsMax="@AppSettings.MaximalPersons" OnSearchItem="Search" OnActivityAdded="AddActivityIntoListOfActivities" />
<br/>

@if(_activities==null)
{
    <MudPaper Class="align-center justify-center mud-width-full" Elevation="0">
        <MudProgressCircular Color="Color.Warning" Size="Size.Large" Indeterminate="true" />
    </MudPaper>   
}else {
    <SendActivityViaEmailComponent ActivityIds="@_selectedActivityIds" />
    <ActivityListComponent Activities="@_activities" SelectedActivitiesChanged="OnSelectedActivitiesChanged" />
}

@code {
    SearchCriteria _searchCriteria = new ();
    List<Activity>? _activities ;
    List<int> _selectedActivityIds = new();

    protected override async Task OnInitializedAsync()
    {
        await SearchByCriteria(_searchCriteria);
    }

    private async Task Search(SearchCriteria searchCriteria)
    {
        _searchCriteria = searchCriteria;
        await SearchByCriteria(_searchCriteria);
    }

    private async Task SearchByCriteria(SearchCriteria searchCriteria)
    {
        var result = await ViewActivityByCriteriaUseCase.ExecuteAsync(searchCriteria);
        _activities = result.ToList();
    }

    private void AddActivityIntoListOfActivities(Activity activity)
    {
        _activities?.Add(activity);
    }

    private void OnSelectedActivitiesChanged(List<int> selectedActivityIds)
    {
        _selectedActivityIds = selectedActivityIds;
        StateHasChanged();
    }

}
