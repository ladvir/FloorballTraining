// <auto-generated />
using System;
using FloorballTraining.Plugins.EFCoreSqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FloorballTraining.Plugins.EFCoreSqlServer.Migrations
{
    [DbContext(typeof(FloorballTrainingContext))]
    partial class FloorballTrainingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FloorballTraining.CoreBusiness.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("DurationMax")
                        .HasColumnType("int");

                    b.Property<int>("DurationMin")
                        .HasColumnType("int");

                    b.Property<int>("Intesity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonsMax")
                        .HasColumnType("int");

                    b.Property<int>("PersonsMin")
                        .HasColumnType("int");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            Description = "Děti se rozdělí do dvou družstev, děti se drží za pas, první v řadě je hlava draka, poslední je ocas draka, družstva stojí asi 10 metrů od sebe, na povel se snaží hlava draka chytit ocas draka protihráče",
                            Difficulty = 0,
                            DurationMax = 10,
                            DurationMin = 5,
                            Intesity = 0,
                            Name = "Dračí zápasy",
                            PersonsMax = 30,
                            PersonsMin = 4
                        },
                        new
                        {
                            ActivityId = 2,
                            Description = "Čert má z rozlišováku připevněný ocas a snaží se všechny ostatní hráče polapit. Pokud někoho chytne, jde mimo hřiště.Hráči se snaží vzít čertovy ocas a osvobodit tak již chycené hráče. Po osvobození hráčů hra končí a stává se čertem hráč, který vzal čertovy ocas.",
                            Difficulty = 0,
                            DurationMax = 15,
                            DurationMin = 5,
                            Intesity = 1,
                            Name = "Čertovská honička",
                            PersonsMax = 30,
                            PersonsMin = 5
                        },
                        new
                        {
                            ActivityId = 3,
                            Description = "",
                            Difficulty = 2,
                            DurationMax = 20,
                            DurationMin = 10,
                            Intesity = 2,
                            Name = "Florbal 3x3",
                            PersonsMax = 12,
                            PersonsMin = 6
                        },
                        new
                        {
                            ActivityId = 4,
                            Description = "Všichni mají florbalky. Každá ovečka má míček. Vlk se postaví do základní pozice na druhé straně hřiště. Po zahájení hry se saží chytit ovečku tak, že ji vezme florbalově čistě míček. Nesmí se vracet ve směru pohybu. Ovečka, která přišla o míček se stává vlkem, Po chycení všech oveček hra končí.",
                            Difficulty = 0,
                            DurationMax = 15,
                            DurationMin = 5,
                            Intesity = 1,
                            Name = "Na ovečky a vlky s florbalkou a míčkem",
                            PersonsMax = 30,
                            PersonsMin = 15
                        },
                        new
                        {
                            ActivityId = 5,
                            Description = "",
                            Difficulty = 2,
                            DurationMax = 10,
                            DurationMin = 5,
                            Intesity = 2,
                            Name = "Florbal 1x1",
                            PersonsMax = 10,
                            PersonsMin = 2
                        },
                        new
                        {
                            ActivityId = 6,
                            Description = "",
                            Difficulty = 2,
                            DurationMax = 20,
                            DurationMin = 10,
                            Intesity = 2,
                            Name = "Florbal 2x2",
                            PersonsMax = 10,
                            PersonsMin = 4
                        },
                        new
                        {
                            ActivityId = 7,
                            Description = "",
                            Difficulty = 2,
                            DurationMax = 20,
                            DurationMin = 10,
                            Intesity = 2,
                            Name = "Florbal 5x5",
                            PersonsMax = 30,
                            PersonsMin = 10
                        },
                        new
                        {
                            ActivityId = 8,
                            Description = "",
                            Difficulty = 2,
                            DurationMax = 20,
                            DurationMin = 10,
                            Intesity = 2,
                            Name = "A8",
                            PersonsMax = 12,
                            PersonsMin = 6
                        },
                        new
                        {
                            ActivityId = 9,
                            Description = "",
                            Difficulty = 2,
                            DurationMax = 20,
                            DurationMin = 10,
                            Intesity = 2,
                            Name = "Aktivita 9",
                            PersonsMax = 12,
                            PersonsMin = 6
                        },
                        new
                        {
                            ActivityId = 10,
                            Description = "",
                            Difficulty = 0,
                            DurationMax = 20,
                            DurationMin = 10,
                            Intesity = 0,
                            Name = "Aktivita 10",
                            PersonsMax = 12,
                            PersonsMin = 6
                        },
                        new
                        {
                            ActivityId = 11,
                            Description = "",
                            Difficulty = 2,
                            DurationMax = 20,
                            DurationMin = 10,
                            Intesity = 1,
                            Name = "Test 1",
                            PersonsMax = 12,
                            PersonsMin = 6
                        },
                        new
                        {
                            ActivityId = 12,
                            Description = "",
                            Difficulty = 0,
                            DurationMax = 20,
                            DurationMin = 20,
                            Intesity = 2,
                            Name = "Test 2",
                            PersonsMax = 16,
                            PersonsMin = 14
                        });
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.ActivityAgeGroup", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("ActivityAgeGroupId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId", "ActivityAgeGroupId");

                    b.HasIndex("ActivityAgeGroupId");

                    b.ToTable("ActivityAgeGroups");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.ActivityEquipment", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("ActivityEquipments");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.ActivityMedia", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("MediaId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId", "MediaId");

                    b.HasIndex("MediaId");

                    b.ToTable("ActivityMedium");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.ActivityTag", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ActivityId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ActivityTags");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.AgeGroup", b =>
                {
                    b.Property<int>("AgeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgeGroupId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgeGroupId");

                    b.ToTable("AgeGroup");

                    b.HasData(
                        new
                        {
                            AgeGroupId = 1,
                            Description = "Kdokoliv",
                            Name = "Kdokoliv"
                        },
                        new
                        {
                            AgeGroupId = 7,
                            Description = "U7 - předpřípravka",
                            Name = "U7"
                        },
                        new
                        {
                            AgeGroupId = 9,
                            Description = "U9 - přípravka",
                            Name = "U9"
                        },
                        new
                        {
                            AgeGroupId = 11,
                            Description = "U11 - elévi",
                            Name = "U11"
                        },
                        new
                        {
                            AgeGroupId = 13,
                            Description = "U13 - ml. žáci",
                            Name = "U13"
                        },
                        new
                        {
                            AgeGroupId = 15,
                            Description = "U15 - st. žáci",
                            Name = "U15"
                        },
                        new
                        {
                            AgeGroupId = 17,
                            Description = "U17 - dorost",
                            Name = "U17"
                        },
                        new
                        {
                            AgeGroupId = 21,
                            Description = "U21 - junioři",
                            Name = "U21"
                        },
                        new
                        {
                            AgeGroupId = 23,
                            Description = "Dospělí",
                            Name = "Dospeli"
                        });
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.Equipment", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EquipmentId");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            EquipmentId = 1,
                            Name = "Rozlišovací dresy"
                        },
                        new
                        {
                            EquipmentId = 2,
                            Name = "Kužely"
                        },
                        new
                        {
                            EquipmentId = 3,
                            Name = "Skočky"
                        },
                        new
                        {
                            EquipmentId = 4,
                            Name = "Žebřík"
                        },
                        new
                        {
                            EquipmentId = 5,
                            Name = "Švihadlo"
                        },
                        new
                        {
                            EquipmentId = 6,
                            Name = "Fotbalový míč"
                        },
                        new
                        {
                            EquipmentId = 7,
                            Name = "Florbalové míčky"
                        },
                        new
                        {
                            EquipmentId = 8,
                            Name = "Florbalová branka"
                        });
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MediaId"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaId");

                    b.ToTable("Medium");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTrainingGoal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentTagId")
                        .HasColumnType("int");

                    b.HasKey("TagId");

                    b.HasIndex("ParentTagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Color = "#ffd254",
                            IsTrainingGoal = true,
                            Name = "Zaměření tréninku"
                        },
                        new
                        {
                            TagId = 11,
                            Color = "#ffd254",
                            IsTrainingGoal = true,
                            Name = "1 x 1",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 12,
                            Color = "#ffd254",
                            IsTrainingGoal = true,
                            Name = "2 x 2",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 13,
                            Color = "#ffd254",
                            IsTrainingGoal = true,
                            Name = "3 x 3",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 14,
                            Color = "#ffd254",
                            IsTrainingGoal = true,
                            Name = "4 x 4",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 15,
                            Color = "#ffd254",
                            IsTrainingGoal = true,
                            Name = "5 x 5",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 16,
                            Color = "#ffd254",
                            IsTrainingGoal = true,
                            Name = "2 x 3",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 17,
                            Color = "#ffd254",
                            IsTrainingGoal = true,
                            Name = "2 x 1",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 29,
                            Color = "#ffd254",
                            IsTrainingGoal = true,
                            Name = "Střelba",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 30,
                            Color = "#ffd254",
                            IsTrainingGoal = true,
                            Name = "Přihrávka",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 31,
                            Color = "#ffd254",
                            IsTrainingGoal = true,
                            Name = "Vedení míčku",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 35,
                            Color = "#ffd254",
                            IsTrainingGoal = true,
                            Name = "Uvolňování",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 37,
                            Color = "#e6e9eb",
                            IsTrainingGoal = true,
                            Name = "Herní myšlení",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 38,
                            Color = "#e6e9eb",
                            IsTrainingGoal = true,
                            Name = "Spolupráce v týmu",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 18,
                            Color = "#27dbf5",
                            IsTrainingGoal = true,
                            Name = "Brankář",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 19,
                            Color = "#27dbf5",
                            IsTrainingGoal = true,
                            Name = "Útočník",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 20,
                            Color = "#27dbf5",
                            IsTrainingGoal = true,
                            Name = "Obránce",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 6,
                            Color = "#17a258",
                            IsTrainingGoal = true,
                            Name = "Tělesná průprava",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 32,
                            Color = "#17a258",
                            IsTrainingGoal = true,
                            Name = "Ohebnost",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 33,
                            Color = "#17a258",
                            IsTrainingGoal = true,
                            Name = "Síla",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 34,
                            Color = "#17a258",
                            IsTrainingGoal = true,
                            Name = "Výbušnost",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 36,
                            Color = "#17a258",
                            IsTrainingGoal = true,
                            Name = "Rychlost",
                            ParentTagId = 1
                        },
                        new
                        {
                            TagId = 5,
                            Color = "#d9980d",
                            IsTrainingGoal = false,
                            Name = "Forma"
                        },
                        new
                        {
                            TagId = 25,
                            Color = "#d9980d",
                            IsTrainingGoal = false,
                            Name = "Hra",
                            ParentTagId = 5
                        },
                        new
                        {
                            TagId = 27,
                            Color = "#d9980d",
                            IsTrainingGoal = false,
                            Name = "Test",
                            ParentTagId = 5
                        },
                        new
                        {
                            TagId = 28,
                            Color = "#d9980d",
                            IsTrainingGoal = false,
                            Name = "Štafeta",
                            ParentTagId = 5
                        },
                        new
                        {
                            TagId = 4,
                            Color = "#0989c2",
                            IsTrainingGoal = false,
                            Name = "Tréninková část"
                        },
                        new
                        {
                            TagId = 21,
                            Color = "#0989c2",
                            IsTrainingGoal = false,
                            Name = "Rozehřátí",
                            ParentTagId = 4
                        },
                        new
                        {
                            TagId = 22,
                            Color = "#0989c2",
                            IsTrainingGoal = false,
                            Name = "Rozcvička",
                            ParentTagId = 4
                        },
                        new
                        {
                            TagId = 23,
                            Color = "#0989c2",
                            IsTrainingGoal = false,
                            Name = "Hlavní část",
                            ParentTagId = 4
                        },
                        new
                        {
                            TagId = 24,
                            Color = "#0989c2",
                            IsTrainingGoal = false,
                            Name = "Protahování",
                            ParentTagId = 4
                        },
                        new
                        {
                            TagId = 10,
                            Color = "#666666",
                            IsTrainingGoal = false,
                            Name = "Vlastní"
                        });
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.Training", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingId"));

                    b.Property<string>("CommentAfter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentBefore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Intesity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonsMax")
                        .HasColumnType("int");

                    b.Property<int>("PersonsMin")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingGoalTagId")
                        .HasColumnType("int");

                    b.HasKey("TrainingId");

                    b.HasIndex("TrainingGoalTagId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.TrainingAgeGroup", b =>
                {
                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingAgeGroupId")
                        .HasColumnType("int");

                    b.HasKey("TrainingId", "TrainingAgeGroupId");

                    b.HasIndex("TrainingAgeGroupId");

                    b.ToTable("TrainingAgeGroups");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.TrainingGroup", b =>
                {
                    b.Property<int>("TrainingGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingGroupId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonsMax")
                        .HasColumnType("int");

                    b.Property<int>("PersonsMin")
                        .HasColumnType("int");

                    b.Property<int>("TrainingPartId")
                        .HasColumnType("int");

                    b.HasKey("TrainingGroupId");

                    b.HasIndex("TrainingPartId");

                    b.ToTable("TrainingGroups");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.TrainingGroupActivity", b =>
                {
                    b.Property<int>("TrainingGroupActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingGroupActivityId"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("TrainingGroupId")
                        .HasColumnType("int");

                    b.HasKey("TrainingGroupActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("TrainingGroupId");

                    b.ToTable("TrainingGroupActivities");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.TrainingPart", b =>
                {
                    b.Property<int>("TrainingPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingPartId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("TrainingPartId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingParts");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.ActivityAgeGroup", b =>
                {
                    b.HasOne("FloorballTraining.CoreBusiness.AgeGroup", "AgeGroup")
                        .WithMany("ActivityAgeGroups")
                        .HasForeignKey("ActivityAgeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloorballTraining.CoreBusiness.Activity", "Activity")
                        .WithMany("ActivityAgeGroups")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("AgeGroup");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.ActivityEquipment", b =>
                {
                    b.HasOne("FloorballTraining.CoreBusiness.Activity", "Activity")
                        .WithMany("ActivityEquipments")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloorballTraining.CoreBusiness.Equipment", "Equipment")
                        .WithMany("ActivityEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.ActivityMedia", b =>
                {
                    b.HasOne("FloorballTraining.CoreBusiness.Activity", "Activity")
                        .WithMany("ActivityMedium")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloorballTraining.CoreBusiness.Media", "Media")
                        .WithMany("ActivityMedium")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Media");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.ActivityTag", b =>
                {
                    b.HasOne("FloorballTraining.CoreBusiness.Activity", "Activity")
                        .WithMany("ActivityTags")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloorballTraining.CoreBusiness.Tag", "Tag")
                        .WithMany("ActivityTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.Tag", b =>
                {
                    b.HasOne("FloorballTraining.CoreBusiness.Tag", "ParentTag")
                        .WithMany()
                        .HasForeignKey("ParentTagId");

                    b.Navigation("ParentTag");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.Training", b =>
                {
                    b.HasOne("FloorballTraining.CoreBusiness.Tag", "TrainingGoal")
                        .WithMany()
                        .HasForeignKey("TrainingGoalTagId");

                    b.Navigation("TrainingGoal");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.TrainingAgeGroup", b =>
                {
                    b.HasOne("FloorballTraining.CoreBusiness.AgeGroup", "AgeGroup")
                        .WithMany("TrainingAgeGroups")
                        .HasForeignKey("TrainingAgeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloorballTraining.CoreBusiness.Training", "Training")
                        .WithMany("TrainingAgeGroups")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeGroup");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.TrainingGroup", b =>
                {
                    b.HasOne("FloorballTraining.CoreBusiness.TrainingPart", "TrainingPart")
                        .WithMany("TrainingGroups")
                        .HasForeignKey("TrainingPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingPart");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.TrainingGroupActivity", b =>
                {
                    b.HasOne("FloorballTraining.CoreBusiness.Activity", "Activity")
                        .WithMany("TrainingGroupActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FloorballTraining.CoreBusiness.TrainingGroup", "TrainingGroup")
                        .WithMany("TrainingGroupActivities")
                        .HasForeignKey("TrainingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("TrainingGroup");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.TrainingPart", b =>
                {
                    b.HasOne("FloorballTraining.CoreBusiness.Training", "Training")
                        .WithMany("TrainingParts")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.Activity", b =>
                {
                    b.Navigation("ActivityAgeGroups");

                    b.Navigation("ActivityEquipments");

                    b.Navigation("ActivityMedium");

                    b.Navigation("ActivityTags");

                    b.Navigation("TrainingGroupActivities");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.AgeGroup", b =>
                {
                    b.Navigation("ActivityAgeGroups");

                    b.Navigation("TrainingAgeGroups");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.Equipment", b =>
                {
                    b.Navigation("ActivityEquipments");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.Media", b =>
                {
                    b.Navigation("ActivityMedium");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.Tag", b =>
                {
                    b.Navigation("ActivityTags");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.Training", b =>
                {
                    b.Navigation("TrainingAgeGroups");

                    b.Navigation("TrainingParts");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.TrainingGroup", b =>
                {
                    b.Navigation("TrainingGroupActivities");
                });

            modelBuilder.Entity("FloorballTraining.CoreBusiness.TrainingPart", b =>
                {
                    b.Navigation("TrainingGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
