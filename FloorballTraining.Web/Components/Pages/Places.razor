@page "/places"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

@inject FloorballTrainingConfigurationService FloorballTrainingConfigurationService

<PageTitle>Places</PageTitle>
<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Places" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Gap="0.5rem">
                <RadzenButton Icon="add_circle_outline" Text="Add" Click="@AddButtonClick" Variant="Variant.Flat" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
      <RadzenColumn SizeMD=12>
        <RadzenDataGrid @ref="grid0" ColumnWidth="200px"   AllowFiltering="true" FilterMode="FilterMode.Advanced" AllowPaging="true" AllowSorting="true" ShowPagingSummary="true" PageSizeOptions=@(new int[]{5, 10, 20, 30})
            Data="@places" TItem="FloorballTraining.Web.Models.FloorballTrainingConfiguration.Place" RowSelect="@EditRow">
            <Columns>
                <RadzenDataGridColumn TItem="FloorballTraining.Web.Models.FloorballTrainingConfiguration.Place" Property="Id" Title="Id">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="FloorballTraining.Web.Models.FloorballTrainingConfiguration.Place" Property="Name" Title="Name">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="FloorballTraining.Web.Models.FloorballTrainingConfiguration.Place" Property="Width" Title="Width">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="FloorballTraining.Web.Models.FloorballTrainingConfiguration.Place" Property="Length" Title="Length">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="FloorballTraining.Web.Models.FloorballTrainingConfiguration.Place" Property="Environment" Title="Environment">
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="FloorballTraining.Web.Models.FloorballTrainingConfiguration.Place" Filterable="false" Sortable="false" Width="70px" TextAlign="TextAlign.Center">
                    <Template Context="place">

                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.Medium"
                            Shade="Shade.Lighter" Variant="Variant.Flat"
                            Click=@(args => GridDeleteButtonClick(args, place)) @onclick:stopPropagation="true" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>

        </RadzenDataGrid>

    </RadzenColumn>
  </RadzenRow>
</RadzenStack>
@code {

    protected IEnumerable<FloorballTraining.Web.Models.FloorballTrainingConfiguration.Place> places;

    protected RadzenDataGrid<FloorballTraining.Web.Models.FloorballTrainingConfiguration.Place> grid0;
    protected override async Task OnInitializedAsync()
    {
        places = await FloorballTrainingConfigurationService.GetPlaces();
    }

    protected async Task AddButtonClick(MouseEventArgs args)
    {
        await DialogService.OpenAsync<AddPlace>("Add Place", null);
        await grid0.Reload();
    }

    protected async Task EditRow(FloorballTraining.Web.Models.FloorballTrainingConfiguration.Place args)
    {
        await DialogService.OpenAsync<EditPlace>("Edit Place", new Dictionary<string, object> { {"Id", args.Id} });
    }

    protected async Task GridDeleteButtonClick(MouseEventArgs args, FloorballTraining.Web.Models.FloorballTrainingConfiguration.Place place)
    {
        try
        {
            if (await DialogService.Confirm("Are you sure you want to delete this record?") == true)
            {
                var deleteResult = await FloorballTrainingConfigurationService.DeletePlace(place.Id);

                if (deleteResult != null)
                {
                    await grid0.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = $"Error",
                Detail = $"Unable to delete Place"
            });
        }
    }
}
